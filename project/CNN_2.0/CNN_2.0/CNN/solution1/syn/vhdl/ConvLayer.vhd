-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ConvLayer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_val_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_val_V_ce0 : OUT STD_LOGIC;
    input_val_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    convlayer_output_val_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    convlayer_output_val_V_ce0 : OUT STD_LOGIC;
    convlayer_output_val_V_we0 : OUT STD_LOGIC;
    convlayer_output_val_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    convlayer_output_rows_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    convlayer_output_rows_ce0 : OUT STD_LOGIC;
    convlayer_output_rows_we0 : OUT STD_LOGIC;
    convlayer_output_rows_d0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    convlayer_output_cols_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    convlayer_output_cols_ce0 : OUT STD_LOGIC;
    convlayer_output_cols_we0 : OUT STD_LOGIC;
    convlayer_output_cols_d0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
end;


architecture behav of ConvLayer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv31_7FFFFFFF : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111111111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv31_1F : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000011111";
    constant ap_const_lv6_21 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_9E : STD_LOGIC_VECTOR (7 downto 0) := "10011110";
    constant ap_const_lv8_70 : STD_LOGIC_VECTOR (7 downto 0) := "01110000";
    constant ap_const_lv8_6F : STD_LOGIC_VECTOR (7 downto 0) := "01101111";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_10 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_const_lv12_FF0 : STD_LOGIC_VECTOR (11 downto 0) := "111111110000";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal convlayer2_k_rows_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal convlayer2_k_rows_ce0 : STD_LOGIC;
    signal convlayer2_k_rows_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal convlayer2_k_cols_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal convlayer2_k_cols_ce0 : STD_LOGIC;
    signal convlayer2_k_cols_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal convlayer2_k_val_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal convlayer2_k_val_V_ce0 : STD_LOGIC;
    signal convlayer2_k_val_V_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal convlayer2_b_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal convlayer2_b_V_ce0 : STD_LOGIC;
    signal convlayer2_b_V_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal j_0_i_reg_488 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_0_i4_reg_511 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_0_i2_reg_533 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_0_i3_reg_555 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_cast_fu_629_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_cast_reg_1976 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_7_fu_639_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_7_reg_1984 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond7_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_6_fu_651_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_6_reg_1993 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_138_cast_fu_665_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_138_cast_reg_1998 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_4_fu_675_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal j_5_fu_701_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_5_reg_2014 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_137_fu_772_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_137_reg_2019 : STD_LOGIC_VECTOR (34 downto 0);
    signal exitcond_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_70_fu_778_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_70_reg_2034 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_kernel_rows_reg_2045 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal p_kernel_cols_reg_2050 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond3_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_9_fu_788_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_9_reg_2059 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_141_fu_819_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_141_reg_2064 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond1_fu_925_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_2194 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state9_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal j_8_fu_930_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_8_reg_2198 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal exitcond8_i_fu_1079_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_11_fu_1085_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_11_reg_2212 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_157_cast_fu_1099_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_157_cast_reg_2217 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_i_fu_1103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_reg_2222 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state14_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state15_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal j_7_fu_1109_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal p_output_val_V_addr_6_reg_2236 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_140_cast_fu_1145_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_140_cast_reg_2242 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_71_fu_1149_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_71_reg_2247 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_65_fu_1153_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_65_reg_2252 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_i_fu_1157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal i_8_fu_1163_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_8_reg_2261 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_146_cast_fu_1177_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_146_cast_reg_2266 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_i1_fu_1181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i1_reg_2271 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state19_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state20_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state21_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state22_pp3_stage0_iter3 : BOOLEAN;
    signal ap_block_state23_pp3_stage0_iter4 : BOOLEAN;
    signal ap_block_state24_pp3_stage0_iter5 : BOOLEAN;
    signal ap_block_state25_pp3_stage0_iter6 : BOOLEAN;
    signal ap_block_state26_pp3_stage0_iter7 : BOOLEAN;
    signal ap_block_state27_pp3_stage0_iter8 : BOOLEAN;
    signal ap_block_state28_pp3_stage0_iter9 : BOOLEAN;
    signal ap_block_state29_pp3_stage0_iter10 : BOOLEAN;
    signal ap_block_state30_pp3_stage0_iter11 : BOOLEAN;
    signal ap_block_state31_pp3_stage0_iter12 : BOOLEAN;
    signal ap_block_state32_pp3_stage0_iter13 : BOOLEAN;
    signal ap_block_state33_pp3_stage0_iter14 : BOOLEAN;
    signal ap_block_state34_pp3_stage0_iter15 : BOOLEAN;
    signal ap_block_state35_pp3_stage0_iter16 : BOOLEAN;
    signal ap_block_state36_pp3_stage0_iter17 : BOOLEAN;
    signal ap_block_state37_pp3_stage0_iter18 : BOOLEAN;
    signal ap_block_state38_pp3_stage0_iter19 : BOOLEAN;
    signal ap_block_state39_pp3_stage0_iter20 : BOOLEAN;
    signal ap_block_state40_pp3_stage0_iter21 : BOOLEAN;
    signal ap_block_state41_pp3_stage0_iter22 : BOOLEAN;
    signal ap_block_state42_pp3_stage0_iter23 : BOOLEAN;
    signal ap_block_state43_pp3_stage0_iter24 : BOOLEAN;
    signal ap_block_state44_pp3_stage0_iter25 : BOOLEAN;
    signal ap_block_state45_pp3_stage0_iter26 : BOOLEAN;
    signal ap_block_state46_pp3_stage0_iter27 : BOOLEAN;
    signal ap_block_state47_pp3_stage0_iter28 : BOOLEAN;
    signal ap_block_state48_pp3_stage0_iter29 : BOOLEAN;
    signal ap_block_state49_pp3_stage0_iter30 : BOOLEAN;
    signal ap_block_state50_pp3_stage0_iter31 : BOOLEAN;
    signal ap_block_state51_pp3_stage0_iter32 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal exitcond_i1_reg_2271_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i1_reg_2271_pp3_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i1_reg_2271_pp3_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i1_reg_2271_pp3_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i1_reg_2271_pp3_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i1_reg_2271_pp3_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i1_reg_2271_pp3_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i1_reg_2271_pp3_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i1_reg_2271_pp3_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i1_reg_2271_pp3_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i1_reg_2271_pp3_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i1_reg_2271_pp3_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i1_reg_2271_pp3_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i1_reg_2271_pp3_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i1_reg_2271_pp3_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i1_reg_2271_pp3_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i1_reg_2271_pp3_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i1_reg_2271_pp3_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i1_reg_2271_pp3_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i1_reg_2271_pp3_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i1_reg_2271_pp3_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i1_reg_2271_pp3_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i1_reg_2271_pp3_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i1_reg_2271_pp3_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i1_reg_2271_pp3_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i1_reg_2271_pp3_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i1_reg_2271_pp3_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i1_reg_2271_pp3_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i1_reg_2271_pp3_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i1_reg_2271_pp3_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i1_reg_2271_pp3_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_9_fu_1187_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal p_output_val_V_addr_4_reg_2280 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_output_val_V_addr_4_reg_2280_pp3_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_output_val_V_addr_4_reg_2280_pp3_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_output_val_V_addr_4_reg_2280_pp3_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_output_val_V_addr_4_reg_2280_pp3_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_output_val_V_addr_4_reg_2280_pp3_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_output_val_V_addr_4_reg_2280_pp3_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_output_val_V_addr_4_reg_2280_pp3_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_output_val_V_addr_4_reg_2280_pp3_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_output_val_V_addr_4_reg_2280_pp3_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_output_val_V_addr_4_reg_2280_pp3_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_output_val_V_addr_4_reg_2280_pp3_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_output_val_V_addr_4_reg_2280_pp3_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_output_val_V_addr_4_reg_2280_pp3_iter13_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_output_val_V_addr_4_reg_2280_pp3_iter14_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_output_val_V_addr_4_reg_2280_pp3_iter15_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_output_val_V_addr_4_reg_2280_pp3_iter16_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_output_val_V_addr_4_reg_2280_pp3_iter17_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_output_val_V_addr_4_reg_2280_pp3_iter18_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_output_val_V_addr_4_reg_2280_pp3_iter19_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_output_val_V_addr_4_reg_2280_pp3_iter20_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_output_val_V_addr_4_reg_2280_pp3_iter21_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_output_val_V_addr_4_reg_2280_pp3_iter22_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_output_val_V_addr_4_reg_2280_pp3_iter23_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_output_val_V_addr_4_reg_2280_pp3_iter24_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_output_val_V_addr_4_reg_2280_pp3_iter25_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_output_val_V_addr_4_reg_2280_pp3_iter26_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_output_val_V_addr_4_reg_2280_pp3_iter27_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_output_val_V_addr_4_reg_2280_pp3_iter28_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_output_val_V_addr_4_reg_2280_pp3_iter29_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_output_val_V_addr_4_reg_2280_pp3_iter30_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_output_val_V_addr_4_reg_2280_pp3_iter31_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_82_fu_1221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_82_reg_2286 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_82_reg_2286_pp3_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_82_reg_2286_pp3_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_82_reg_2286_pp3_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal is_neg_fu_1227_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_neg_reg_2291 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_neg_reg_2291_pp3_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal is_neg_reg_2291_pp3_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal is_neg_reg_2291_pp3_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_43_fu_1241_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_43_reg_2296 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_32_cast_fu_1249_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_32_cast_reg_2301 : STD_LOGIC_VECTOR (32 downto 0);
    signal num_zeros_fu_1279_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_zeros_reg_2307 : STD_LOGIC_VECTOR (31 downto 0);
    signal msb_idx_fu_1283_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal msb_idx_reg_2312 : STD_LOGIC_VECTOR (31 downto 0);
    signal msb_idx_reg_2312_pp3_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal msb_idx_reg_2312_pp3_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_3_fu_1399_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_3_reg_2317 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_11_fu_1407_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_11_reg_2322 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_203_reg_2327 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_fu_1471_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_reg_2332 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_614_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_reg_2337 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_96_fu_607_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_96_reg_2342 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_619_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_99_reg_2347 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_624_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_100_reg_2352 : STD_LOGIC_VECTOR (63 downto 0);
    signal isneg_reg_2357 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_176_fu_1508_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_176_reg_2363 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_103_fu_1512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_103_reg_2368 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_104_fu_1524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_104_reg_2374 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_105_fu_1530_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_105_reg_2381 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_106_fu_1536_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_106_reg_2386 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_107_fu_1542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_107_reg_2391 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond5_fu_1745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal i_10_fu_1751_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_10_reg_2401 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_152_cast_fu_1766_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_152_cast_reg_2406 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_154_cast_fu_1782_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_154_cast_reg_2411 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond4_fu_1786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_reg_2416 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_block_state54_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state55_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal j_6_fu_1792_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_6_reg_2420 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state14 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state19 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter32 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state54 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal p_temp_val_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_temp_val_V_ce0 : STD_LOGIC;
    signal p_temp_val_V_we0 : STD_LOGIC;
    signal p_temp_val_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_output_val_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_output_val_V_ce0 : STD_LOGIC;
    signal p_output_val_V_we0 : STD_LOGIC;
    signal p_output_val_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_output_val_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_output_val_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_output_val_V_ce1 : STD_LOGIC;
    signal p_output_val_V_we1 : STD_LOGIC;
    signal p_output_val_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_output_val_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Conv10_fu_567_ap_start : STD_LOGIC;
    signal grp_Conv10_fu_567_ap_done : STD_LOGIC;
    signal grp_Conv10_fu_567_ap_idle : STD_LOGIC;
    signal grp_Conv10_fu_567_ap_ready : STD_LOGIC;
    signal grp_Conv10_fu_567_src_val_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Conv10_fu_567_src_val_V_ce0 : STD_LOGIC;
    signal grp_Conv10_fu_567_dst_val_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_Conv10_fu_567_dst_val_V_ce0 : STD_LOGIC;
    signal grp_Conv10_fu_567_dst_val_V_we0 : STD_LOGIC;
    signal grp_Conv10_fu_567_dst_val_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_430 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_i1_reg_442 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond2_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_0_i1_reg_453 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond6_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_464 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_0_i_reg_476 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_phi_mux_j_0_i_phi_fu_492_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal i_0_i4_reg_500 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal i_0_i2_reg_522 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal i_0_i3_reg_544 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_phi_mux_j_0_i3_phi_fu_559_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal grp_Conv10_fu_567_ap_start_reg : STD_LOGIC := '0';
    signal tmp_144_cast_fu_690_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_74_fu_746_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_158_cast_fu_945_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_161_cast_fu_1124_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal tmp_155_cast_fu_1202_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal tmp_160_cast_fu_1807_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_159_cast_fu_1821_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_kernel_val_V_0_0_s_fu_178 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_kernel_val_4_V_0_s_fu_950_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_kernel_val_V_0_1_s_fu_182 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_kernel_val_V_0_2_s_fu_186 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_kernel_val_V_0_3_s_fu_190 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_kernel_val_V_0_4_s_fu_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_kernel_val_V_1_0_s_fu_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_kernel_val_V_1_1_s_fu_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_kernel_val_V_1_2_s_fu_206 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_kernel_val_V_1_3_s_fu_210 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_kernel_val_V_1_4_s_fu_214 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_kernel_val_V_2_0_s_fu_218 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_kernel_val_V_2_1_s_fu_222 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_kernel_val_V_2_2_s_fu_226 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_kernel_val_V_2_3_s_fu_230 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_kernel_val_V_2_4_s_fu_234 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_kernel_val_V_3_0_s_fu_238 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_kernel_val_V_3_1_s_fu_242 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_kernel_val_V_3_2_s_fu_246 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_kernel_val_V_3_3_s_fu_250 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_kernel_val_V_3_4_s_fu_254 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_kernel_val_V_4_0_s_fu_258 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_kernel_val_V_4_1_s_fu_262 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_kernel_val_V_4_2_s_fu_266 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_kernel_val_V_4_3_s_fu_270 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_kernel_val_V_4_4_s_fu_274 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel3_fu_1736_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_fu_604_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_657_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_75_cast_fu_681_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_138_fu_685_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_fu_707_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl8_fu_719_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_715_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl8_cast_fu_727_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_72_fu_731_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_73_fu_737_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_121_cast_fu_742_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_135_fu_756_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_136_fu_764_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_shl1_cast_fu_768_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_74_cast_fu_752_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_77_cast_fu_794_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_140_fu_798_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_152_fu_807_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_cast_fu_811_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_151_fu_803_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_89_cast_fu_936_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_146_fu_940_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_145_fu_1091_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_98_cast_fu_1115_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_149_fu_1119_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_134_fu_1137_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_71_fu_1149_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_65_fu_1153_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_139_fu_1169_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_80_cast_fu_1193_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_144_fu_1197_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_81_fu_1207_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_81_fu_1207_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_30_cast_fu_1216_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_30_fu_1211_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_30_cast_fu_1216_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_136_cast_fu_1235_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_1253_p4 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Result_5_fu_1263_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_83_fu_1271_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_157_fu_1292_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_155_fu_1288_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal msb_idx_1_fu_1300_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_162_fu_1308_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_86_fu_1324_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_141_cast_fu_1330_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_163_fu_1339_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_164_fu_1343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_166_fu_1355_p4 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_167_fu_1364_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_165_fu_1349_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_169_fu_1377_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_168_fu_1370_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_170_fu_1385_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_171_fu_1389_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_fu_1318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp32_V_1_fu_1334_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_fu_1395_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_601_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_91_fu_1421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_173_fu_1426_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp24_cast_cast_fu_1429_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_1_trunc_fu_1437_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_95_fu_1443_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_6_fu_1450_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_7_op_fu_1461_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_66_fu_1467_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_assign_fu_610_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_1478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_fu_1494_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_174_fu_1482_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_101_fu_1504_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_1518_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_102_fu_1548_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_7_fu_1555_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_1_fu_1559_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal sh_amt_fu_1572_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_2_fu_1565_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_178_fu_1591_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal sh_amt_cast_fu_1577_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_111_fu_1607_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_112_fu_1611_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_177_fu_1581_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp1_fu_1634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_demorgan_fu_1644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_1648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_1654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_109_fu_1585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_1665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp21_demorgan_fu_1677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_fu_1601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_1682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_1688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_114_fu_1628_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_assign_fu_1621_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp3_fu_1671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_1659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_179_fu_1617_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp2_fu_1639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_1702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel_fu_1694_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel1_fu_1708_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond1_fu_1716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_fu_1730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel2_fu_1722_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_78_cast_fu_1757_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_142_fu_1761_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_143_fu_1774_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_94_cast1_fu_1798_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_148_fu_1802_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_94_cast_fu_1812_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_147_fu_1816_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;

    component Conv10 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_val_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        src_val_V_ce0 : OUT STD_LOGIC;
        src_val_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        src_val_V_offset : IN STD_LOGIC_VECTOR (2 downto 0);
        kernel_val_0_V_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_0_V_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_0_V_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_0_V_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_0_V_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_1_V_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_1_V_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_1_V_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_1_V_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_1_V_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_2_V_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_2_V_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_2_V_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_2_V_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_2_V_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_3_V_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_3_V_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_3_V_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_3_V_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_3_V_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_4_V_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_4_V_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_4_V_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_4_V_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_4_V_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        dst_val_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        dst_val_V_ce0 : OUT STD_LOGIC;
        dst_val_V_we0 : OUT STD_LOGIC;
        dst_val_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_Core_uitofp_3qcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_Core_fptrunc_rcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_Core_fpext_32sc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component CNN_Core_fexp_32ntde IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_Core_dadd_64nudo IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component CNN_Core_ddiv_64nvdy IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component ConvLayer_convlayDeQ IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component ConvLayer_convlayFfa IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component ConvLayer_convlayGfk IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component ConvLayer_p_temp_Hfu IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ConvLayer_p_outpuIfE IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    convlayer2_k_rows_U : component ConvLayer_convlayDeQ
    generic map (
        DataWidth => 3,
        AddressRange => 72,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => convlayer2_k_rows_address0,
        ce0 => convlayer2_k_rows_ce0,
        q0 => convlayer2_k_rows_q0);

    convlayer2_k_cols_U : component ConvLayer_convlayDeQ
    generic map (
        DataWidth => 3,
        AddressRange => 72,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => convlayer2_k_cols_address0,
        ce0 => convlayer2_k_cols_ce0,
        q0 => convlayer2_k_cols_q0);

    convlayer2_k_val_V_U : component ConvLayer_convlayFfa
    generic map (
        DataWidth => 18,
        AddressRange => 1800,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => convlayer2_k_val_V_address0,
        ce0 => convlayer2_k_val_V_ce0,
        q0 => convlayer2_k_val_V_q0);

    convlayer2_b_V_U : component ConvLayer_convlayGfk
    generic map (
        DataWidth => 15,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => convlayer2_b_V_address0,
        ce0 => convlayer2_b_V_ce0,
        q0 => convlayer2_b_V_q0);

    p_temp_val_V_U : component ConvLayer_p_temp_Hfu
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_temp_val_V_address0,
        ce0 => p_temp_val_V_ce0,
        we0 => p_temp_val_V_we0,
        d0 => grp_Conv10_fu_567_dst_val_V_d0,
        q0 => p_temp_val_V_q0);

    p_output_val_V_U : component ConvLayer_p_outpuIfE
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_output_val_V_address0,
        ce0 => p_output_val_V_ce0,
        we0 => p_output_val_V_we0,
        d0 => p_output_val_V_d0,
        q0 => p_output_val_V_q0,
        address1 => p_output_val_V_address1,
        ce1 => p_output_val_V_ce1,
        we1 => p_output_val_V_we1,
        d1 => p_output_val_V_d1,
        q1 => p_output_val_V_q1);

    grp_Conv10_fu_567 : component Conv10
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Conv10_fu_567_ap_start,
        ap_done => grp_Conv10_fu_567_ap_done,
        ap_idle => grp_Conv10_fu_567_ap_idle,
        ap_ready => grp_Conv10_fu_567_ap_ready,
        src_val_V_address0 => grp_Conv10_fu_567_src_val_V_address0,
        src_val_V_ce0 => grp_Conv10_fu_567_src_val_V_ce0,
        src_val_V_q0 => input_val_V_q0,
        src_val_V_offset => j_reg_464,
        kernel_val_0_V_0_read => p_kernel_val_V_0_0_s_fu_178,
        kernel_val_0_V_1_read => p_kernel_val_V_0_1_s_fu_182,
        kernel_val_0_V_2_read => p_kernel_val_V_0_2_s_fu_186,
        kernel_val_0_V_3_read => p_kernel_val_V_0_3_s_fu_190,
        kernel_val_0_V_4_read => p_kernel_val_V_0_4_s_fu_194,
        kernel_val_1_V_0_read => p_kernel_val_V_1_0_s_fu_198,
        kernel_val_1_V_1_read => p_kernel_val_V_1_1_s_fu_202,
        kernel_val_1_V_2_read => p_kernel_val_V_1_2_s_fu_206,
        kernel_val_1_V_3_read => p_kernel_val_V_1_3_s_fu_210,
        kernel_val_1_V_4_read => p_kernel_val_V_1_4_s_fu_214,
        kernel_val_2_V_0_read => p_kernel_val_V_2_0_s_fu_218,
        kernel_val_2_V_1_read => p_kernel_val_V_2_1_s_fu_222,
        kernel_val_2_V_2_read => p_kernel_val_V_2_2_s_fu_226,
        kernel_val_2_V_3_read => p_kernel_val_V_2_3_s_fu_230,
        kernel_val_2_V_4_read => p_kernel_val_V_2_4_s_fu_234,
        kernel_val_3_V_0_read => p_kernel_val_V_3_0_s_fu_238,
        kernel_val_3_V_1_read => p_kernel_val_V_3_1_s_fu_242,
        kernel_val_3_V_2_read => p_kernel_val_V_3_2_s_fu_246,
        kernel_val_3_V_3_read => p_kernel_val_V_3_3_s_fu_250,
        kernel_val_3_V_4_read => p_kernel_val_V_3_4_s_fu_254,
        kernel_val_4_V_0_read => p_kernel_val_V_4_0_s_fu_258,
        kernel_val_4_V_1_read => p_kernel_val_V_4_1_s_fu_262,
        kernel_val_4_V_2_read => p_kernel_val_V_4_2_s_fu_266,
        kernel_val_4_V_3_read => p_kernel_val_V_4_3_s_fu_270,
        kernel_val_4_V_4_read => p_kernel_val_V_4_4_s_fu_274,
        dst_val_V_address0 => grp_Conv10_fu_567_dst_val_V_address0,
        dst_val_V_ce0 => grp_Conv10_fu_567_dst_val_V_ce0,
        dst_val_V_we0 => grp_Conv10_fu_567_dst_val_V_we0,
        dst_val_V_d0 => grp_Conv10_fu_567_dst_val_V_d0);

    CNN_Core_uitofp_3qcK_U140 : component CNN_Core_uitofp_3qcK
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp32_V_3_reg_2317,
        ce => ap_const_logic_1,
        dout => grp_fu_601_p1);

    CNN_Core_fptrunc_rcU_U141 : component CNN_Core_fptrunc_rcU
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_100_reg_2352,
        dout => res_fu_604_p1);

    CNN_Core_fpext_32sc4_U142 : component CNN_Core_fpext_32sc4
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => tmp_i_i_reg_2337,
        dout => tmp_96_fu_607_p1);

    CNN_Core_fpext_32sc4_U143 : component CNN_Core_fpext_32sc4
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => res_fu_604_p1,
        dout => d_assign_fu_610_p1);

    CNN_Core_fexp_32ntde_U144 : component CNN_Core_fexp_32ntde
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => x_assign_reg_2332,
        ce => ap_const_logic_1,
        dout => grp_fu_614_p2);

    CNN_Core_dadd_64nudo_U145 : component CNN_Core_dadd_64nudo
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_96_reg_2342,
        din1 => ap_const_lv64_3FF0000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_619_p2);

    CNN_Core_ddiv_64nvdy_U146 : component CNN_Core_ddiv_64nvdy
    generic map (
        ID => 1,
        NUM_STAGE => 15,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_3FF0000000000000,
        din1 => tmp_99_reg_2347,
        ce => ap_const_logic_1,
        dout => grp_fu_624_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond3_fu_783_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state9))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state9);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond3_fu_783_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state14) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond8_i_fu_1079_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state14))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state14);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond8_i_fu_1079_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state19) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (exitcond2_i_fu_1157_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state19)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state19);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter10 <= ap_enable_reg_pp3_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter11 <= ap_enable_reg_pp3_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter12 <= ap_enable_reg_pp3_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter13 <= ap_enable_reg_pp3_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter14 <= ap_enable_reg_pp3_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter15 <= ap_enable_reg_pp3_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter16 <= ap_enable_reg_pp3_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter17 <= ap_enable_reg_pp3_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter18 <= ap_enable_reg_pp3_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter19 <= ap_enable_reg_pp3_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter20 <= ap_enable_reg_pp3_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter21 <= ap_enable_reg_pp3_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter22 <= ap_enable_reg_pp3_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter23 <= ap_enable_reg_pp3_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter24 <= ap_enable_reg_pp3_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter25 <= ap_enable_reg_pp3_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter26 <= ap_enable_reg_pp3_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter27 <= ap_enable_reg_pp3_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter28 <= ap_enable_reg_pp3_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter29 <= ap_enable_reg_pp3_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter30 <= ap_enable_reg_pp3_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter31 <= ap_enable_reg_pp3_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter32 <= ap_enable_reg_pp3_iter31;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (exitcond2_i_fu_1157_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp3_iter32 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter8 <= ap_enable_reg_pp3_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter9 <= ap_enable_reg_pp3_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state54) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state53) and (exitcond5_fu_1745_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state54))) then 
                    ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state54);
                elsif ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state53) and (exitcond5_fu_1745_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Conv10_fu_567_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Conv10_fu_567_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond3_fu_783_p2 = ap_const_lv1_1))) then 
                    grp_Conv10_fu_567_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Conv10_fu_567_ap_ready = ap_const_logic_1)) then 
                    grp_Conv10_fu_567_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i1_reg_442_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_633_p2 = ap_const_lv1_0))) then 
                i_0_i1_reg_442 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_i1_reg_442 <= i_6_reg_1993;
            end if; 
        end if;
    end process;

    i_0_i2_reg_522_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                i_0_i2_reg_522 <= i_8_reg_2261;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i_0_i2_reg_522 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_0_i3_reg_544_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                i_0_i3_reg_544 <= i_10_reg_2401;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (exitcond2_i_fu_1157_p2 = ap_const_lv1_1))) then 
                i_0_i3_reg_544 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_0_i4_reg_500_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                i_0_i4_reg_500 <= i_11_reg_2212;
            elsif (((grp_Conv10_fu_567_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                i_0_i4_reg_500 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_476_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_0_i_reg_476 <= i_9_reg_2059;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_0_i_reg_476 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_reg_430_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state53) and (exitcond5_fu_1745_p2 = ap_const_lv1_1))) then 
                i_reg_430 <= i_7_reg_1984;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_430 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_0_i1_reg_453_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond7_fu_645_p2 = ap_const_lv1_0))) then 
                j_0_i1_reg_453 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond6_fu_669_p2 = ap_const_lv1_0))) then 
                j_0_i1_reg_453 <= j_4_fu_675_p2;
            end if; 
        end if;
    end process;

    j_0_i2_reg_533_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (exitcond2_i_fu_1157_p2 = ap_const_lv1_0))) then 
                j_0_i2_reg_533 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond_i1_fu_1181_p2 = ap_const_lv1_0))) then 
                j_0_i2_reg_533 <= j_9_fu_1187_p2;
            end if; 
        end if;
    end process;

    j_0_i3_reg_555_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state53) and (exitcond5_fu_1745_p2 = ap_const_lv1_0))) then 
                j_0_i3_reg_555 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (exitcond4_reg_2416 = ap_const_lv1_0))) then 
                j_0_i3_reg_555 <= j_6_reg_2420;
            end if; 
        end if;
    end process;

    j_0_i4_reg_511_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond8_i_fu_1079_p2 = ap_const_lv1_0))) then 
                j_0_i4_reg_511 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (exitcond_i_fu_1103_p2 = ap_const_lv1_0))) then 
                j_0_i4_reg_511 <= j_7_fu_1109_p2;
            end if; 
        end if;
    end process;

    j_0_i_reg_488_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond1_reg_2194 = ap_const_lv1_0))) then 
                j_0_i_reg_488 <= j_8_reg_2198;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond3_fu_783_p2 = ap_const_lv1_0))) then 
                j_0_i_reg_488 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_reg_464_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond7_fu_645_p2 = ap_const_lv1_1))) then 
                j_reg_464 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond8_i_fu_1079_p2 = ap_const_lv1_1))) then 
                j_reg_464 <= j_5_reg_2014;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond1_reg_2194 <= exitcond1_fu_925_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                exitcond4_reg_2416 <= exitcond4_fu_1786_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                exitcond_i1_reg_2271 <= exitcond_i1_fu_1181_p2;
                exitcond_i1_reg_2271_pp3_iter1_reg <= exitcond_i1_reg_2271;
                p_output_val_V_addr_4_reg_2280_pp3_iter1_reg <= p_output_val_V_addr_4_reg_2280;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp3_stage0_11001)) then
                exitcond_i1_reg_2271_pp3_iter10_reg <= exitcond_i1_reg_2271_pp3_iter9_reg;
                exitcond_i1_reg_2271_pp3_iter11_reg <= exitcond_i1_reg_2271_pp3_iter10_reg;
                exitcond_i1_reg_2271_pp3_iter12_reg <= exitcond_i1_reg_2271_pp3_iter11_reg;
                exitcond_i1_reg_2271_pp3_iter13_reg <= exitcond_i1_reg_2271_pp3_iter12_reg;
                exitcond_i1_reg_2271_pp3_iter14_reg <= exitcond_i1_reg_2271_pp3_iter13_reg;
                exitcond_i1_reg_2271_pp3_iter15_reg <= exitcond_i1_reg_2271_pp3_iter14_reg;
                exitcond_i1_reg_2271_pp3_iter16_reg <= exitcond_i1_reg_2271_pp3_iter15_reg;
                exitcond_i1_reg_2271_pp3_iter17_reg <= exitcond_i1_reg_2271_pp3_iter16_reg;
                exitcond_i1_reg_2271_pp3_iter18_reg <= exitcond_i1_reg_2271_pp3_iter17_reg;
                exitcond_i1_reg_2271_pp3_iter19_reg <= exitcond_i1_reg_2271_pp3_iter18_reg;
                exitcond_i1_reg_2271_pp3_iter20_reg <= exitcond_i1_reg_2271_pp3_iter19_reg;
                exitcond_i1_reg_2271_pp3_iter21_reg <= exitcond_i1_reg_2271_pp3_iter20_reg;
                exitcond_i1_reg_2271_pp3_iter22_reg <= exitcond_i1_reg_2271_pp3_iter21_reg;
                exitcond_i1_reg_2271_pp3_iter23_reg <= exitcond_i1_reg_2271_pp3_iter22_reg;
                exitcond_i1_reg_2271_pp3_iter24_reg <= exitcond_i1_reg_2271_pp3_iter23_reg;
                exitcond_i1_reg_2271_pp3_iter25_reg <= exitcond_i1_reg_2271_pp3_iter24_reg;
                exitcond_i1_reg_2271_pp3_iter26_reg <= exitcond_i1_reg_2271_pp3_iter25_reg;
                exitcond_i1_reg_2271_pp3_iter27_reg <= exitcond_i1_reg_2271_pp3_iter26_reg;
                exitcond_i1_reg_2271_pp3_iter28_reg <= exitcond_i1_reg_2271_pp3_iter27_reg;
                exitcond_i1_reg_2271_pp3_iter29_reg <= exitcond_i1_reg_2271_pp3_iter28_reg;
                exitcond_i1_reg_2271_pp3_iter2_reg <= exitcond_i1_reg_2271_pp3_iter1_reg;
                exitcond_i1_reg_2271_pp3_iter30_reg <= exitcond_i1_reg_2271_pp3_iter29_reg;
                exitcond_i1_reg_2271_pp3_iter31_reg <= exitcond_i1_reg_2271_pp3_iter30_reg;
                exitcond_i1_reg_2271_pp3_iter3_reg <= exitcond_i1_reg_2271_pp3_iter2_reg;
                exitcond_i1_reg_2271_pp3_iter4_reg <= exitcond_i1_reg_2271_pp3_iter3_reg;
                exitcond_i1_reg_2271_pp3_iter5_reg <= exitcond_i1_reg_2271_pp3_iter4_reg;
                exitcond_i1_reg_2271_pp3_iter6_reg <= exitcond_i1_reg_2271_pp3_iter5_reg;
                exitcond_i1_reg_2271_pp3_iter7_reg <= exitcond_i1_reg_2271_pp3_iter6_reg;
                exitcond_i1_reg_2271_pp3_iter8_reg <= exitcond_i1_reg_2271_pp3_iter7_reg;
                exitcond_i1_reg_2271_pp3_iter9_reg <= exitcond_i1_reg_2271_pp3_iter8_reg;
                is_neg_reg_2291_pp3_iter2_reg <= is_neg_reg_2291;
                is_neg_reg_2291_pp3_iter3_reg <= is_neg_reg_2291_pp3_iter2_reg;
                is_neg_reg_2291_pp3_iter4_reg <= is_neg_reg_2291_pp3_iter3_reg;
                msb_idx_reg_2312_pp3_iter3_reg <= msb_idx_reg_2312;
                msb_idx_reg_2312_pp3_iter4_reg <= msb_idx_reg_2312_pp3_iter3_reg;
                p_output_val_V_addr_4_reg_2280_pp3_iter10_reg <= p_output_val_V_addr_4_reg_2280_pp3_iter9_reg;
                p_output_val_V_addr_4_reg_2280_pp3_iter11_reg <= p_output_val_V_addr_4_reg_2280_pp3_iter10_reg;
                p_output_val_V_addr_4_reg_2280_pp3_iter12_reg <= p_output_val_V_addr_4_reg_2280_pp3_iter11_reg;
                p_output_val_V_addr_4_reg_2280_pp3_iter13_reg <= p_output_val_V_addr_4_reg_2280_pp3_iter12_reg;
                p_output_val_V_addr_4_reg_2280_pp3_iter14_reg <= p_output_val_V_addr_4_reg_2280_pp3_iter13_reg;
                p_output_val_V_addr_4_reg_2280_pp3_iter15_reg <= p_output_val_V_addr_4_reg_2280_pp3_iter14_reg;
                p_output_val_V_addr_4_reg_2280_pp3_iter16_reg <= p_output_val_V_addr_4_reg_2280_pp3_iter15_reg;
                p_output_val_V_addr_4_reg_2280_pp3_iter17_reg <= p_output_val_V_addr_4_reg_2280_pp3_iter16_reg;
                p_output_val_V_addr_4_reg_2280_pp3_iter18_reg <= p_output_val_V_addr_4_reg_2280_pp3_iter17_reg;
                p_output_val_V_addr_4_reg_2280_pp3_iter19_reg <= p_output_val_V_addr_4_reg_2280_pp3_iter18_reg;
                p_output_val_V_addr_4_reg_2280_pp3_iter20_reg <= p_output_val_V_addr_4_reg_2280_pp3_iter19_reg;
                p_output_val_V_addr_4_reg_2280_pp3_iter21_reg <= p_output_val_V_addr_4_reg_2280_pp3_iter20_reg;
                p_output_val_V_addr_4_reg_2280_pp3_iter22_reg <= p_output_val_V_addr_4_reg_2280_pp3_iter21_reg;
                p_output_val_V_addr_4_reg_2280_pp3_iter23_reg <= p_output_val_V_addr_4_reg_2280_pp3_iter22_reg;
                p_output_val_V_addr_4_reg_2280_pp3_iter24_reg <= p_output_val_V_addr_4_reg_2280_pp3_iter23_reg;
                p_output_val_V_addr_4_reg_2280_pp3_iter25_reg <= p_output_val_V_addr_4_reg_2280_pp3_iter24_reg;
                p_output_val_V_addr_4_reg_2280_pp3_iter26_reg <= p_output_val_V_addr_4_reg_2280_pp3_iter25_reg;
                p_output_val_V_addr_4_reg_2280_pp3_iter27_reg <= p_output_val_V_addr_4_reg_2280_pp3_iter26_reg;
                p_output_val_V_addr_4_reg_2280_pp3_iter28_reg <= p_output_val_V_addr_4_reg_2280_pp3_iter27_reg;
                p_output_val_V_addr_4_reg_2280_pp3_iter29_reg <= p_output_val_V_addr_4_reg_2280_pp3_iter28_reg;
                p_output_val_V_addr_4_reg_2280_pp3_iter2_reg <= p_output_val_V_addr_4_reg_2280_pp3_iter1_reg;
                p_output_val_V_addr_4_reg_2280_pp3_iter30_reg <= p_output_val_V_addr_4_reg_2280_pp3_iter29_reg;
                p_output_val_V_addr_4_reg_2280_pp3_iter31_reg <= p_output_val_V_addr_4_reg_2280_pp3_iter30_reg;
                p_output_val_V_addr_4_reg_2280_pp3_iter3_reg <= p_output_val_V_addr_4_reg_2280_pp3_iter2_reg;
                p_output_val_V_addr_4_reg_2280_pp3_iter4_reg <= p_output_val_V_addr_4_reg_2280_pp3_iter3_reg;
                p_output_val_V_addr_4_reg_2280_pp3_iter5_reg <= p_output_val_V_addr_4_reg_2280_pp3_iter4_reg;
                p_output_val_V_addr_4_reg_2280_pp3_iter6_reg <= p_output_val_V_addr_4_reg_2280_pp3_iter5_reg;
                p_output_val_V_addr_4_reg_2280_pp3_iter7_reg <= p_output_val_V_addr_4_reg_2280_pp3_iter6_reg;
                p_output_val_V_addr_4_reg_2280_pp3_iter8_reg <= p_output_val_V_addr_4_reg_2280_pp3_iter7_reg;
                p_output_val_V_addr_4_reg_2280_pp3_iter9_reg <= p_output_val_V_addr_4_reg_2280_pp3_iter8_reg;
                tmp_82_reg_2286_pp3_iter2_reg <= tmp_82_reg_2286;
                tmp_82_reg_2286_pp3_iter3_reg <= tmp_82_reg_2286_pp3_iter2_reg;
                tmp_82_reg_2286_pp3_iter4_reg <= tmp_82_reg_2286_pp3_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                exitcond_i_reg_2222 <= exitcond_i_fu_1103_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                i_10_reg_2401 <= i_10_fu_1751_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                i_11_reg_2212 <= i_11_fu_1085_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_6_reg_1993 <= i_6_fu_651_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_7_reg_1984 <= i_7_fu_639_p2;
                    i_cast_reg_1976(3 downto 0) <= i_cast_fu_629_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                i_8_reg_2261 <= i_8_fu_1163_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_9_reg_2059 <= i_9_fu_788_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond_i1_reg_2271 = ap_const_lv1_0))) then
                is_neg_reg_2291 <= p_Val2_30_fu_1211_p2(32 downto 32);
                num_zeros_reg_2307 <= num_zeros_fu_1279_p1;
                    p_Val2_32_cast_reg_2301(31 downto 0) <= p_Val2_32_cast_fu_1249_p1(31 downto 0);
                p_Val2_43_reg_2296 <= p_Val2_43_fu_1241_p3;
                tmp_82_reg_2286 <= tmp_82_fu_1221_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (exitcond_i1_reg_2271_pp3_iter30_reg = ap_const_lv1_0))) then
                isneg_reg_2357 <= ireg_V_fu_1478_p1(63 downto 63);
                tmp_103_reg_2368 <= tmp_103_fu_1512_p2;
                tmp_104_reg_2374 <= tmp_104_fu_1524_p2;
                tmp_105_reg_2381 <= tmp_105_fu_1530_p2;
                tmp_106_reg_2386 <= tmp_106_fu_1536_p2;
                tmp_107_reg_2391 <= tmp_107_fu_1542_p2;
                tmp_176_reg_2363 <= tmp_176_fu_1508_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_5_reg_2014 <= j_5_fu_701_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                j_6_reg_2420 <= j_6_fu_1792_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                j_8_reg_2198 <= j_8_fu_930_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (tmp_82_reg_2286 = ap_const_lv1_0) and (exitcond_i1_reg_2271_pp3_iter1_reg = ap_const_lv1_0))) then
                msb_idx_reg_2312 <= msb_idx_fu_1283_p2;
                tmp32_V_3_reg_2317 <= tmp32_V_3_fu_1399_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (tmp_82_reg_2286_pp3_iter3_reg = ap_const_lv1_0) and (exitcond_i1_reg_2271_pp3_iter3_reg = ap_const_lv1_0))) then
                p_Result_s_203_reg_2327 <= tmp32_V_11_fu_1407_p1(30 downto 23);
                tmp32_V_11_reg_2322 <= tmp32_V_11_fu_1407_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                p_kernel_cols_reg_2050 <= convlayer2_k_cols_q0;
                p_kernel_rows_reg_2045 <= convlayer2_k_rows_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((j_0_i_reg_488 = ap_const_lv3_0) and (i_0_i_reg_476 = ap_const_lv3_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                p_kernel_val_V_0_0_s_fu_178 <= p_kernel_val_4_V_0_s_fu_950_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((j_0_i_reg_488 = ap_const_lv3_1) and (i_0_i_reg_476 = ap_const_lv3_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                p_kernel_val_V_0_1_s_fu_182 <= p_kernel_val_4_V_0_s_fu_950_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((j_0_i_reg_488 = ap_const_lv3_2) and (i_0_i_reg_476 = ap_const_lv3_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                p_kernel_val_V_0_2_s_fu_186 <= p_kernel_val_4_V_0_s_fu_950_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((j_0_i_reg_488 = ap_const_lv3_3) and (i_0_i_reg_476 = ap_const_lv3_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                p_kernel_val_V_0_3_s_fu_190 <= p_kernel_val_4_V_0_s_fu_950_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((j_0_i_reg_488 = ap_const_lv3_3)) and not((j_0_i_reg_488 = ap_const_lv3_2)) and not((j_0_i_reg_488 = ap_const_lv3_1)) and not((j_0_i_reg_488 = ap_const_lv3_0)) and (i_0_i_reg_476 = ap_const_lv3_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                p_kernel_val_V_0_4_s_fu_194 <= p_kernel_val_4_V_0_s_fu_950_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((j_0_i_reg_488 = ap_const_lv3_0) and (i_0_i_reg_476 = ap_const_lv3_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                p_kernel_val_V_1_0_s_fu_198 <= p_kernel_val_4_V_0_s_fu_950_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((j_0_i_reg_488 = ap_const_lv3_1) and (i_0_i_reg_476 = ap_const_lv3_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                p_kernel_val_V_1_1_s_fu_202 <= p_kernel_val_4_V_0_s_fu_950_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((j_0_i_reg_488 = ap_const_lv3_2) and (i_0_i_reg_476 = ap_const_lv3_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                p_kernel_val_V_1_2_s_fu_206 <= p_kernel_val_4_V_0_s_fu_950_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((j_0_i_reg_488 = ap_const_lv3_3) and (i_0_i_reg_476 = ap_const_lv3_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                p_kernel_val_V_1_3_s_fu_210 <= p_kernel_val_4_V_0_s_fu_950_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((j_0_i_reg_488 = ap_const_lv3_3)) and not((j_0_i_reg_488 = ap_const_lv3_2)) and not((j_0_i_reg_488 = ap_const_lv3_1)) and not((j_0_i_reg_488 = ap_const_lv3_0)) and (i_0_i_reg_476 = ap_const_lv3_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                p_kernel_val_V_1_4_s_fu_214 <= p_kernel_val_4_V_0_s_fu_950_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((j_0_i_reg_488 = ap_const_lv3_0) and (i_0_i_reg_476 = ap_const_lv3_2) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                p_kernel_val_V_2_0_s_fu_218 <= p_kernel_val_4_V_0_s_fu_950_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((j_0_i_reg_488 = ap_const_lv3_1) and (i_0_i_reg_476 = ap_const_lv3_2) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                p_kernel_val_V_2_1_s_fu_222 <= p_kernel_val_4_V_0_s_fu_950_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((j_0_i_reg_488 = ap_const_lv3_2) and (i_0_i_reg_476 = ap_const_lv3_2) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                p_kernel_val_V_2_2_s_fu_226 <= p_kernel_val_4_V_0_s_fu_950_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((j_0_i_reg_488 = ap_const_lv3_3) and (i_0_i_reg_476 = ap_const_lv3_2) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                p_kernel_val_V_2_3_s_fu_230 <= p_kernel_val_4_V_0_s_fu_950_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((j_0_i_reg_488 = ap_const_lv3_3)) and not((j_0_i_reg_488 = ap_const_lv3_2)) and not((j_0_i_reg_488 = ap_const_lv3_1)) and not((j_0_i_reg_488 = ap_const_lv3_0)) and (i_0_i_reg_476 = ap_const_lv3_2) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                p_kernel_val_V_2_4_s_fu_234 <= p_kernel_val_4_V_0_s_fu_950_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((j_0_i_reg_488 = ap_const_lv3_0) and (i_0_i_reg_476 = ap_const_lv3_3) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                p_kernel_val_V_3_0_s_fu_238 <= p_kernel_val_4_V_0_s_fu_950_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((j_0_i_reg_488 = ap_const_lv3_1) and (i_0_i_reg_476 = ap_const_lv3_3) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                p_kernel_val_V_3_1_s_fu_242 <= p_kernel_val_4_V_0_s_fu_950_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((j_0_i_reg_488 = ap_const_lv3_2) and (i_0_i_reg_476 = ap_const_lv3_3) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                p_kernel_val_V_3_2_s_fu_246 <= p_kernel_val_4_V_0_s_fu_950_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((j_0_i_reg_488 = ap_const_lv3_3) and (i_0_i_reg_476 = ap_const_lv3_3) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                p_kernel_val_V_3_3_s_fu_250 <= p_kernel_val_4_V_0_s_fu_950_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((j_0_i_reg_488 = ap_const_lv3_3)) and not((j_0_i_reg_488 = ap_const_lv3_2)) and not((j_0_i_reg_488 = ap_const_lv3_1)) and not((j_0_i_reg_488 = ap_const_lv3_0)) and (i_0_i_reg_476 = ap_const_lv3_3) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                p_kernel_val_V_3_4_s_fu_254 <= p_kernel_val_4_V_0_s_fu_950_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((i_0_i_reg_476 = ap_const_lv3_3)) and not((i_0_i_reg_476 = ap_const_lv3_2)) and not((i_0_i_reg_476 = ap_const_lv3_1)) and not((i_0_i_reg_476 = ap_const_lv3_0)) and (j_0_i_reg_488 = ap_const_lv3_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                p_kernel_val_V_4_0_s_fu_258 <= p_kernel_val_4_V_0_s_fu_950_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((i_0_i_reg_476 = ap_const_lv3_3)) and not((i_0_i_reg_476 = ap_const_lv3_2)) and not((i_0_i_reg_476 = ap_const_lv3_1)) and not((i_0_i_reg_476 = ap_const_lv3_0)) and (j_0_i_reg_488 = ap_const_lv3_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                p_kernel_val_V_4_1_s_fu_262 <= p_kernel_val_4_V_0_s_fu_950_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((i_0_i_reg_476 = ap_const_lv3_3)) and not((i_0_i_reg_476 = ap_const_lv3_2)) and not((i_0_i_reg_476 = ap_const_lv3_1)) and not((i_0_i_reg_476 = ap_const_lv3_0)) and (j_0_i_reg_488 = ap_const_lv3_2) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                p_kernel_val_V_4_2_s_fu_266 <= p_kernel_val_4_V_0_s_fu_950_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((i_0_i_reg_476 = ap_const_lv3_3)) and not((i_0_i_reg_476 = ap_const_lv3_2)) and not((i_0_i_reg_476 = ap_const_lv3_1)) and not((i_0_i_reg_476 = ap_const_lv3_0)) and (j_0_i_reg_488 = ap_const_lv3_3) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                p_kernel_val_V_4_3_s_fu_270 <= p_kernel_val_4_V_0_s_fu_950_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((i_0_i_reg_476 = ap_const_lv3_3)) and not((i_0_i_reg_476 = ap_const_lv3_2)) and not((i_0_i_reg_476 = ap_const_lv3_1)) and not((j_0_i_reg_488 = ap_const_lv3_3)) and not((j_0_i_reg_488 = ap_const_lv3_2)) and not((j_0_i_reg_488 = ap_const_lv3_1)) and not((j_0_i_reg_488 = ap_const_lv3_0)) and not((i_0_i_reg_476 = ap_const_lv3_0)) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                p_kernel_val_V_4_4_s_fu_274 <= p_kernel_val_4_V_0_s_fu_950_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond_i1_fu_1181_p2 = ap_const_lv1_0))) then
                p_output_val_V_addr_4_reg_2280 <= tmp_155_cast_fu_1202_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (exitcond_i_fu_1103_p2 = ap_const_lv1_0))) then
                p_output_val_V_addr_6_reg_2236 <= tmp_161_cast_fu_1124_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (exitcond_i1_reg_2271_pp3_iter29_reg = ap_const_lv1_0))) then
                tmp_100_reg_2352 <= grp_fu_624_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_695_p2 = ap_const_lv1_0))) then
                tmp_137_reg_2019 <= tmp_137_fu_772_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond7_fu_645_p2 = ap_const_lv1_0))) then
                    tmp_138_cast_reg_1998(6 downto 3) <= tmp_138_cast_fu_665_p1(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                    tmp_140_cast_reg_2242(6 downto 3) <= tmp_140_cast_fu_1145_p1(6 downto 3);
                tmp_65_reg_2252 <= tmp_65_fu_1153_p1;
                tmp_71_reg_2247 <= tmp_71_fu_1149_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond3_fu_783_p2 = ap_const_lv1_0))) then
                tmp_141_reg_2064 <= tmp_141_fu_819_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (exitcond2_i_fu_1157_p2 = ap_const_lv1_0))) then
                    tmp_146_cast_reg_2266(6 downto 3) <= tmp_146_cast_fu_1177_p1(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state53) and (exitcond5_fu_1745_p2 = ap_const_lv1_0))) then
                    tmp_152_cast_reg_2406(10 downto 3) <= tmp_152_cast_fu_1766_p3(10 downto 3);
                    tmp_154_cast_reg_2411(6 downto 3) <= tmp_154_cast_fu_1782_p1(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond8_i_fu_1079_p2 = ap_const_lv1_0))) then
                    tmp_157_cast_reg_2217(6 downto 3) <= tmp_157_cast_fu_1099_p1(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_695_p2 = ap_const_lv1_1))) then
                    tmp_70_reg_2034(3 downto 0) <= tmp_70_fu_778_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (exitcond_i1_reg_2271_pp3_iter10_reg = ap_const_lv1_0))) then
                tmp_96_reg_2342 <= tmp_96_fu_607_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (exitcond_i1_reg_2271_pp3_iter14_reg = ap_const_lv1_0))) then
                tmp_99_reg_2347 <= grp_fu_619_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (exitcond_i1_reg_2271_pp3_iter9_reg = ap_const_lv1_0))) then
                tmp_i_i_reg_2337 <= grp_fu_614_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (exitcond_i1_reg_2271_pp3_iter4_reg = ap_const_lv1_0))) then
                x_assign_reg_2332 <= x_assign_fu_1471_p3;
            end if;
        end if;
    end process;
    i_cast_reg_1976(7 downto 4) <= "0000";
    tmp_138_cast_reg_1998(2 downto 0) <= "000";
    tmp_138_cast_reg_1998(7) <= '0';
    tmp_70_reg_2034(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_157_cast_reg_2217(2 downto 0) <= "000";
    tmp_157_cast_reg_2217(7) <= '0';
    tmp_140_cast_reg_2242(2 downto 0) <= "000";
    tmp_140_cast_reg_2242(7) <= '0';
    tmp_146_cast_reg_2266(2 downto 0) <= "000";
    tmp_146_cast_reg_2266(7) <= '0';
    p_Val2_32_cast_reg_2301(32) <= '0';
    tmp_152_cast_reg_2406(2 downto 0) <= "000";
    tmp_154_cast_reg_2411(2 downto 0) <= "000";
    tmp_154_cast_reg_2411(7) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond7_fu_645_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, exitcond_fu_695_p2, exitcond3_fu_783_p2, ap_CS_fsm_state8, exitcond1_fu_925_p2, ap_enable_reg_pp1_iter0, exitcond8_i_fu_1079_p2, ap_CS_fsm_state13, exitcond_i_fu_1103_p2, ap_enable_reg_pp2_iter0, exitcond2_i_fu_1157_p2, ap_CS_fsm_state18, exitcond_i1_fu_1181_p2, ap_enable_reg_pp3_iter0, exitcond5_fu_1745_p2, ap_CS_fsm_state53, exitcond4_fu_1786_p2, ap_enable_reg_pp4_iter0, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter31, ap_enable_reg_pp3_iter32, ap_block_pp4_stage0_subdone, grp_Conv10_fu_567_ap_done, exitcond2_fu_633_p2, exitcond6_fu_669_p2, ap_CS_fsm_state12)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_633_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond7_fu_645_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond6_fu_669_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_695_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond3_fu_783_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond1_fu_925_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond1_fu_925_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state12 => 
                if (((grp_Conv10_fu_567_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond8_i_fu_1079_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (exitcond_i_fu_1103_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (exitcond_i_fu_1103_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (exitcond2_i_fu_1157_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_i1_fu_1181_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp3_iter31 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter32 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter31 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter32 = ap_const_logic_1)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_i1_fu_1181_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state53 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state53) and (exitcond5_fu_1745_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_pp4_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (exitcond4_fu_1786_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (exitcond4_fu_1786_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_fu_1518_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(tmp_101_fu_1504_p1));
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(16);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(19);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state13 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state52 <= ap_CS_fsm(17);
    ap_CS_fsm_state53 <= ap_CS_fsm(18);
    ap_CS_fsm_state56 <= ap_CS_fsm(20);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp3_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp3_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp3_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp3_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp3_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp3_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp3_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp3_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp3_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp3_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp3_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp3_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp3_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp3_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp3_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp3_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp3_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp3_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp3_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp3_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp3_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp3_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp3_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp3_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp3_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp3_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp3_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp3_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp3_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp3_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state9_assign_proc : process(exitcond1_fu_925_p2)
    begin
        if ((exitcond1_fu_925_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state14_assign_proc : process(exitcond_i_fu_1103_p2)
    begin
        if ((exitcond_i_fu_1103_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state14 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state19_assign_proc : process(exitcond_i1_fu_1181_p2)
    begin
        if ((exitcond_i1_fu_1181_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state19 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state54_assign_proc : process(exitcond4_fu_1786_p2)
    begin
        if ((exitcond4_fu_1786_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state54 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state54 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond2_fu_633_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_633_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter3, ap_enable_reg_pp3_iter4, ap_enable_reg_pp3_iter5, ap_enable_reg_pp3_iter6, ap_enable_reg_pp3_iter7, ap_enable_reg_pp3_iter8, ap_enable_reg_pp3_iter9, ap_enable_reg_pp3_iter10, ap_enable_reg_pp3_iter11, ap_enable_reg_pp3_iter12, ap_enable_reg_pp3_iter13, ap_enable_reg_pp3_iter14, ap_enable_reg_pp3_iter15, ap_enable_reg_pp3_iter16, ap_enable_reg_pp3_iter17, ap_enable_reg_pp3_iter18, ap_enable_reg_pp3_iter19, ap_enable_reg_pp3_iter20, ap_enable_reg_pp3_iter21, ap_enable_reg_pp3_iter22, ap_enable_reg_pp3_iter23, ap_enable_reg_pp3_iter24, ap_enable_reg_pp3_iter25, ap_enable_reg_pp3_iter26, ap_enable_reg_pp3_iter27, ap_enable_reg_pp3_iter28, ap_enable_reg_pp3_iter29, ap_enable_reg_pp3_iter30, ap_enable_reg_pp3_iter31, ap_enable_reg_pp3_iter32)
    begin
        if (((ap_enable_reg_pp3_iter32 = ap_const_logic_0) and (ap_enable_reg_pp3_iter31 = ap_const_logic_0) and (ap_enable_reg_pp3_iter30 = ap_const_logic_0) and (ap_enable_reg_pp3_iter29 = ap_const_logic_0) and (ap_enable_reg_pp3_iter28 = ap_const_logic_0) and (ap_enable_reg_pp3_iter27 = ap_const_logic_0) and (ap_enable_reg_pp3_iter26 = ap_const_logic_0) and (ap_enable_reg_pp3_iter25 = ap_const_logic_0) and (ap_enable_reg_pp3_iter24 = ap_const_logic_0) and (ap_enable_reg_pp3_iter23 = ap_const_logic_0) and (ap_enable_reg_pp3_iter22 = ap_const_logic_0) and (ap_enable_reg_pp3_iter21 = ap_const_logic_0) and (ap_enable_reg_pp3_iter20 = ap_const_logic_0) and (ap_enable_reg_pp3_iter19 = ap_const_logic_0) and (ap_enable_reg_pp3_iter18 = ap_const_logic_0) and (ap_enable_reg_pp3_iter17 = ap_const_logic_0) and (ap_enable_reg_pp3_iter16 = ap_const_logic_0) and (ap_enable_reg_pp3_iter15 = ap_const_logic_0) and (ap_enable_reg_pp3_iter14 = ap_const_logic_0) and (ap_enable_reg_pp3_iter13 = ap_const_logic_0) and (ap_enable_reg_pp3_iter12 = ap_const_logic_0) and (ap_enable_reg_pp3_iter11 = ap_const_logic_0) and (ap_enable_reg_pp3_iter10 = ap_const_logic_0) and (ap_enable_reg_pp3_iter9 = ap_const_logic_0) and (ap_enable_reg_pp3_iter8 = ap_const_logic_0) and (ap_enable_reg_pp3_iter7 = ap_const_logic_0) and (ap_enable_reg_pp3_iter6 = ap_const_logic_0) and (ap_enable_reg_pp3_iter5 = ap_const_logic_0) and (ap_enable_reg_pp3_iter4 = ap_const_logic_0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_0_i3_phi_fu_559_p4_assign_proc : process(j_0_i3_reg_555, exitcond4_reg_2416, ap_CS_fsm_pp4_stage0, j_6_reg_2420, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (exitcond4_reg_2416 = ap_const_lv1_0))) then 
            ap_phi_mux_j_0_i3_phi_fu_559_p4 <= j_6_reg_2420;
        else 
            ap_phi_mux_j_0_i3_phi_fu_559_p4 <= j_0_i3_reg_555;
        end if; 
    end process;


    ap_phi_mux_j_0_i_phi_fu_492_p4_assign_proc : process(j_0_i_reg_488, exitcond1_reg_2194, ap_CS_fsm_pp1_stage0, j_8_reg_2198, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond1_reg_2194 = ap_const_lv1_0))) then 
            ap_phi_mux_j_0_i_phi_fu_492_p4 <= j_8_reg_2198;
        else 
            ap_phi_mux_j_0_i_phi_fu_492_p4 <= j_0_i_reg_488;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond2_fu_633_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_633_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    convlayer2_b_V_address0 <= tmp_70_fu_778_p1(4 - 1 downto 0);

    convlayer2_b_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            convlayer2_b_V_ce0 <= ap_const_logic_1;
        else 
            convlayer2_b_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    convlayer2_k_cols_address0 <= tmp_74_fu_746_p1(7 - 1 downto 0);

    convlayer2_k_cols_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            convlayer2_k_cols_ce0 <= ap_const_logic_1;
        else 
            convlayer2_k_cols_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    convlayer2_k_rows_address0 <= tmp_74_fu_746_p1(7 - 1 downto 0);

    convlayer2_k_rows_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            convlayer2_k_rows_ce0 <= ap_const_logic_1;
        else 
            convlayer2_k_rows_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    convlayer2_k_val_V_address0 <= tmp_158_cast_fu_945_p1(11 - 1 downto 0);

    convlayer2_k_val_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            convlayer2_k_val_V_ce0 <= ap_const_logic_1;
        else 
            convlayer2_k_val_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    convlayer_output_cols_address0 <= tmp_70_reg_2034(4 - 1 downto 0);

    convlayer_output_cols_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            convlayer_output_cols_ce0 <= ap_const_logic_1;
        else 
            convlayer_output_cols_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    convlayer_output_cols_d0 <= ap_const_lv5_8;

    convlayer_output_cols_we0_assign_proc : process(exitcond2_i_fu_1157_p2, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) and (exitcond2_i_fu_1157_p2 = ap_const_lv1_1))) then 
            convlayer_output_cols_we0 <= ap_const_logic_1;
        else 
            convlayer_output_cols_we0 <= ap_const_logic_0;
        end if; 
    end process;

    convlayer_output_rows_address0 <= tmp_70_reg_2034(4 - 1 downto 0);

    convlayer_output_rows_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            convlayer_output_rows_ce0 <= ap_const_logic_1;
        else 
            convlayer_output_rows_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    convlayer_output_rows_d0 <= ap_const_lv5_8;

    convlayer_output_rows_we0_assign_proc : process(exitcond2_i_fu_1157_p2, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) and (exitcond2_i_fu_1157_p2 = ap_const_lv1_1))) then 
            convlayer_output_rows_we0 <= ap_const_logic_1;
        else 
            convlayer_output_rows_we0 <= ap_const_logic_0;
        end if; 
    end process;

    convlayer_output_val_V_address0 <= tmp_159_cast_fu_1821_p1(10 - 1 downto 0);

    convlayer_output_val_V_ce0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            convlayer_output_val_V_ce0 <= ap_const_logic_1;
        else 
            convlayer_output_val_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    convlayer_output_val_V_d0 <= p_output_val_V_q1;

    convlayer_output_val_V_we0_assign_proc : process(exitcond4_reg_2416, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (exitcond4_reg_2416 = ap_const_lv1_0))) then 
            convlayer_output_val_V_we0 <= ap_const_logic_1;
        else 
            convlayer_output_val_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_925_p2 <= "1" when (ap_phi_mux_j_0_i_phi_fu_492_p4 = p_kernel_cols_reg_2050) else "0";
    exitcond2_fu_633_p2 <= "1" when (i_reg_430 = ap_const_lv4_C) else "0";
    exitcond2_i_fu_1157_p2 <= "1" when (i_0_i2_reg_522 = ap_const_lv4_8) else "0";
    exitcond3_fu_783_p2 <= "1" when (i_0_i_reg_476 = p_kernel_rows_reg_2045) else "0";
    exitcond4_fu_1786_p2 <= "1" when (ap_phi_mux_j_0_i3_phi_fu_559_p4 = ap_const_lv4_8) else "0";
    exitcond5_fu_1745_p2 <= "1" when (i_0_i3_reg_544 = ap_const_lv4_8) else "0";
    exitcond6_fu_669_p2 <= "1" when (j_0_i1_reg_453 = ap_const_lv4_8) else "0";
    exitcond7_fu_645_p2 <= "1" when (i_0_i1_reg_442 = ap_const_lv4_8) else "0";
    exitcond8_i_fu_1079_p2 <= "1" when (i_0_i4_reg_500 = ap_const_lv4_8) else "0";
    exitcond_fu_695_p2 <= "1" when (j_reg_464 = ap_const_lv3_6) else "0";
    exitcond_i1_fu_1181_p2 <= "1" when (j_0_i2_reg_533 = ap_const_lv4_8) else "0";
    exitcond_i_fu_1103_p2 <= "1" when (j_0_i4_reg_511 = ap_const_lv4_8) else "0";
    exp_tmp_V_fu_1494_p4 <= ireg_V_fu_1478_p1(62 downto 52);
    grp_Conv10_fu_567_ap_start <= grp_Conv10_fu_567_ap_start_reg;
    i_10_fu_1751_p2 <= std_logic_vector(unsigned(i_0_i3_reg_544) + unsigned(ap_const_lv4_1));
    i_11_fu_1085_p2 <= std_logic_vector(unsigned(i_0_i4_reg_500) + unsigned(ap_const_lv4_1));
    i_6_fu_651_p2 <= std_logic_vector(unsigned(i_0_i1_reg_442) + unsigned(ap_const_lv4_1));
    i_7_fu_639_p2 <= std_logic_vector(unsigned(i_reg_430) + unsigned(ap_const_lv4_1));
    i_8_fu_1163_p2 <= std_logic_vector(unsigned(i_0_i2_reg_522) + unsigned(ap_const_lv4_1));
    i_9_fu_788_p2 <= std_logic_vector(unsigned(i_0_i_reg_476) + unsigned(ap_const_lv3_1));
    i_cast_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_430),8));
    icmp1_fu_1601_p2 <= "1" when (tmp_178_fu_1591_p4 = ap_const_lv7_0) else "0";
    icmp_fu_1318_p2 <= "1" when (tmp_162_fu_1308_p4 = ap_const_lv26_0) else "0";
    input_val_V_address0 <= grp_Conv10_fu_567_src_val_V_address0;
    input_val_V_ce0 <= grp_Conv10_fu_567_src_val_V_ce0;
    ireg_V_fu_1478_p1 <= d_assign_fu_610_p1;
    is_neg_fu_1227_p3 <= p_Val2_30_fu_1211_p2(32 downto 32);
    j_4_fu_675_p2 <= std_logic_vector(unsigned(j_0_i1_reg_453) + unsigned(ap_const_lv4_1));
    j_5_fu_701_p2 <= std_logic_vector(unsigned(j_reg_464) + unsigned(ap_const_lv3_1));
    j_6_fu_1792_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_0_i3_phi_fu_559_p4) + unsigned(ap_const_lv4_1));
    j_7_fu_1109_p2 <= std_logic_vector(unsigned(j_0_i4_reg_511) + unsigned(ap_const_lv4_1));
    j_8_fu_930_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_0_i_phi_fu_492_p4) + unsigned(ap_const_lv3_1));
    j_9_fu_1187_p2 <= std_logic_vector(unsigned(j_0_i2_reg_533) + unsigned(ap_const_lv4_1));
    man_V_1_fu_1559_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_7_fu_1555_p1));
    man_V_2_fu_1565_p3 <= 
        man_V_1_fu_1559_p2 when (isneg_reg_2357(0) = '1') else 
        p_Result_7_fu_1555_p1;
    msb_idx_1_fu_1300_p3 <= 
        ap_const_lv31_0 when (tmp_157_fu_1292_p3(0) = '1') else 
        tmp_155_fu_1288_p1;
    msb_idx_fu_1283_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(num_zeros_reg_2307));
    newSel1_fu_1708_p3 <= 
        tmp_179_fu_1617_p1 when (sel_tmp8_fu_1659_p2(0) = '1') else 
        tmp_177_fu_1581_p1;
    newSel2_fu_1722_p3 <= 
        newSel_fu_1694_p3 when (or_cond_fu_1702_p2(0) = '1') else 
        newSel1_fu_1708_p3;
    newSel3_fu_1736_p3 <= 
        newSel2_fu_1722_p3 when (or_cond2_fu_1730_p2(0) = '1') else 
        ap_const_lv32_0;
    newSel_fu_1694_p3 <= 
        tmp_114_fu_1628_p2 when (sel_tmp5_fu_1688_p2(0) = '1') else 
        this_assign_fu_1621_p3;
    num_zeros_fu_1279_p1 <= tmp_83_fu_1271_p3(32 - 1 downto 0);
    or_cond1_fu_1716_p2 <= (sel_tmp8_fu_1659_p2 or sel_tmp2_fu_1639_p2);
    or_cond2_fu_1730_p2 <= (or_cond_fu_1702_p2 or or_cond1_fu_1716_p2);
    or_cond_fu_1702_p2 <= (sel_tmp5_fu_1688_p2 or sel_tmp3_fu_1671_p2);
    p_Repl2_1_trunc_fu_1437_p2 <= std_logic_vector(unsigned(tmp_173_fu_1426_p1) + unsigned(tmp24_cast_cast_fu_1429_p3));
    p_Result_5_fu_1263_p3 <= (ap_const_lv31_7FFFFFFF & p_Result_s_fu_1253_p4);
    p_Result_6_fu_1450_p5 <= (tmp_95_fu_1443_p3 & tmp32_V_11_reg_2322(22 downto 0));
    p_Result_7_fu_1555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_102_fu_1548_p3),54));
    p_Result_7_op_fu_1461_p2 <= (p_Result_6_fu_1450_p5 xor ap_const_lv32_80000000);
    
    p_Result_s_fu_1253_p4_proc : process(p_Val2_32_cast_fu_1249_p1)
    variable vlo_cpy : STD_LOGIC_VECTOR(33+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(33+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable p_Result_s_fu_1253_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(33 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_20(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := p_Val2_32_cast_fu_1249_p1;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(33-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(33-1-unsigned(ap_const_lv32_20(6-1 downto 0)));
            for p_Result_s_fu_1253_p4_i in 0 to 33-1 loop
                v0_cpy(p_Result_s_fu_1253_p4_i) := p_Val2_32_cast_fu_1249_p1(33-1-p_Result_s_fu_1253_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(33-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_1253_p4 <= resvalue(33-1 downto 0);
    end process;

    p_Val2_30_cast_fu_1216_p1 <= p_output_val_V_q1;
    p_Val2_30_cast_fu_1216_p2 <= std_logic_vector(signed(tmp_65_reg_2252) + signed(p_Val2_30_cast_fu_1216_p1));
    p_Val2_30_fu_1211_p2 <= std_logic_vector(signed(tmp_71_reg_2247) + signed(tmp_81_fu_1207_p1));
    p_Val2_32_cast_fu_1249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_43_fu_1241_p3),33));
    p_Val2_43_fu_1241_p3 <= 
        tmp_136_cast_fu_1235_p2 when (is_neg_fu_1227_p3(0) = '1') else 
        p_Val2_30_cast_fu_1216_p2;
        p_kernel_val_4_V_0_s_fu_950_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(convlayer2_k_val_V_q0),32));


    p_output_val_V_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, p_output_val_V_addr_4_reg_2280_pp3_iter31_reg, ap_enable_reg_pp3_iter32, tmp_144_cast_fu_690_p1, tmp_161_cast_fu_1124_p1, ap_block_pp2_stage0, ap_block_pp3_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter32 = ap_const_logic_1))) then 
            p_output_val_V_address0 <= p_output_val_V_addr_4_reg_2280_pp3_iter31_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            p_output_val_V_address0 <= tmp_161_cast_fu_1124_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_output_val_V_address0 <= tmp_144_cast_fu_690_p1(6 - 1 downto 0);
        else 
            p_output_val_V_address0 <= "XXXXXX";
        end if; 
    end process;


    p_output_val_V_address1_assign_proc : process(ap_CS_fsm_pp2_stage0, p_output_val_V_addr_6_reg_2236, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_enable_reg_pp2_iter1, ap_block_pp4_stage0, ap_block_pp2_stage0, tmp_155_cast_fu_1202_p1, ap_block_pp3_stage0, tmp_160_cast_fu_1807_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            p_output_val_V_address1 <= tmp_160_cast_fu_1807_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            p_output_val_V_address1 <= tmp_155_cast_fu_1202_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            p_output_val_V_address1 <= p_output_val_V_addr_6_reg_2236;
        else 
            p_output_val_V_address1 <= "XXXXXX";
        end if; 
    end process;


    p_output_val_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter32 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            p_output_val_V_ce0 <= ap_const_logic_1;
        else 
            p_output_val_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_output_val_V_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter0, ap_enable_reg_pp2_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            p_output_val_V_ce1 <= ap_const_logic_1;
        else 
            p_output_val_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_output_val_V_d0_assign_proc : process(ap_CS_fsm_state4, ap_enable_reg_pp3_iter32, ap_block_pp3_stage0, newSel3_fu_1736_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter32 = ap_const_logic_1))) then 
            p_output_val_V_d0 <= newSel3_fu_1736_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_output_val_V_d0 <= ap_const_lv32_0;
        else 
            p_output_val_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    p_output_val_V_d1 <= std_logic_vector(unsigned(p_temp_val_V_q0) + unsigned(p_output_val_V_q0));

    p_output_val_V_we0_assign_proc : process(ap_CS_fsm_state4, ap_block_pp3_stage0_11001, exitcond_i1_reg_2271_pp3_iter31_reg, ap_enable_reg_pp3_iter32, exitcond6_fu_669_p2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter32 = ap_const_logic_1) and (exitcond_i1_reg_2271_pp3_iter31_reg = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond6_fu_669_p2 = ap_const_lv1_0)))) then 
            p_output_val_V_we0 <= ap_const_logic_1;
        else 
            p_output_val_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_output_val_V_we1_assign_proc : process(exitcond_i_reg_2222, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (exitcond_i_reg_2222 = ap_const_lv1_0))) then 
            p_output_val_V_we1 <= ap_const_logic_1;
        else 
            p_output_val_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_136_fu_764_p1),35));
    p_shl2_cast_fu_811_p3 <= (tmp_152_fu_807_p1 & ap_const_lv2_0);
    p_shl8_cast_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl8_fu_719_p3),8));
    p_shl8_fu_719_p3 <= (j_reg_464 & ap_const_lv2_0);
    p_shl_cast_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_707_p3),8));
    p_shl_fu_707_p3 <= (j_reg_464 & ap_const_lv4_0);

    p_temp_val_V_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, grp_Conv10_fu_567_dst_val_V_address0, ap_CS_fsm_state12, tmp_161_cast_fu_1124_p1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            p_temp_val_V_address0 <= tmp_161_cast_fu_1124_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            p_temp_val_V_address0 <= grp_Conv10_fu_567_dst_val_V_address0;
        else 
            p_temp_val_V_address0 <= "XXXXXX";
        end if; 
    end process;


    p_temp_val_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, grp_Conv10_fu_567_dst_val_V_ce0, ap_CS_fsm_state12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            p_temp_val_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            p_temp_val_V_ce0 <= grp_Conv10_fu_567_dst_val_V_ce0;
        else 
            p_temp_val_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_temp_val_V_we0_assign_proc : process(grp_Conv10_fu_567_dst_val_V_we0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            p_temp_val_V_we0 <= grp_Conv10_fu_567_dst_val_V_we0;
        else 
            p_temp_val_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sel_tmp1_fu_1634_p2 <= (tmp_103_reg_2368 xor ap_const_lv1_1);
    sel_tmp21_demorgan_fu_1677_p2 <= (tmp_104_reg_2374 or sel_tmp6_demorgan_fu_1644_p2);
    sel_tmp2_fu_1639_p2 <= (tmp_107_reg_2391 and sel_tmp1_fu_1634_p2);
    sel_tmp3_fu_1671_p2 <= (sel_tmp_fu_1665_p2 and sel_tmp7_fu_1654_p2);
    sel_tmp4_fu_1682_p2 <= (sel_tmp21_demorgan_fu_1677_p2 xor ap_const_lv1_1);
    sel_tmp5_fu_1688_p2 <= (sel_tmp4_fu_1682_p2 and icmp1_fu_1601_p2);
    sel_tmp6_demorgan_fu_1644_p2 <= (tmp_107_reg_2391 or tmp_103_reg_2368);
    sel_tmp6_fu_1648_p2 <= (sel_tmp6_demorgan_fu_1644_p2 xor ap_const_lv1_1);
    sel_tmp7_fu_1654_p2 <= (tmp_104_reg_2374 and sel_tmp6_fu_1648_p2);
    sel_tmp8_fu_1659_p2 <= (tmp_109_fu_1585_p2 and sel_tmp7_fu_1654_p2);
    sel_tmp_fu_1665_p2 <= (tmp_109_fu_1585_p2 xor ap_const_lv1_1);
        sh_amt_cast_fu_1577_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_1572_p3),32));

    sh_amt_fu_1572_p3 <= 
        tmp_105_reg_2381 when (tmp_104_reg_2374(0) = '1') else 
        tmp_106_reg_2386;
    this_assign_fu_1621_p3 <= 
        ap_const_lv32_FFFFFFFF when (isneg_reg_2357(0) = '1') else 
        ap_const_lv32_0;
    tmp24_cast_cast_fu_1429_p3 <= 
        ap_const_lv8_70 when (tmp_91_fu_1421_p2(0) = '1') else 
        ap_const_lv8_6F;
    tmp32_V_11_fu_1407_p1 <= grp_fu_601_p1;
    tmp32_V_1_fu_1334_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_43_reg_2296),to_integer(unsigned('0' & tmp_141_cast_fu_1330_p1(31-1 downto 0)))));
    tmp32_V_3_fu_1399_p3 <= 
        tmp32_V_1_fu_1334_p2 when (icmp_fu_1318_p2(0) = '1') else 
        tmp32_V_fu_1395_p1;
    tmp32_V_fu_1395_p1 <= tmp_171_fu_1389_p2(32 - 1 downto 0);
    tmp_101_fu_1504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_fu_1494_p4),12));
    tmp_102_fu_1548_p3 <= (ap_const_lv1_1 & tmp_176_reg_2363);
    tmp_103_fu_1512_p2 <= "1" when (tmp_174_fu_1482_p1 = ap_const_lv63_0) else "0";
    tmp_104_fu_1524_p2 <= "1" when (signed(F2_fu_1518_p2) > signed(ap_const_lv12_10)) else "0";
    tmp_105_fu_1530_p2 <= std_logic_vector(signed(ap_const_lv12_FF0) + signed(F2_fu_1518_p2));
    tmp_106_fu_1536_p2 <= std_logic_vector(unsigned(ap_const_lv12_10) - unsigned(F2_fu_1518_p2));
    tmp_107_fu_1542_p2 <= "1" when (F2_fu_1518_p2 = ap_const_lv12_10) else "0";
    tmp_109_fu_1585_p2 <= "1" when (unsigned(sh_amt_fu_1572_p3) < unsigned(ap_const_lv12_36)) else "0";
    tmp_111_fu_1607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_amt_cast_fu_1577_p1),54));
    tmp_112_fu_1611_p2 <= std_logic_vector(shift_right(signed(man_V_2_fu_1565_p3),to_integer(unsigned('0' & tmp_111_fu_1607_p1(31-1 downto 0)))));
    tmp_114_fu_1628_p2 <= std_logic_vector(shift_left(unsigned(tmp_177_fu_1581_p1),to_integer(unsigned('0' & sh_amt_cast_fu_1577_p1(31-1 downto 0)))));
        tmp_121_cast_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_73_fu_737_p2),32));

    tmp_134_fu_1137_p3 <= (i_reg_430 & ap_const_lv3_0);
    tmp_135_fu_756_p3 <= (tmp_73_fu_737_p2 & ap_const_lv2_0);
    tmp_136_cast_fu_1235_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_30_cast_fu_1216_p2));
        tmp_136_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_135_fu_756_p3),34));

    tmp_137_fu_772_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_768_p1) + unsigned(tmp_74_cast_fu_752_p1));
    tmp_138_cast_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_657_p3),8));
    tmp_138_fu_685_p2 <= std_logic_vector(unsigned(tmp_138_cast_reg_1998) + unsigned(tmp_75_cast_fu_681_p1));
    tmp_139_fu_1169_p3 <= (i_0_i2_reg_522 & ap_const_lv3_0);
    tmp_140_cast_fu_1145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_134_fu_1137_p3),8));
    tmp_140_fu_798_p2 <= std_logic_vector(unsigned(tmp_77_cast_fu_794_p1) + unsigned(tmp_137_reg_2019));
    tmp_141_cast_fu_1330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_86_fu_1324_p2),32));
    tmp_141_fu_819_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_811_p3) + unsigned(tmp_151_fu_803_p1));
    tmp_142_fu_1761_p2 <= std_logic_vector(unsigned(tmp_78_cast_fu_1757_p1) + unsigned(tmp_140_cast_reg_2242));
    tmp_143_fu_1774_p3 <= (i_0_i3_reg_544 & ap_const_lv3_0);
    tmp_144_cast_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_138_fu_685_p2),64));
    tmp_144_fu_1197_p2 <= std_logic_vector(unsigned(tmp_80_cast_fu_1193_p1) + unsigned(tmp_146_cast_reg_2266));
    tmp_145_fu_1091_p3 <= (i_0_i4_reg_500 & ap_const_lv3_0);
    tmp_146_cast_fu_1177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_139_fu_1169_p3),8));
    tmp_146_fu_940_p2 <= std_logic_vector(unsigned(tmp_141_reg_2064) + unsigned(tmp_89_cast_fu_936_p1));
    tmp_147_fu_1816_p2 <= std_logic_vector(unsigned(tmp_152_cast_reg_2406) + unsigned(tmp_94_cast_fu_1812_p1));
    tmp_148_fu_1802_p2 <= std_logic_vector(unsigned(tmp_154_cast_reg_2411) + unsigned(tmp_94_cast1_fu_1798_p1));
    tmp_149_fu_1119_p2 <= std_logic_vector(unsigned(tmp_157_cast_reg_2217) + unsigned(tmp_98_cast_fu_1115_p1));
    tmp_151_fu_803_p1 <= tmp_140_fu_798_p2(12 - 1 downto 0);
    tmp_152_cast_fu_1766_p3 <= (tmp_142_fu_1761_p2 & ap_const_lv3_0);
    tmp_152_fu_807_p1 <= tmp_140_fu_798_p2(10 - 1 downto 0);
    tmp_154_cast_fu_1782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_143_fu_1774_p3),8));
    tmp_155_cast_fu_1202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_144_fu_1197_p2),64));
    tmp_155_fu_1288_p1 <= msb_idx_fu_1283_p2(31 - 1 downto 0);
    tmp_157_cast_fu_1099_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_145_fu_1091_p3),8));
    tmp_157_fu_1292_p3 <= msb_idx_fu_1283_p2(31 downto 31);
    tmp_158_cast_fu_945_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_146_fu_940_p2),64));
    tmp_159_cast_fu_1821_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_147_fu_1816_p2),64));
    tmp_160_cast_fu_1807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_148_fu_1802_p2),64));
    tmp_161_cast_fu_1124_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_149_fu_1119_p2),64));
    tmp_162_fu_1308_p4 <= msb_idx_1_fu_1300_p3(30 downto 5);
    tmp_163_fu_1339_p1 <= msb_idx_1_fu_1300_p3(6 - 1 downto 0);
    tmp_164_fu_1343_p2 <= "1" when (unsigned(msb_idx_1_fu_1300_p3) < unsigned(ap_const_lv31_1F)) else "0";
    tmp_165_fu_1349_p2 <= std_logic_vector(signed(ap_const_lv6_21) + signed(tmp_163_fu_1339_p1));
    
    tmp_166_fu_1355_p4_proc : process(p_Val2_32_cast_reg_2301)
    variable vlo_cpy : STD_LOGIC_VECTOR(33+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(33+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable tmp_166_fu_1355_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(33 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_20(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := p_Val2_32_cast_reg_2301;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(33-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(33-1-unsigned(ap_const_lv32_20(6-1 downto 0)));
            for tmp_166_fu_1355_p4_i in 0 to 33-1 loop
                v0_cpy(tmp_166_fu_1355_p4_i) := p_Val2_32_cast_reg_2301(33-1-tmp_166_fu_1355_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(33-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_166_fu_1355_p4 <= resvalue(33-1 downto 0);
    end process;

    tmp_167_fu_1364_p2 <= (tmp_163_fu_1339_p1 xor ap_const_lv6_3F);
    tmp_168_fu_1370_p3 <= 
        tmp_166_fu_1355_p4 when (tmp_164_fu_1343_p2(0) = '1') else 
        p_Val2_32_cast_reg_2301;
    tmp_169_fu_1377_p3 <= 
        tmp_167_fu_1364_p2 when (tmp_164_fu_1343_p2(0) = '1') else 
        tmp_165_fu_1349_p2;
    tmp_170_fu_1385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_169_fu_1377_p3),33));
    tmp_171_fu_1389_p2 <= std_logic_vector(shift_right(unsigned(tmp_168_fu_1370_p3),to_integer(unsigned('0' & tmp_170_fu_1385_p1(31-1 downto 0)))));
    tmp_173_fu_1426_p1 <= msb_idx_reg_2312_pp3_iter4_reg(8 - 1 downto 0);
    tmp_174_fu_1482_p1 <= ireg_V_fu_1478_p1(63 - 1 downto 0);
    tmp_176_fu_1508_p1 <= ireg_V_fu_1478_p1(52 - 1 downto 0);
    tmp_177_fu_1581_p1 <= man_V_2_fu_1565_p3(32 - 1 downto 0);
    tmp_178_fu_1591_p4 <= sh_amt_fu_1572_p3(11 downto 5);
    tmp_179_fu_1617_p1 <= tmp_112_fu_1611_p2(32 - 1 downto 0);
    tmp_65_fu_1153_p0 <= convlayer2_b_V_q0;
        tmp_65_fu_1153_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_65_fu_1153_p0),32));

    tmp_66_fu_1467_p1 <= p_Result_7_op_fu_1461_p2;
    tmp_70_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_430),64));
    tmp_71_fu_1149_p0 <= convlayer2_b_V_q0;
        tmp_71_fu_1149_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_71_fu_1149_p0),33));

    tmp_72_fu_731_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_715_p1) - unsigned(p_shl8_cast_fu_727_p1));
    tmp_73_fu_737_p2 <= std_logic_vector(unsigned(tmp_72_fu_731_p2) + unsigned(i_cast_reg_1976));
    tmp_74_cast_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_121_cast_fu_742_p1),35));
    tmp_74_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_121_cast_fu_742_p1),64));
    tmp_75_cast_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i1_reg_453),8));
    tmp_77_cast_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_476),35));
    tmp_78_cast_fu_1757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i3_reg_544),8));
    tmp_80_cast_fu_1193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i2_reg_533),8));
    tmp_81_fu_1207_p0 <= p_output_val_V_q1;
        tmp_81_fu_1207_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_81_fu_1207_p0),33));

    tmp_82_fu_1221_p2 <= "1" when (p_Val2_30_fu_1211_p2 = ap_const_lv33_0) else "0";
    
    tmp_83_fu_1271_p3_proc : process(p_Result_5_fu_1263_p3)
    begin
        tmp_83_fu_1271_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_5_fu_1263_p3(i) = '1' then
                tmp_83_fu_1271_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    tmp_86_fu_1324_p2 <= std_logic_vector(unsigned(ap_const_lv31_1F) - unsigned(msb_idx_1_fu_1300_p3));
    tmp_89_cast_fu_936_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_0_i_phi_fu_492_p4),12));
    tmp_91_fu_1421_p2 <= "0" when (p_Result_s_203_reg_2327 = ap_const_lv8_9E) else "1";
    tmp_94_cast1_fu_1798_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_0_i3_phi_fu_559_p4),8));
    tmp_94_cast_fu_1812_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i3_reg_555),11));
    tmp_95_fu_1443_p3 <= (is_neg_reg_2291_pp3_iter4_reg & p_Repl2_1_trunc_fu_1437_p2);
    tmp_98_cast_fu_1115_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i4_reg_511),8));
    tmp_s_fu_657_p3 <= (i_0_i1_reg_442 & ap_const_lv3_0);
    x_assign_fu_1471_p3 <= 
        ap_const_lv32_80000000 when (tmp_82_reg_2286_pp3_iter4_reg(0) = '1') else 
        tmp_66_fu_1467_p1;
end behav;
