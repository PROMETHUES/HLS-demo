-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity PoolLayer_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_val_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_val_V_ce0 : OUT STD_LOGIC;
    input_val_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    poollayer_output_val_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    poollayer_output_val_V_ce0 : OUT STD_LOGIC;
    poollayer_output_val_V_we0 : OUT STD_LOGIC;
    poollayer_output_val_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of PoolLayer_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal j_i_reg_138 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond3_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_2_fu_164_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_291 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_fu_176_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_3_fu_188_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_307 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_80_fu_194_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal p_lshr_f_i_cast_reg_316 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_62_fu_224_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_62_reg_321 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_81_fu_230_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_81_reg_326 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state8_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal p_lshr_f7_i_cast_reg_330 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_2_fu_262_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal i_4_fu_281_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state8 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal p_temp_val_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_temp_val_V_ce0 : STD_LOGIC;
    signal p_temp_val_V_we0 : STD_LOGIC;
    signal p_temp_val_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Conv11_fu_149_ap_start : STD_LOGIC;
    signal grp_Conv11_fu_149_ap_done : STD_LOGIC;
    signal grp_Conv11_fu_149_ap_idle : STD_LOGIC;
    signal grp_Conv11_fu_149_ap_ready : STD_LOGIC;
    signal grp_Conv11_fu_149_src_val_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Conv11_fu_149_src_val_V_ce0 : STD_LOGIC;
    signal grp_Conv11_fu_149_dst_val_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_Conv11_fu_149_dst_val_V_ce0 : STD_LOGIC;
    signal grp_Conv11_fu_149_dst_val_V_we0 : STD_LOGIC;
    signal grp_Conv11_fu_149_dst_val_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_reg_92 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal j_0_i_reg_103 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond2_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_114 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_i_reg_126 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_Conv11_fu_149_ap_start_reg : STD_LOGIC := '0';
    signal exitcond_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_79_cast_fu_257_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal tmp_64_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_216_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_99_i_cast_fu_212_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_104_i_cast_fu_248_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_65_fu_252_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_63_fu_268_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component Conv11 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_val_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        src_val_V_ce0 : OUT STD_LOGIC;
        src_val_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        src_val_V_offset : IN STD_LOGIC_VECTOR (3 downto 0);
        dst_val_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        dst_val_V_ce0 : OUT STD_LOGIC;
        dst_val_V_we0 : OUT STD_LOGIC;
        dst_val_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component PoolLayer_1_p_temKfY IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    p_temp_val_V_U : component PoolLayer_1_p_temKfY
    generic map (
        DataWidth => 32,
        AddressRange => 49,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_temp_val_V_address0,
        ce0 => p_temp_val_V_ce0,
        we0 => p_temp_val_V_we0,
        d0 => grp_Conv11_fu_149_dst_val_V_d0,
        q0 => p_temp_val_V_q0);

    grp_Conv11_fu_149 : component Conv11
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Conv11_fu_149_ap_start,
        ap_done => grp_Conv11_fu_149_ap_done,
        ap_idle => grp_Conv11_fu_149_ap_idle,
        ap_ready => grp_Conv11_fu_149_ap_ready,
        src_val_V_address0 => grp_Conv11_fu_149_src_val_V_address0,
        src_val_V_ce0 => grp_Conv11_fu_149_src_val_V_ce0,
        src_val_V_q0 => input_val_V_q0,
        src_val_V_offset => i_reg_114,
        dst_val_V_address0 => grp_Conv11_fu_149_dst_val_V_address0,
        dst_val_V_ce0 => grp_Conv11_fu_149_dst_val_V_ce0,
        dst_val_V_we0 => grp_Conv11_fu_149_dst_val_V_we0,
        dst_val_V_d0 => grp_Conv11_fu_149_dst_val_V_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state8) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((tmp_80_fu_194_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state8) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state8);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((tmp_80_fu_194_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Conv11_fu_149_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Conv11_fu_149_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond_fu_182_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_Conv11_fu_149_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Conv11_fu_149_ap_ready = ap_const_logic_1)) then 
                    grp_Conv11_fu_149_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_reg_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_0_i_reg_92 <= i_2_reg_291;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_i_reg_92 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i_i_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_i_reg_126 <= i_4_fu_281_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_Conv11_fu_149_ap_done = ap_const_logic_1))) then 
                i_i_reg_126 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_158_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_114 <= ap_const_lv4_0;
            elsif (((tmp_80_fu_194_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_reg_114 <= i_3_reg_307;
            end if; 
        end if;
    end process;

    j_0_i_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_158_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_i_reg_103 <= ap_const_lv2_0;
            elsif (((exitcond2_fu_170_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_0_i_reg_103 <= j_fu_176_p2;
            end if; 
        end if;
    end process;

    j_i_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_80_fu_194_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                j_i_reg_138 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (tmp_81_fu_230_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                j_i_reg_138 <= j_2_fu_262_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_2_reg_291 <= i_2_fu_164_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_3_reg_307 <= i_3_fu_188_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (tmp_81_fu_230_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                p_lshr_f7_i_cast_reg_330 <= j_i_reg_138(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_80_fu_194_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                p_lshr_f_i_cast_reg_316 <= i_i_reg_126(2 downto 1);
                tmp_62_reg_321 <= tmp_62_fu_224_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                tmp_81_reg_326 <= j_i_reg_138(3 downto 3);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond3_fu_158_p2, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state5, tmp_80_fu_194_p3, ap_CS_fsm_state7, tmp_81_fu_230_p3, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_subdone, grp_Conv11_fu_149_ap_done, exitcond2_fu_170_p2, ap_CS_fsm_state6, exitcond_fu_182_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond3_fu_158_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond2_fu_170_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_182_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_Conv11_fu_149_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((tmp_80_fu_194_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((tmp_81_fu_230_p3 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((tmp_81_fu_230_p3 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state8_assign_proc : process(tmp_81_fu_230_p3)
    begin
        if ((tmp_81_fu_230_p3 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, exitcond_fu_182_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_182_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, exitcond_fu_182_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_182_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_fu_170_p2 <= "1" when (j_0_i_reg_103 = ap_const_lv2_2) else "0";
    exitcond3_fu_158_p2 <= "1" when (i_0_i_reg_92 = ap_const_lv2_2) else "0";
    exitcond_fu_182_p2 <= "1" when (i_reg_114 = ap_const_lv4_C) else "0";
    grp_Conv11_fu_149_ap_start <= grp_Conv11_fu_149_ap_start_reg;
    i_2_fu_164_p2 <= std_logic_vector(unsigned(i_0_i_reg_92) + unsigned(ap_const_lv2_1));
    i_3_fu_188_p2 <= std_logic_vector(unsigned(i_reg_114) + unsigned(ap_const_lv4_1));
    i_4_fu_281_p2 <= std_logic_vector(unsigned(i_i_reg_126) + unsigned(ap_const_lv4_2));
    input_val_V_address0 <= grp_Conv11_fu_149_src_val_V_address0;
    input_val_V_ce0 <= grp_Conv11_fu_149_src_val_V_ce0;
    j_2_fu_262_p2 <= std_logic_vector(unsigned(j_i_reg_138) + unsigned(ap_const_lv4_2));
    j_fu_176_p2 <= std_logic_vector(unsigned(j_0_i_reg_103) + unsigned(ap_const_lv2_1));

    p_temp_val_V_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, grp_Conv11_fu_149_dst_val_V_address0, ap_CS_fsm_state6, tmp_79_cast_fu_257_p1, ap_block_pp1_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            p_temp_val_V_address0 <= tmp_79_cast_fu_257_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            p_temp_val_V_address0 <= grp_Conv11_fu_149_dst_val_V_address0;
        else 
            p_temp_val_V_address0 <= "XXXXXX";
        end if; 
    end process;


    p_temp_val_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, grp_Conv11_fu_149_dst_val_V_ce0, ap_CS_fsm_state6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            p_temp_val_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            p_temp_val_V_ce0 <= grp_Conv11_fu_149_dst_val_V_ce0;
        else 
            p_temp_val_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_temp_val_V_we0_assign_proc : process(grp_Conv11_fu_149_dst_val_V_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            p_temp_val_V_we0 <= grp_Conv11_fu_149_dst_val_V_we0;
        else 
            p_temp_val_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    poollayer_output_val_V_address0 <= tmp_64_fu_276_p1(8 - 1 downto 0);

    poollayer_output_val_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            poollayer_output_val_V_ce0 <= ap_const_logic_1;
        else 
            poollayer_output_val_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    poollayer_output_val_V_d0 <= p_temp_val_V_q0;

    poollayer_output_val_V_we0_assign_proc : process(tmp_81_reg_326, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (tmp_81_reg_326 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            poollayer_output_val_V_we0 <= ap_const_logic_1;
        else 
            poollayer_output_val_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_104_i_cast_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i_reg_138),7));
    tmp_62_fu_224_p2 <= std_logic_vector(unsigned(tmp_s_fu_216_p3) - unsigned(tmp_99_i_cast_fu_212_p1));
    tmp_63_fu_268_p4 <= ((i_reg_114 & p_lshr_f_i_cast_reg_316) & p_lshr_f7_i_cast_reg_330);
    tmp_64_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_63_fu_268_p4),64));
    tmp_65_fu_252_p2 <= std_logic_vector(unsigned(tmp_104_i_cast_fu_248_p1) + unsigned(tmp_62_reg_321));
        tmp_79_cast_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_65_fu_252_p2),64));

    tmp_80_fu_194_p3 <= i_i_reg_126(3 downto 3);
    tmp_81_fu_230_p3 <= j_i_reg_138(3 downto 3);
    tmp_99_i_cast_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_126),7));
    tmp_s_fu_216_p3 <= (i_i_reg_126 & ap_const_lv3_0);
end behav;
