// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module PoolLayer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_val_V_address0,
        input_val_V_ce0,
        input_val_V_q0,
        poollayer_output_val_V_address0,
        poollayer_output_val_V_ce0,
        poollayer_output_val_V_we0,
        poollayer_output_val_V_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_pp1_stage0 = 9'd128;
parameter    ap_ST_fsm_state10 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] input_val_V_address0;
output   input_val_V_ce0;
input  [31:0] input_val_V_q0;
output  [9:0] poollayer_output_val_V_address0;
output   poollayer_output_val_V_ce0;
output   poollayer_output_val_V_we0;
output  [31:0] poollayer_output_val_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg poollayer_output_val_V_ce0;
reg poollayer_output_val_V_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] j_i_reg_144;
wire   [0:0] exitcond3_fu_164_p2;
wire    ap_CS_fsm_state2;
wire   [1:0] i_2_fu_170_p2;
reg   [1:0] i_2_reg_354;
wire   [1:0] j_fu_182_p2;
wire    ap_CS_fsm_state3;
wire   [2:0] i_3_fu_194_p2;
reg   [2:0] i_3_reg_370;
wire    ap_CS_fsm_state5;
wire  signed [8:0] tmp_82_cast_fu_230_p1;
reg  signed [8:0] tmp_82_cast_reg_375;
wire    ap_CS_fsm_state6;
wire    grp_Conv9_fu_155_ap_idle;
wire    grp_Conv9_fu_155_ap_ready;
wire    grp_Conv9_fu_155_ap_done;
wire   [0:0] tmp_i_fu_234_p2;
wire    ap_CS_fsm_state7;
wire   [10:0] tmp_69_fu_279_p2;
reg   [10:0] tmp_69_reg_384;
wire   [9:0] tmp_70_fu_289_p2;
reg   [9:0] tmp_70_reg_389;
wire   [0:0] tmp_106_i_fu_295_p2;
reg   [0:0] tmp_106_i_reg_394;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state8_pp1_stage0_iter0;
wire    ap_block_state9_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
reg   [3:0] tmp_84_reg_398;
wire   [4:0] j_2_fu_325_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [4:0] i_4_fu_344_p2;
wire    ap_CS_fsm_state10;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state8;
reg    ap_enable_reg_pp1_iter1;
reg   [9:0] p_temp_val_V_address0;
reg    p_temp_val_V_ce0;
reg    p_temp_val_V_we0;
wire   [31:0] p_temp_val_V_q0;
wire    grp_Conv9_fu_155_ap_start;
wire   [11:0] grp_Conv9_fu_155_src_val_V_address0;
wire    grp_Conv9_fu_155_src_val_V_ce0;
wire   [9:0] grp_Conv9_fu_155_dst_val_V_address0;
wire    grp_Conv9_fu_155_dst_val_V_ce0;
wire    grp_Conv9_fu_155_dst_val_V_we0;
wire   [31:0] grp_Conv9_fu_155_dst_val_V_d0;
reg   [1:0] i_0_i_reg_98;
wire    ap_CS_fsm_state4;
reg   [1:0] j_0_i_reg_109;
wire   [0:0] exitcond2_fu_176_p2;
reg   [2:0] i_reg_120;
reg   [4:0] i_i_reg_132;
reg    grp_Conv9_fu_155_ap_start_reg;
wire   [0:0] exitcond_fu_188_p2;
wire   [63:0] tmp_89_cast_fu_320_p1;
wire    ap_block_pp1_stage0;
wire   [63:0] tmp_88_cast_fu_339_p1;
wire   [6:0] tmp_s_fu_200_p3;
wire   [4:0] tmp_66_fu_212_p3;
wire   [7:0] p_shl_cast_fu_208_p1;
wire   [7:0] p_shl1_cast_fu_220_p1;
wire   [7:0] tmp_67_fu_224_p2;
wire   [3:0] tmp_82_fu_240_p4;
wire   [8:0] tmp_i_cast_fu_250_p1;
wire   [8:0] tmp_68_fu_254_p2;
wire   [6:0] tmp_83_fu_259_p1;
wire   [10:0] p_shl2_cast_fu_263_p3;
wire   [10:0] p_shl3_cast_fu_271_p3;
wire   [4:0] tmp_70_fu_289_p1;
wire   [9:0] tmp_109_i_cast_fu_311_p1;
wire   [9:0] tmp_72_fu_315_p2;
wire   [10:0] tmp_108_i_cast_fu_331_p1;
wire   [10:0] tmp_71_fu_334_p2;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [9:0] tmp_70_fu_289_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 grp_Conv9_fu_155_ap_start_reg = 1'b0;
end

PoolLayer_p_temp_yd2 #(
    .DataWidth( 32 ),
    .AddressRange( 529 ),
    .AddressWidth( 10 ))
p_temp_val_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_temp_val_V_address0),
    .ce0(p_temp_val_V_ce0),
    .we0(p_temp_val_V_we0),
    .d0(grp_Conv9_fu_155_dst_val_V_d0),
    .q0(p_temp_val_V_q0)
);

Conv9 grp_Conv9_fu_155(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Conv9_fu_155_ap_start),
    .ap_done(grp_Conv9_fu_155_ap_done),
    .ap_idle(grp_Conv9_fu_155_ap_idle),
    .ap_ready(grp_Conv9_fu_155_ap_ready),
    .src_val_V_address0(grp_Conv9_fu_155_src_val_V_address0),
    .src_val_V_ce0(grp_Conv9_fu_155_src_val_V_ce0),
    .src_val_V_q0(input_val_V_q0),
    .src_val_V_offset(i_reg_120),
    .dst_val_V_address0(grp_Conv9_fu_155_dst_val_V_address0),
    .dst_val_V_ce0(grp_Conv9_fu_155_dst_val_V_ce0),
    .dst_val_V_we0(grp_Conv9_fu_155_dst_val_V_we0),
    .dst_val_V_d0(grp_Conv9_fu_155_dst_val_V_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state8) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((tmp_i_fu_234_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state8) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state8);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((tmp_i_fu_234_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Conv9_fu_155_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state5) & (exitcond_fu_188_p2 == 1'd0))) begin
            grp_Conv9_fu_155_ap_start_reg <= 1'b1;
        end else if ((grp_Conv9_fu_155_ap_ready == 1'b1)) begin
            grp_Conv9_fu_155_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_i_reg_98 <= i_2_reg_354;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_i_reg_98 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_i_reg_132 <= i_4_fu_344_p2;
    end else if (((grp_Conv9_fu_155_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        i_i_reg_132 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_164_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_120 <= 3'd0;
    end else if (((tmp_i_fu_234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        i_reg_120 <= i_3_reg_370;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_164_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_i_reg_109 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_176_p2 == 1'd0))) begin
        j_0_i_reg_109 <= j_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_fu_234_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        j_i_reg_144 <= 5'd0;
    end else if (((tmp_106_i_fu_295_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        j_i_reg_144 <= j_2_fu_325_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_2_reg_354 <= i_2_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_3_reg_370 <= i_3_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_106_i_reg_394 <= tmp_106_i_fu_295_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_fu_234_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_69_reg_384[10 : 2] <= tmp_69_fu_279_p2[10 : 2];
        tmp_70_reg_389 <= tmp_70_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_Conv9_fu_155_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_82_cast_reg_375[8 : 2] <= tmp_82_cast_fu_230_p1[8 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_106_i_fu_295_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_84_reg_398 <= {{j_i_reg_144[4:1]}};
    end
end

always @ (*) begin
    if ((tmp_106_i_fu_295_p2 == 1'd0)) begin
        ap_condition_pp1_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond_fu_188_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_188_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        p_temp_val_V_address0 = tmp_89_cast_fu_320_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        p_temp_val_V_address0 = grp_Conv9_fu_155_dst_val_V_address0;
    end else begin
        p_temp_val_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        p_temp_val_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        p_temp_val_V_ce0 = grp_Conv9_fu_155_dst_val_V_ce0;
    end else begin
        p_temp_val_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_temp_val_V_we0 = grp_Conv9_fu_155_dst_val_V_we0;
    end else begin
        p_temp_val_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        poollayer_output_val_V_ce0 = 1'b1;
    end else begin
        poollayer_output_val_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_106_i_reg_394 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        poollayer_output_val_V_we0 = 1'b1;
    end else begin
        poollayer_output_val_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond3_fu_164_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_176_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond_fu_188_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((grp_Conv9_fu_155_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((tmp_i_fu_234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((tmp_106_i_fu_295_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((tmp_106_i_fu_295_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign exitcond2_fu_176_p2 = ((j_0_i_reg_109 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond3_fu_164_p2 = ((i_0_i_reg_98 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond_fu_188_p2 = ((i_reg_120 == 3'd6) ? 1'b1 : 1'b0);

assign grp_Conv9_fu_155_ap_start = grp_Conv9_fu_155_ap_start_reg;

assign i_2_fu_170_p2 = (i_0_i_reg_98 + 2'd1);

assign i_3_fu_194_p2 = (i_reg_120 + 3'd1);

assign i_4_fu_344_p2 = (i_i_reg_132 + 5'd2);

assign input_val_V_address0 = grp_Conv9_fu_155_src_val_V_address0;

assign input_val_V_ce0 = grp_Conv9_fu_155_src_val_V_ce0;

assign j_2_fu_325_p2 = (j_i_reg_144 + 5'd2);

assign j_fu_182_p2 = (j_0_i_reg_109 + 2'd1);

assign p_shl1_cast_fu_220_p1 = tmp_66_fu_212_p3;

assign p_shl2_cast_fu_263_p3 = {{tmp_83_fu_259_p1}, {4'd0}};

assign p_shl3_cast_fu_271_p3 = {{tmp_68_fu_254_p2}, {2'd0}};

assign p_shl_cast_fu_208_p1 = tmp_s_fu_200_p3;

assign poollayer_output_val_V_address0 = tmp_88_cast_fu_339_p1;

assign poollayer_output_val_V_d0 = p_temp_val_V_q0;

assign tmp_106_i_fu_295_p2 = ((j_i_reg_144 < 5'd24) ? 1'b1 : 1'b0);

assign tmp_108_i_cast_fu_331_p1 = tmp_84_reg_398;

assign tmp_109_i_cast_fu_311_p1 = j_i_reg_144;

assign tmp_66_fu_212_p3 = {{i_reg_120}, {2'd0}};

assign tmp_67_fu_224_p2 = (p_shl_cast_fu_208_p1 - p_shl1_cast_fu_220_p1);

assign tmp_68_fu_254_p2 = ($signed(tmp_i_cast_fu_250_p1) + $signed(tmp_82_cast_reg_375));

assign tmp_69_fu_279_p2 = (p_shl2_cast_fu_263_p3 - p_shl3_cast_fu_271_p3);

assign tmp_70_fu_289_p1 = tmp_70_fu_289_p10;

assign tmp_70_fu_289_p10 = i_i_reg_132;

assign tmp_70_fu_289_p2 = (10'd23 * tmp_70_fu_289_p1);

assign tmp_71_fu_334_p2 = (tmp_69_reg_384 + tmp_108_i_cast_fu_331_p1);

assign tmp_72_fu_315_p2 = (tmp_70_reg_389 + tmp_109_i_cast_fu_311_p1);

assign tmp_82_cast_fu_230_p1 = $signed(tmp_67_fu_224_p2);

assign tmp_82_fu_240_p4 = {{i_i_reg_132[4:1]}};

assign tmp_83_fu_259_p1 = tmp_68_fu_254_p2[6:0];

assign tmp_88_cast_fu_339_p1 = tmp_71_fu_334_p2;

assign tmp_89_cast_fu_320_p1 = tmp_72_fu_315_p2;

assign tmp_i_cast_fu_250_p1 = tmp_82_fu_240_p4;

assign tmp_i_fu_234_p2 = ((i_i_reg_132 < 5'd24) ? 1'b1 : 1'b0);

assign tmp_s_fu_200_p3 = {{i_reg_120}, {4'd0}};

always @ (posedge ap_clk) begin
    tmp_82_cast_reg_375[1:0] <= 2'b00;
    tmp_69_reg_384[1:0] <= 2'b00;
end

endmodule //PoolLayer
