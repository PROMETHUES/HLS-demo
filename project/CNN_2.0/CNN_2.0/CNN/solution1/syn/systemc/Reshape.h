// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Reshape_HH_
#define _Reshape_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Reshape : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<8> > src_val_V_address0;
    sc_out< sc_logic > src_val_V_ce0;
    sc_in< sc_lv<32> > src_val_V_q0;
    sc_out< sc_lv<8> > dst_V_address0;
    sc_out< sc_logic > dst_V_ce0;
    sc_out< sc_logic > dst_V_we0;
    sc_out< sc_lv<32> > dst_V_d0;


    // Module declarations
    Reshape(sc_module_name name);
    SC_HAS_PROCESS(Reshape);

    ~Reshape();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<3> > i_reg_95;
    sc_signal< sc_lv<4> > n_1_fu_112_p2;
    sc_signal< sc_lv<4> > n_1_reg_218;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<6> > tmp_fu_118_p3;
    sc_signal< sc_lv<6> > tmp_reg_223;
    sc_signal< sc_lv<1> > exitcond3_fu_106_p2;
    sc_signal< sc_lv<7> > tmp_70_cast_fu_126_p1;
    sc_signal< sc_lv<7> > tmp_70_cast_reg_228;
    sc_signal< sc_lv<1> > exitcond2_fu_130_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<3> > j_1_fu_136_p2;
    sc_signal< sc_lv<3> > j_1_reg_237;
    sc_signal< sc_lv<8> > tmp_57_fu_151_p3;
    sc_signal< sc_lv<8> > tmp_57_reg_242;
    sc_signal< sc_lv<9> > tmp_62_cast_fu_159_p1;
    sc_signal< sc_lv<9> > tmp_62_cast_reg_247;
    sc_signal< sc_lv<1> > exitcond_fu_167_p2;
    sc_signal< sc_lv<1> > exitcond_reg_252;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<3> > i_1_fu_173_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<8> > index_fu_179_p2;
    sc_signal< sc_lv<8> > index_reg_261;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<4> > n_reg_73;
    sc_signal< sc_lv<3> > j_reg_84;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<64> > tmp_74_cast_fu_206_p1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<64> > tmp_59_fu_211_p1;
    sc_signal< sc_lv<6> > tmp_95_cast_fu_142_p1;
    sc_signal< sc_lv<6> > tmp_s_fu_146_p2;
    sc_signal< sc_lv<8> > i_cast8_fu_163_p1;
    sc_signal< sc_lv<7> > tmp_65_cast_fu_184_p1;
    sc_signal< sc_lv<7> > tmp_60_fu_188_p2;
    sc_signal< sc_lv<9> > tmp_73_cast_fu_193_p3;
    sc_signal< sc_lv<9> > tmp_61_fu_201_p2;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_pp0_stage0;
    static const sc_lv<5> ap_ST_fsm_state6;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<4> ap_const_lv4_C;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state4_pp0_stage0_iter0();
    void thread_ap_block_state5_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state4();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_dst_V_address0();
    void thread_dst_V_ce0();
    void thread_dst_V_d0();
    void thread_dst_V_we0();
    void thread_exitcond2_fu_130_p2();
    void thread_exitcond3_fu_106_p2();
    void thread_exitcond_fu_167_p2();
    void thread_i_1_fu_173_p2();
    void thread_i_cast8_fu_163_p1();
    void thread_index_fu_179_p2();
    void thread_j_1_fu_136_p2();
    void thread_n_1_fu_112_p2();
    void thread_src_val_V_address0();
    void thread_src_val_V_ce0();
    void thread_tmp_57_fu_151_p3();
    void thread_tmp_59_fu_211_p1();
    void thread_tmp_60_fu_188_p2();
    void thread_tmp_61_fu_201_p2();
    void thread_tmp_62_cast_fu_159_p1();
    void thread_tmp_65_cast_fu_184_p1();
    void thread_tmp_70_cast_fu_126_p1();
    void thread_tmp_73_cast_fu_193_p3();
    void thread_tmp_74_cast_fu_206_p1();
    void thread_tmp_95_cast_fu_142_p1();
    void thread_tmp_fu_118_p3();
    void thread_tmp_s_fu_146_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
