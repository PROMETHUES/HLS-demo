// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Conv11_HH_
#define _Conv11_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Conv11_LineBufferJfO.h"

namespace ap_rtl {

struct Conv11 : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > src_val_V_address0;
    sc_out< sc_logic > src_val_V_ce0;
    sc_in< sc_lv<32> > src_val_V_q0;
    sc_in< sc_lv<4> > src_val_V_offset;
    sc_out< sc_lv<6> > dst_val_V_address0;
    sc_out< sc_logic > dst_val_V_ce0;
    sc_out< sc_logic > dst_val_V_we0;
    sc_out< sc_lv<32> > dst_val_V_d0;


    // Module declarations
    Conv11(sc_module_name name);
    SC_HAS_PROCESS(Conv11);

    ~Conv11();

    sc_trace_file* mVcdFile;

    Conv11_LineBufferJfO* LineBuffer_val_1_V_U;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > j_reg_144;
    sc_signal< sc_lv<8> > tmp_208_cast_fu_163_p1;
    sc_signal< sc_lv<8> > tmp_208_cast_reg_442;
    sc_signal< sc_lv<1> > exitcond4_fu_167_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<4> > i_14_fu_173_p2;
    sc_signal< sc_lv<4> > i_14_reg_451;
    sc_signal< sc_lv<11> > tmp_211_cast_fu_188_p3;
    sc_signal< sc_lv<11> > tmp_211_cast_reg_456;
    sc_signal< sc_lv<1> > tmp_s_fu_196_p2;
    sc_signal< sc_lv<1> > tmp_s_reg_461;
    sc_signal< sc_lv<7> > tmp_194_fu_220_p2;
    sc_signal< sc_lv<7> > tmp_194_reg_466;
    sc_signal< sc_lv<1> > exitcond5_fu_226_p2;
    sc_signal< sc_lv<1> > exitcond5_reg_471;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<4> > j_12_fu_232_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<3> > LineBuffer_val_1_V_s_reg_485;
    sc_signal< sc_lv<1> > or_cond_fu_263_p2;
    sc_signal< sc_lv<1> > or_cond_reg_491;
    sc_signal< sc_lv<4> > tmp_153_fu_268_p2;
    sc_signal< sc_lv<4> > tmp_153_reg_495;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<3> > LineBuffer_val_1_V_address0;
    sc_signal< sc_logic > LineBuffer_val_1_V_ce0;
    sc_signal< sc_lv<32> > LineBuffer_val_1_V_q0;
    sc_signal< sc_logic > LineBuffer_val_1_V_ce1;
    sc_signal< sc_logic > LineBuffer_val_1_V_we1;
    sc_signal< sc_lv<4> > i_reg_133;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<64> > tmp_214_cast_fu_252_p1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<64> > tmp_151_fu_238_p1;
    sc_signal< sc_lv<64> > tmp_218_cast_fu_415_p1;
    sc_signal< sc_lv<32> > BlockBuffer_val_0_V_fu_72;
    sc_signal< sc_lv<32> > BlockBuffer_val_1_V_fu_76;
    sc_signal< sc_lv<7> > tmp_191_fu_155_p3;
    sc_signal< sc_lv<8> > tmp_cast_fu_179_p1;
    sc_signal< sc_lv<8> > tmp_192_fu_183_p2;
    sc_signal< sc_lv<4> > tmp_148_fu_202_p2;
    sc_signal< sc_lv<7> > tmp_193_fu_212_p3;
    sc_signal< sc_lv<7> > tmp_149_cast_fu_208_p1;
    sc_signal< sc_lv<11> > tmp_151_cast_fu_243_p1;
    sc_signal< sc_lv<11> > tmp_195_fu_247_p2;
    sc_signal< sc_lv<1> > tmp_152_fu_257_p2;
    sc_signal< sc_lv<30> > tmp_196_fu_288_p4;
    sc_signal< sc_lv<46> > tmp_388_0_1_fu_298_p3;
    sc_signal< sc_lv<46> > p_Val2_71_0_1_fu_280_p3;
    sc_signal< sc_lv<47> > tmp_3893_0_1_cast_ca_fu_310_p1;
    sc_signal< sc_lv<47> > tmp_388_0_1_cast_cas_fu_306_p1;
    sc_signal< sc_lv<47> > p_Val2_72_0_1_fu_314_p2;
    sc_signal< sc_lv<31> > tmp_70_fu_320_p4;
    sc_signal< sc_lv<47> > tmp_197_fu_338_p3;
    sc_signal< sc_lv<46> > p_Val2_71_1_fu_330_p3;
    sc_signal< sc_lv<48> > tmp_3893_1_cast_fu_350_p1;
    sc_signal< sc_lv<48> > tmp_388_1_fu_346_p1;
    sc_signal< sc_lv<48> > p_Val2_72_1_fu_354_p2;
    sc_signal< sc_lv<32> > tmp_198_fu_368_p4;
    sc_signal< sc_lv<46> > p_Val2_71_1_1_fu_360_p3;
    sc_signal< sc_lv<48> > tmp_3893_1_1_cast_fu_386_p1;
    sc_signal< sc_lv<48> > tmp_388_1_1_fu_378_p3;
    sc_signal< sc_lv<48> > p_Val2_72_1_1_fu_390_p2;
    sc_signal< sc_lv<7> > tmp_154_cast_fu_407_p1;
    sc_signal< sc_lv<7> > tmp_199_fu_410_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state5;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_2E;
    static const sc_lv<32> ap_const_lv32_2F;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_LineBuffer_val_1_V_address0();
    void thread_LineBuffer_val_1_V_ce0();
    void thread_LineBuffer_val_1_V_ce1();
    void thread_LineBuffer_val_1_V_we1();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_dst_val_V_address0();
    void thread_dst_val_V_ce0();
    void thread_dst_val_V_d0();
    void thread_dst_val_V_we0();
    void thread_exitcond4_fu_167_p2();
    void thread_exitcond5_fu_226_p2();
    void thread_i_14_fu_173_p2();
    void thread_j_12_fu_232_p2();
    void thread_or_cond_fu_263_p2();
    void thread_p_Val2_71_0_1_fu_280_p3();
    void thread_p_Val2_71_1_1_fu_360_p3();
    void thread_p_Val2_71_1_fu_330_p3();
    void thread_p_Val2_72_0_1_fu_314_p2();
    void thread_p_Val2_72_1_1_fu_390_p2();
    void thread_p_Val2_72_1_fu_354_p2();
    void thread_src_val_V_address0();
    void thread_src_val_V_ce0();
    void thread_tmp_148_fu_202_p2();
    void thread_tmp_149_cast_fu_208_p1();
    void thread_tmp_151_cast_fu_243_p1();
    void thread_tmp_151_fu_238_p1();
    void thread_tmp_152_fu_257_p2();
    void thread_tmp_153_fu_268_p2();
    void thread_tmp_154_cast_fu_407_p1();
    void thread_tmp_191_fu_155_p3();
    void thread_tmp_192_fu_183_p2();
    void thread_tmp_193_fu_212_p3();
    void thread_tmp_194_fu_220_p2();
    void thread_tmp_195_fu_247_p2();
    void thread_tmp_196_fu_288_p4();
    void thread_tmp_197_fu_338_p3();
    void thread_tmp_198_fu_368_p4();
    void thread_tmp_199_fu_410_p2();
    void thread_tmp_208_cast_fu_163_p1();
    void thread_tmp_211_cast_fu_188_p3();
    void thread_tmp_214_cast_fu_252_p1();
    void thread_tmp_218_cast_fu_415_p1();
    void thread_tmp_388_0_1_cast_cas_fu_306_p1();
    void thread_tmp_388_0_1_fu_298_p3();
    void thread_tmp_388_1_1_fu_378_p3();
    void thread_tmp_388_1_fu_346_p1();
    void thread_tmp_3893_0_1_cast_ca_fu_310_p1();
    void thread_tmp_3893_1_1_cast_fu_386_p1();
    void thread_tmp_3893_1_cast_fu_350_p1();
    void thread_tmp_70_fu_320_p4();
    void thread_tmp_cast_fu_179_p1();
    void thread_tmp_s_fu_196_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
