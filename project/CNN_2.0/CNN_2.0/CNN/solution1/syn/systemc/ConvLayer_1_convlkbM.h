// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __ConvLayer_1_convlkbM_H__
#define __ConvLayer_1_convlkbM_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct ConvLayer_1_convlkbM_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 18;
  static const unsigned AddressRange = 150;
  static const unsigned AddressWidth = 8;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(ConvLayer_1_convlkbM_ram) {
        ram[0] = "0b101011000000111010";
        ram[1] = "0b110100110110000010";
        ram[2] = "0b111011110001001001";
        ram[3] = "0b111111111000110110";
        ram[4] = "0b110001001101101000";
        ram[5] = "0b000011010111101111";
        ram[6] = "0b001101110010111100";
        ram[7] = "0b010001110111001011";
        ram[8] = "0b010000000110110110";
        ram[9] = "0b111100100101101100";
        ram[10] = "0b010011111011000010";
        ram[11] = "0b010110010000001010";
        ram[12] = "0b011010000001000100";
        ram[13] = "0b010111000010110111";
        ram[14] = "0b001110110100101010";
        ram[15] = "0b001100110101010011";
        ram[16] = "0b010100010011010110";
        ram[17] = "0b010000110001100101";
        ram[18] = "0b010001001100100011";
        ram[19] = "0b000111100111110100";
        ram[20] = "0b111100101000110100";
        ram[21] = "0b000000000111111111";
        ram[22] = "0b111100111000111101";
        ram[23] = "0b111101110101011000";
        ram[24] = "0b101101010100001101";
        ram[25] = "0b010000100001000010";
        ram[26] = "0b001000100100010111";
        ram[27] = "0b000100100010011100";
        ram[28] = "0b001001111101001100";
        ram[29] = "0b001111010011010011";
        ram[30] = "0b111010001110110100";
        ram[31] = "0b110110000001100111";
        ram[32] = "0b110111000011000111";
        ram[33] = "0b111101010100011111";
        ram[34] = "0b001011000010010010";
        ram[35] = "0b110000001000000100";
        ram[36] = "0b101010000001000010";
        ram[37] = "0b110000000001111010";
        ram[38] = "0b111100000101000111";
        ram[39] = "0b000001101110101010";
        ram[40] = "0b110000100010111001";
        ram[41] = "0b110001101111010000";
        ram[42] = "0b110001111011010100";
        ram[43] = "0b111010111010001010";
        ram[44] = "0b111111001011111100";
        ram[45] = "0b111100011010100100";
        ram[46] = "0b111101110100010101";
        ram[47] = "0b000011101111000011";
        ram[48] = "0b001001011001101001";
        ram[49] = "0b000101001111100000";
        ram[50] = "0b100010000101000101";
        ram[51] = "0b101011011101011010";
        ram[52] = "0b101111100111100100";
        ram[53] = "0b110101001101001110";
        ram[54] = "0b110001110001010001";
        ram[55] = "0b110010000000101100";
        ram[56] = "0b000011100001000101";
        ram[57] = "0b001101101000011010";
        ram[58] = "0b001011111000001010";
        ram[59] = "0b111100011000100100";
        ram[60] = "0b111110101000110001";
        ram[61] = "0b010011110110100011";
        ram[62] = "0b010110011100001001";
        ram[63] = "0b010011100001101110";
        ram[64] = "0b001001010101101100";
        ram[65] = "0b000000111100010000";
        ram[66] = "0b010010111111000000";
        ram[67] = "0b010110100011000111";
        ram[68] = "0b010110010111010000";
        ram[69] = "0b010011000010010010";
        ram[70] = "0b110010001001110111";
        ram[71] = "0b000111101101110000";
        ram[72] = "0b001110000110010110";
        ram[73] = "0b001100100100000000";
        ram[74] = "0b000100001000101011";
        ram[75] = "0b010001001101011111";
        ram[76] = "0b001111001001000000";
        ram[77] = "0b001100000011010001";
        ram[78] = "0b111110010110111011";
        ram[79] = "0b111000100110111001";
        ram[80] = "0b010110000000111111";
        ram[81] = "0b010111001110111010";
        ram[82] = "0b010011110101111011";
        ram[83] = "0b000111001001111000";
        ram[84] = "0b111010011000100011";
        ram[85] = "0b010000010000001011";
        ram[86] = "0b010011001000010000";
        ram[87] = "0b001111001010011010";
        ram[88] = "0b000011101101010001";
        ram[89] = "0b110110100010001101";
        ram[90] = "0b000001100000010000";
        ram[91] = "0b000100111100101011";
        ram[92] = "0b111101111110001101";
        ram[93] = "0b110000100011101000";
        ram[94] = "0b110100111100111000";
        ram[95] = "0b101011100110001101";
        ram[96] = "0b101010000111000011";
        ram[97] = "0b101100100110001111";
        ram[98] = "0b110001000110101111";
        ram[99] = "0b000010010001000010";
        ram[100] = "0b011111111101000001";
        ram[101] = "0b010000001010011011";
        ram[102] = "0b000101011011001101";
        ram[103] = "0b111111001010101010";
        ram[104] = "0b001000001001010100";
        ram[105] = "0b000110100011010101";
        ram[106] = "0b110110101100001010";
        ram[107] = "0b101111001110100110";
        ram[108] = "0b110001111101111010";
        ram[109] = "0b000001010100100101";
        ram[110] = "0b111010001010000111";
        ram[111] = "0b101110110110111011";
        ram[112] = "0b101011000001011011";
        ram[113] = "0b101001100010010001";
        ram[114] = "0b111010100000100011";
        ram[115] = "0b111011101000001101";
        ram[116] = "0b101100110111011000";
        ram[117] = "0b101001010111000001";
        ram[118] = "0b101010010101011000";
        ram[119] = "0b101011100111101000";
        ram[120] = "0b000110011000110011";
        ram[121] = "0b110111001110000101";
        ram[122] = "0b110100011111000110";
        ram[123] = "0b110011001010101010";
        ram[124] = "0b000000000001101011";
        ram[125] = "0b011100010100110111";
        ram[126] = "0b010011100111000110";
        ram[127] = "0b010010000110010110";
        ram[128] = "0b001111101001010000";
        ram[129] = "0b000111011110111100";
        ram[130] = "0b010110000110110001";
        ram[131] = "0b001011100110111010";
        ram[132] = "0b000010001101000111";
        ram[133] = "0b111010100100011000";
        ram[134] = "0b111100000001000100";
        ram[135] = "0b001101000000001010";
        ram[136] = "0b111101110111010101";
        ram[137] = "0b110100101101000001";
        ram[138] = "0b110011010100001001";
        ram[139] = "0b110110001011010101";
        ram[140] = "0b000001011110011111";
        ram[141] = "0b111000110101011111";
        ram[142] = "0b101111100101110111";
        ram[143] = "0b101101010000010011";
        ram[144] = "0b110001001010110100";
        ram[145] = "0b000000110000100001";
        ram[146] = "0b110111000100000110";
        ram[147] = "0b101101111100110010";
        ram[148] = "0b100111000001101100";
        ram[149] = "0b101111011001110010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(ConvLayer_1_convlkbM) {


static const unsigned DataWidth = 18;
static const unsigned AddressRange = 150;
static const unsigned AddressWidth = 8;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


ConvLayer_1_convlkbM_ram* meminst;


SC_CTOR(ConvLayer_1_convlkbM) {
meminst = new ConvLayer_1_convlkbM_ram("ConvLayer_1_convlkbM_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~ConvLayer_1_convlkbM() {
    delete meminst;
}


};//endmodule
#endif
