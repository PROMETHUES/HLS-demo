-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnnclassify is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_val_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_val_V_ce0 : OUT STD_LOGIC;
    input_val_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    input_rows_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    input_rows_empty_n : IN STD_LOGIC;
    input_rows_read : OUT STD_LOGIC;
    input_cols_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    input_cols_empty_n : IN STD_LOGIC;
    input_cols_read : OUT STD_LOGIC;
    label_r : OUT STD_LOGIC_VECTOR (31 downto 0);
    label_r_ap_vld : OUT STD_LOGIC;
    score : OUT STD_LOGIC_VECTOR (31 downto 0);
    score_ap_vld : OUT STD_LOGIC );
end;


architecture behav of cnnclassify is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (21 downto 0) := "0000000001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (21 downto 0) := "0000000010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (21 downto 0) := "0000000100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (21 downto 0) := "0000001000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (21 downto 0) := "0000010000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (21 downto 0) := "0000100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (21 downto 0) := "0001000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (21 downto 0) := "0010000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (21 downto 0) := "0100000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (21 downto 0) := "1000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_9E : STD_LOGIC_VECTOR (7 downto 0) := "10011110";
    constant ap_const_lv8_8E : STD_LOGIC_VECTOR (7 downto 0) := "10001110";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_rows_blk_n : STD_LOGIC;
    signal input_cols_blk_n : STD_LOGIC;
    signal j_0_i_i_i_reg_271 : STD_LOGIC_VECTOR (4 downto 0);
    signal outputlayer_label_reg_282 : STD_LOGIC_VECTOR (31 downto 0);
    signal outputlayer_score_V_reg_295 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_i3925_i_reg_305 : STD_LOGIC_VECTOR (3 downto 0);
    signal input_rows_read_reg_639 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal input_cols_read_reg_644 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_270_i_fu_378_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_280_i_fu_390_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_i_i_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_fu_411_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_669 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_441_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_reg_674 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_117_i_i_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_117_i_i_reg_679 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_fu_456_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_3_cast_fu_471_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_cast_reg_688 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal cconlayer_output_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal exitcond_i_i_i_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_i_i_reg_708 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state19_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i_1_fu_487_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_717 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal sel_SEBB_fu_503_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal input_V_load_1_i_i_o_fu_511_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_286_i_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_286_i_reg_732 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal is_neg_fu_525_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_neg_reg_737 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp32_V_1_fu_565_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_1_reg_742 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_571_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_747 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp32_V_fu_575_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_reg_752 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal p_Result_i_reg_757 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state19 : STD_LOGIC;
    signal inputlayer_output_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inputlayer_output_0_ce0 : STD_LOGIC;
    signal inputlayer_output_0_we0 : STD_LOGIC;
    signal inputlayer_output_0_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal convlayer1_output_va_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal convlayer1_output_va_ce0 : STD_LOGIC;
    signal convlayer1_output_va_we0 : STD_LOGIC;
    signal convlayer1_output_va_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal poollayer1_output_va_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal poollayer1_output_va_ce0 : STD_LOGIC;
    signal poollayer1_output_va_we0 : STD_LOGIC;
    signal poollayer1_output_va_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal convlayer2_output_va_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal convlayer2_output_va_ce0 : STD_LOGIC;
    signal convlayer2_output_va_we0 : STD_LOGIC;
    signal convlayer2_output_va_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal poollayer2_output_va_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal poollayer2_output_va_ce0 : STD_LOGIC;
    signal poollayer2_output_va_we0 : STD_LOGIC;
    signal poollayer2_output_va_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cconlayer_output_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal cconlayer_output_V_ce0 : STD_LOGIC;
    signal cconlayer_output_V_we0 : STD_LOGIC;
    signal grp_ConvLayer_1_fu_317_ap_start : STD_LOGIC;
    signal grp_ConvLayer_1_fu_317_ap_done : STD_LOGIC;
    signal grp_ConvLayer_1_fu_317_ap_idle : STD_LOGIC;
    signal grp_ConvLayer_1_fu_317_ap_ready : STD_LOGIC;
    signal grp_ConvLayer_1_fu_317_input_0_val_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_ConvLayer_1_fu_317_input_0_val_V_ce0 : STD_LOGIC;
    signal grp_ConvLayer_1_fu_317_convlayer_output_val_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_ConvLayer_1_fu_317_convlayer_output_val_V_ce0 : STD_LOGIC;
    signal grp_ConvLayer_1_fu_317_convlayer_output_val_V_we0 : STD_LOGIC;
    signal grp_ConvLayer_1_fu_317_convlayer_output_val_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ConvLayer_1_fu_317_convlayer_output_rows_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ConvLayer_1_fu_317_convlayer_output_rows_ce0 : STD_LOGIC;
    signal grp_ConvLayer_1_fu_317_convlayer_output_rows_we0 : STD_LOGIC;
    signal grp_ConvLayer_1_fu_317_convlayer_output_rows_d0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_ConvLayer_1_fu_317_convlayer_output_cols_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ConvLayer_1_fu_317_convlayer_output_cols_ce0 : STD_LOGIC;
    signal grp_ConvLayer_1_fu_317_convlayer_output_cols_we0 : STD_LOGIC;
    signal grp_ConvLayer_1_fu_317_convlayer_output_cols_d0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_ConvLayer_fu_335_ap_start : STD_LOGIC;
    signal grp_ConvLayer_fu_335_ap_done : STD_LOGIC;
    signal grp_ConvLayer_fu_335_ap_idle : STD_LOGIC;
    signal grp_ConvLayer_fu_335_ap_ready : STD_LOGIC;
    signal grp_ConvLayer_fu_335_input_val_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_ConvLayer_fu_335_input_val_V_ce0 : STD_LOGIC;
    signal grp_ConvLayer_fu_335_convlayer_output_val_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_ConvLayer_fu_335_convlayer_output_val_V_ce0 : STD_LOGIC;
    signal grp_ConvLayer_fu_335_convlayer_output_val_V_we0 : STD_LOGIC;
    signal grp_ConvLayer_fu_335_convlayer_output_val_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ConvLayer_fu_335_convlayer_output_rows_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ConvLayer_fu_335_convlayer_output_rows_ce0 : STD_LOGIC;
    signal grp_ConvLayer_fu_335_convlayer_output_rows_we0 : STD_LOGIC;
    signal grp_ConvLayer_fu_335_convlayer_output_rows_d0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_ConvLayer_fu_335_convlayer_output_cols_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ConvLayer_fu_335_convlayer_output_cols_ce0 : STD_LOGIC;
    signal grp_ConvLayer_fu_335_convlayer_output_cols_we0 : STD_LOGIC;
    signal grp_ConvLayer_fu_335_convlayer_output_cols_d0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_CconLayer_fu_353_ap_start : STD_LOGIC;
    signal grp_CconLayer_fu_353_ap_done : STD_LOGIC;
    signal grp_CconLayer_fu_353_ap_idle : STD_LOGIC;
    signal grp_CconLayer_fu_353_ap_ready : STD_LOGIC;
    signal grp_CconLayer_fu_353_input_val_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_CconLayer_fu_353_input_val_V_ce0 : STD_LOGIC;
    signal grp_CconLayer_fu_353_cconlayer_output_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_CconLayer_fu_353_cconlayer_output_V_ce0 : STD_LOGIC;
    signal grp_CconLayer_fu_353_cconlayer_output_V_we0 : STD_LOGIC;
    signal grp_CconLayer_fu_353_cconlayer_output_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PoolLayer_fu_363_ap_start : STD_LOGIC;
    signal grp_PoolLayer_fu_363_ap_done : STD_LOGIC;
    signal grp_PoolLayer_fu_363_ap_idle : STD_LOGIC;
    signal grp_PoolLayer_fu_363_ap_ready : STD_LOGIC;
    signal grp_PoolLayer_fu_363_input_val_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_PoolLayer_fu_363_input_val_V_ce0 : STD_LOGIC;
    signal grp_PoolLayer_fu_363_poollayer_output_val_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_PoolLayer_fu_363_poollayer_output_val_V_ce0 : STD_LOGIC;
    signal grp_PoolLayer_fu_363_poollayer_output_val_V_we0 : STD_LOGIC;
    signal grp_PoolLayer_fu_363_poollayer_output_val_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PoolLayer_1_fu_369_ap_start : STD_LOGIC;
    signal grp_PoolLayer_1_fu_369_ap_done : STD_LOGIC;
    signal grp_PoolLayer_1_fu_369_ap_idle : STD_LOGIC;
    signal grp_PoolLayer_1_fu_369_ap_ready : STD_LOGIC;
    signal grp_PoolLayer_1_fu_369_input_val_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_PoolLayer_1_fu_369_input_val_V_ce0 : STD_LOGIC;
    signal grp_PoolLayer_1_fu_369_poollayer_output_val_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_PoolLayer_1_fu_369_poollayer_output_val_V_ce0 : STD_LOGIC;
    signal grp_PoolLayer_1_fu_369_poollayer_output_val_V_we0 : STD_LOGIC;
    signal grp_PoolLayer_1_fu_369_poollayer_output_val_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_269_i_reg_238 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_272_i_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_279_i_reg_249 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_282_i_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i_i_i_reg_260 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_i_0_i_i3925_i_phi_fu_309_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ConvLayer_1_fu_317_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_ConvLayer_fu_335_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_CconLayer_fu_353_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_PoolLayer_fu_363_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_PoolLayer_1_fu_369_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_i3926_i_fu_482_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal i_0_i_i_cast_cast_i_fu_402_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_417_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_429_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_425_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_437_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_0_i_i_cast_cast_i_fu_447_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_118_i_i_cast_fu_462_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_fu_466_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i3927_i_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i_i3925_cast_fu_493_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_287_i_fu_533_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal outputlayer_score_V_1_fu_539_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_547_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_zeros_fu_557_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_375_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_288_i_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_186_i_fu_594_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_187_i_fu_599_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_7_trunc_i_fu_603_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_188_i_fu_609_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_1_fu_616_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_fu_627_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component ConvLayer_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_0_val_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_0_val_V_ce0 : OUT STD_LOGIC;
        input_0_val_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        convlayer_output_val_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        convlayer_output_val_V_ce0 : OUT STD_LOGIC;
        convlayer_output_val_V_we0 : OUT STD_LOGIC;
        convlayer_output_val_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        convlayer_output_rows_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        convlayer_output_rows_ce0 : OUT STD_LOGIC;
        convlayer_output_rows_we0 : OUT STD_LOGIC;
        convlayer_output_rows_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        convlayer_output_cols_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        convlayer_output_cols_ce0 : OUT STD_LOGIC;
        convlayer_output_cols_we0 : OUT STD_LOGIC;
        convlayer_output_cols_d0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component ConvLayer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_val_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_val_V_ce0 : OUT STD_LOGIC;
        input_val_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        convlayer_output_val_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        convlayer_output_val_V_ce0 : OUT STD_LOGIC;
        convlayer_output_val_V_we0 : OUT STD_LOGIC;
        convlayer_output_val_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        convlayer_output_rows_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        convlayer_output_rows_ce0 : OUT STD_LOGIC;
        convlayer_output_rows_we0 : OUT STD_LOGIC;
        convlayer_output_rows_d0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        convlayer_output_cols_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        convlayer_output_cols_ce0 : OUT STD_LOGIC;
        convlayer_output_cols_we0 : OUT STD_LOGIC;
        convlayer_output_cols_d0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component CconLayer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_val_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_val_V_ce0 : OUT STD_LOGIC;
        input_val_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        cconlayer_output_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        cconlayer_output_V_ce0 : OUT STD_LOGIC;
        cconlayer_output_V_we0 : OUT STD_LOGIC;
        cconlayer_output_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component PoolLayer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_val_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        input_val_V_ce0 : OUT STD_LOGIC;
        input_val_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        poollayer_output_val_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        poollayer_output_val_V_ce0 : OUT STD_LOGIC;
        poollayer_output_val_V_we0 : OUT STD_LOGIC;
        poollayer_output_val_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component PoolLayer_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_val_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_val_V_ce0 : OUT STD_LOGIC;
        input_val_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        poollayer_output_val_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        poollayer_output_val_V_ce0 : OUT STD_LOGIC;
        poollayer_output_val_V_we0 : OUT STD_LOGIC;
        poollayer_output_val_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_Core_uitofp_3qcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnnclassify_convlNgs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component cnnclassify_convlPgM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component cnnclassify_inputRg6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (23 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component cnnclassify_convlShg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnnclassify_poollThq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnnclassify_convlUhA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CconLayer_p_temp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnnclassify_cconlWhU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    convlayer1_output_ro_U : component cnnclassify_convlNgs
    generic map (
        DataWidth => 6,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_ConvLayer_1_fu_317_convlayer_output_rows_address0,
        ce0 => grp_ConvLayer_1_fu_317_convlayer_output_rows_ce0,
        we0 => grp_ConvLayer_1_fu_317_convlayer_output_rows_we0,
        d0 => grp_ConvLayer_1_fu_317_convlayer_output_rows_d0);

    convlayer1_output_co_U : component cnnclassify_convlNgs
    generic map (
        DataWidth => 6,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_ConvLayer_1_fu_317_convlayer_output_cols_address0,
        ce0 => grp_ConvLayer_1_fu_317_convlayer_output_cols_ce0,
        we0 => grp_ConvLayer_1_fu_317_convlayer_output_cols_we0,
        d0 => grp_ConvLayer_1_fu_317_convlayer_output_cols_d0);

    convlayer2_output_ro_U : component cnnclassify_convlPgM
    generic map (
        DataWidth => 5,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_ConvLayer_fu_335_convlayer_output_rows_address0,
        ce0 => grp_ConvLayer_fu_335_convlayer_output_rows_ce0,
        we0 => grp_ConvLayer_fu_335_convlayer_output_rows_we0,
        d0 => grp_ConvLayer_fu_335_convlayer_output_rows_d0);

    convlayer2_output_co_U : component cnnclassify_convlPgM
    generic map (
        DataWidth => 5,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_ConvLayer_fu_335_convlayer_output_cols_address0,
        ce0 => grp_ConvLayer_fu_335_convlayer_output_cols_ce0,
        we0 => grp_ConvLayer_fu_335_convlayer_output_cols_we0,
        d0 => grp_ConvLayer_fu_335_convlayer_output_cols_d0);

    inputlayer_output_0_U : component cnnclassify_inputRg6
    generic map (
        DataWidth => 24,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputlayer_output_0_address0,
        ce0 => inputlayer_output_0_ce0,
        we0 => inputlayer_output_0_we0,
        d0 => input_val_V_q0,
        q0 => inputlayer_output_0_q0);

    convlayer1_output_va_U : component cnnclassify_convlShg
    generic map (
        DataWidth => 32,
        AddressRange => 3456,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => convlayer1_output_va_address0,
        ce0 => convlayer1_output_va_ce0,
        we0 => convlayer1_output_va_we0,
        d0 => grp_ConvLayer_1_fu_317_convlayer_output_val_V_d0,
        q0 => convlayer1_output_va_q0);

    poollayer1_output_va_U : component cnnclassify_poollThq
    generic map (
        DataWidth => 32,
        AddressRange => 864,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => poollayer1_output_va_address0,
        ce0 => poollayer1_output_va_ce0,
        we0 => poollayer1_output_va_we0,
        d0 => grp_PoolLayer_fu_363_poollayer_output_val_V_d0,
        q0 => poollayer1_output_va_q0);

    convlayer2_output_va_U : component cnnclassify_convlUhA
    generic map (
        DataWidth => 32,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => convlayer2_output_va_address0,
        ce0 => convlayer2_output_va_ce0,
        we0 => convlayer2_output_va_we0,
        d0 => grp_ConvLayer_fu_335_convlayer_output_val_V_d0,
        q0 => convlayer2_output_va_q0);

    poollayer2_output_va_U : component CconLayer_p_temp
    generic map (
        DataWidth => 32,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => poollayer2_output_va_address0,
        ce0 => poollayer2_output_va_ce0,
        we0 => poollayer2_output_va_we0,
        d0 => grp_PoolLayer_1_fu_369_poollayer_output_val_V_d0,
        q0 => poollayer2_output_va_q0);

    cconlayer_output_V_U : component cnnclassify_cconlWhU
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cconlayer_output_V_address0,
        ce0 => cconlayer_output_V_ce0,
        we0 => cconlayer_output_V_we0,
        d0 => grp_CconLayer_fu_353_cconlayer_output_V_d0,
        q0 => cconlayer_output_V_q0);

    grp_ConvLayer_1_fu_317 : component ConvLayer_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ConvLayer_1_fu_317_ap_start,
        ap_done => grp_ConvLayer_1_fu_317_ap_done,
        ap_idle => grp_ConvLayer_1_fu_317_ap_idle,
        ap_ready => grp_ConvLayer_1_fu_317_ap_ready,
        input_0_val_V_address0 => grp_ConvLayer_1_fu_317_input_0_val_V_address0,
        input_0_val_V_ce0 => grp_ConvLayer_1_fu_317_input_0_val_V_ce0,
        input_0_val_V_q0 => inputlayer_output_0_q0,
        convlayer_output_val_V_address0 => grp_ConvLayer_1_fu_317_convlayer_output_val_V_address0,
        convlayer_output_val_V_ce0 => grp_ConvLayer_1_fu_317_convlayer_output_val_V_ce0,
        convlayer_output_val_V_we0 => grp_ConvLayer_1_fu_317_convlayer_output_val_V_we0,
        convlayer_output_val_V_d0 => grp_ConvLayer_1_fu_317_convlayer_output_val_V_d0,
        convlayer_output_rows_address0 => grp_ConvLayer_1_fu_317_convlayer_output_rows_address0,
        convlayer_output_rows_ce0 => grp_ConvLayer_1_fu_317_convlayer_output_rows_ce0,
        convlayer_output_rows_we0 => grp_ConvLayer_1_fu_317_convlayer_output_rows_we0,
        convlayer_output_rows_d0 => grp_ConvLayer_1_fu_317_convlayer_output_rows_d0,
        convlayer_output_cols_address0 => grp_ConvLayer_1_fu_317_convlayer_output_cols_address0,
        convlayer_output_cols_ce0 => grp_ConvLayer_1_fu_317_convlayer_output_cols_ce0,
        convlayer_output_cols_we0 => grp_ConvLayer_1_fu_317_convlayer_output_cols_we0,
        convlayer_output_cols_d0 => grp_ConvLayer_1_fu_317_convlayer_output_cols_d0);

    grp_ConvLayer_fu_335 : component ConvLayer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ConvLayer_fu_335_ap_start,
        ap_done => grp_ConvLayer_fu_335_ap_done,
        ap_idle => grp_ConvLayer_fu_335_ap_idle,
        ap_ready => grp_ConvLayer_fu_335_ap_ready,
        input_val_V_address0 => grp_ConvLayer_fu_335_input_val_V_address0,
        input_val_V_ce0 => grp_ConvLayer_fu_335_input_val_V_ce0,
        input_val_V_q0 => poollayer1_output_va_q0,
        convlayer_output_val_V_address0 => grp_ConvLayer_fu_335_convlayer_output_val_V_address0,
        convlayer_output_val_V_ce0 => grp_ConvLayer_fu_335_convlayer_output_val_V_ce0,
        convlayer_output_val_V_we0 => grp_ConvLayer_fu_335_convlayer_output_val_V_we0,
        convlayer_output_val_V_d0 => grp_ConvLayer_fu_335_convlayer_output_val_V_d0,
        convlayer_output_rows_address0 => grp_ConvLayer_fu_335_convlayer_output_rows_address0,
        convlayer_output_rows_ce0 => grp_ConvLayer_fu_335_convlayer_output_rows_ce0,
        convlayer_output_rows_we0 => grp_ConvLayer_fu_335_convlayer_output_rows_we0,
        convlayer_output_rows_d0 => grp_ConvLayer_fu_335_convlayer_output_rows_d0,
        convlayer_output_cols_address0 => grp_ConvLayer_fu_335_convlayer_output_cols_address0,
        convlayer_output_cols_ce0 => grp_ConvLayer_fu_335_convlayer_output_cols_ce0,
        convlayer_output_cols_we0 => grp_ConvLayer_fu_335_convlayer_output_cols_we0,
        convlayer_output_cols_d0 => grp_ConvLayer_fu_335_convlayer_output_cols_d0);

    grp_CconLayer_fu_353 : component CconLayer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_CconLayer_fu_353_ap_start,
        ap_done => grp_CconLayer_fu_353_ap_done,
        ap_idle => grp_CconLayer_fu_353_ap_idle,
        ap_ready => grp_CconLayer_fu_353_ap_ready,
        input_val_V_address0 => grp_CconLayer_fu_353_input_val_V_address0,
        input_val_V_ce0 => grp_CconLayer_fu_353_input_val_V_ce0,
        input_val_V_q0 => poollayer2_output_va_q0,
        cconlayer_output_V_address0 => grp_CconLayer_fu_353_cconlayer_output_V_address0,
        cconlayer_output_V_ce0 => grp_CconLayer_fu_353_cconlayer_output_V_ce0,
        cconlayer_output_V_we0 => grp_CconLayer_fu_353_cconlayer_output_V_we0,
        cconlayer_output_V_d0 => grp_CconLayer_fu_353_cconlayer_output_V_d0);

    grp_PoolLayer_fu_363 : component PoolLayer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_PoolLayer_fu_363_ap_start,
        ap_done => grp_PoolLayer_fu_363_ap_done,
        ap_idle => grp_PoolLayer_fu_363_ap_idle,
        ap_ready => grp_PoolLayer_fu_363_ap_ready,
        input_val_V_address0 => grp_PoolLayer_fu_363_input_val_V_address0,
        input_val_V_ce0 => grp_PoolLayer_fu_363_input_val_V_ce0,
        input_val_V_q0 => convlayer1_output_va_q0,
        poollayer_output_val_V_address0 => grp_PoolLayer_fu_363_poollayer_output_val_V_address0,
        poollayer_output_val_V_ce0 => grp_PoolLayer_fu_363_poollayer_output_val_V_ce0,
        poollayer_output_val_V_we0 => grp_PoolLayer_fu_363_poollayer_output_val_V_we0,
        poollayer_output_val_V_d0 => grp_PoolLayer_fu_363_poollayer_output_val_V_d0);

    grp_PoolLayer_1_fu_369 : component PoolLayer_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_PoolLayer_1_fu_369_ap_start,
        ap_done => grp_PoolLayer_1_fu_369_ap_done,
        ap_idle => grp_PoolLayer_1_fu_369_ap_idle,
        ap_ready => grp_PoolLayer_1_fu_369_ap_ready,
        input_val_V_address0 => grp_PoolLayer_1_fu_369_input_val_V_address0,
        input_val_V_ce0 => grp_PoolLayer_1_fu_369_input_val_V_ce0,
        input_val_V_q0 => convlayer2_output_va_q0,
        poollayer_output_val_V_address0 => grp_PoolLayer_1_fu_369_poollayer_output_val_V_address0,
        poollayer_output_val_V_ce0 => grp_PoolLayer_1_fu_369_poollayer_output_val_V_ce0,
        poollayer_output_val_V_we0 => grp_PoolLayer_1_fu_369_poollayer_output_val_V_we0,
        poollayer_output_val_V_d0 => grp_PoolLayer_1_fu_369_poollayer_output_val_V_d0);

    CNN_Core_uitofp_3qcK_U176 : component CNN_Core_uitofp_3qcK
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp32_V_1_reg_742,
        ce => ap_const_logic_1,
        dout => grp_fu_375_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_i_i_fu_406_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state5);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_i_i_fu_406_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state19) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state19))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state19);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_CconLayer_fu_353_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_CconLayer_fu_353_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    grp_CconLayer_fu_353_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_CconLayer_fu_353_ap_ready = ap_const_logic_1)) then 
                    grp_CconLayer_fu_353_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ConvLayer_1_fu_317_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ConvLayer_1_fu_317_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_i_i_fu_406_p2 = ap_const_lv1_0))) then 
                    grp_ConvLayer_1_fu_317_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ConvLayer_1_fu_317_ap_ready = ap_const_logic_1)) then 
                    grp_ConvLayer_1_fu_317_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ConvLayer_fu_335_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ConvLayer_fu_335_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_ConvLayer_fu_335_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ConvLayer_fu_335_ap_ready = ap_const_logic_1)) then 
                    grp_ConvLayer_fu_335_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_PoolLayer_1_fu_369_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_PoolLayer_1_fu_369_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    grp_PoolLayer_1_fu_369_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_PoolLayer_1_fu_369_ap_ready = ap_const_logic_1)) then 
                    grp_PoolLayer_1_fu_369_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_PoolLayer_fu_363_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_PoolLayer_fu_363_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_PoolLayer_fu_363_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_PoolLayer_fu_363_ap_ready = ap_const_logic_1)) then 
                    grp_PoolLayer_fu_363_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_i3925_i_reg_305_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_i_i_i_reg_708 = ap_const_lv1_0))) then 
                i_0_i_i3925_i_reg_305 <= i_1_reg_717;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                i_0_i_i3925_i_reg_305 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;

    i_0_i_i_i_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_282_i_fu_396_p2 = ap_const_lv1_1))) then 
                i_0_i_i_i_reg_260 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_0_i_i_i_reg_260 <= i_reg_669;
            end if; 
        end if;
    end process;

    j_0_i_i_i_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_i_i_fu_406_p2 = ap_const_lv1_1))) then 
                j_0_i_i_i_reg_271 <= ap_const_lv5_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_117_i_i_fu_451_p2 = ap_const_lv1_1))) then 
                j_0_i_i_i_reg_271 <= j_fu_456_p2;
            end if; 
        end if;
    end process;

    outputlayer_label_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_i_i_i_reg_708 = ap_const_lv1_0))) then 
                outputlayer_label_reg_282 <= sel_SEBB_fu_503_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                outputlayer_label_reg_282 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    outputlayer_score_V_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_i_i_i_reg_708 = ap_const_lv1_0))) then 
                outputlayer_score_V_reg_295 <= input_V_load_1_i_i_o_fu_511_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                outputlayer_score_V_reg_295 <= cconlayer_output_V_q0;
            end if; 
        end if;
    end process;

    tmp_269_i_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (input_cols_empty_n = ap_const_logic_0) or (input_rows_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tmp_269_i_reg_238 <= ap_const_lv3_0;
            elsif (((tmp_272_i_fu_384_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                tmp_269_i_reg_238 <= tmp_270_i_fu_378_p2;
            end if; 
        end if;
    end process;

    tmp_279_i_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_272_i_fu_384_p2 = ap_const_lv1_1))) then 
                tmp_279_i_reg_249 <= ap_const_lv4_0;
            elsif (((tmp_282_i_fu_396_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                tmp_279_i_reg_249 <= tmp_280_i_fu_390_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                exitcond_i_i_i_reg_708 <= exitcond_i_i_i_fu_476_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_i_i_i_fu_476_p2 = ap_const_lv1_0))) then
                i_1_reg_717 <= i_1_fu_487_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_reg_669 <= i_fu_411_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (input_cols_empty_n = ap_const_logic_0) or (input_rows_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                input_cols_read_reg_644 <= input_cols_dout;
                input_rows_read_reg_639 <= input_rows_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                is_neg_reg_737 <= outputlayer_score_V_reg_295(31 downto 31);
                tmp32_V_1_reg_742 <= tmp32_V_1_fu_565_p2;
                tmp_286_i_reg_732 <= tmp_286_i_fu_519_p2;
                tmp_5_reg_747 <= tmp_5_fu_571_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_286_i_reg_732 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                p_Result_i_reg_757 <= tmp32_V_fu_575_p1(30 downto 23);
                tmp32_V_reg_752 <= tmp32_V_fu_575_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_117_i_i_reg_679 <= tmp_117_i_i_fu_451_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_i_i_fu_406_p2 = ap_const_lv1_1))) then
                    tmp_2_reg_674(10 downto 2) <= tmp_2_fu_441_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_117_i_i_fu_451_p2 = ap_const_lv1_1))) then
                tmp_3_cast_reg_688 <= tmp_3_cast_fu_471_p1;
            end if;
        end if;
    end process;
    tmp_2_reg_674(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, input_rows_empty_n, input_cols_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_i_i_fu_406_p2, ap_CS_fsm_state4, tmp_117_i_i_fu_451_p2, ap_enable_reg_pp0_iter0, exitcond_i_i_i_fu_476_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, grp_ConvLayer_1_fu_317_ap_done, grp_ConvLayer_fu_335_ap_done, grp_CconLayer_fu_353_ap_done, grp_PoolLayer_fu_363_ap_done, grp_PoolLayer_1_fu_369_ap_done, tmp_272_i_fu_384_p2, tmp_282_i_fu_396_p2, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state10, ap_CS_fsm_state14)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (input_cols_empty_n = ap_const_logic_0) or (input_rows_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_272_i_fu_384_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_282_i_fu_396_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_i_i_fu_406_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_117_i_i_fu_451_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_117_i_i_fu_451_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state8 => 
                if (((grp_ConvLayer_1_fu_317_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_PoolLayer_fu_363_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((grp_ConvLayer_fu_335_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((grp_PoolLayer_1_fu_369_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((grp_CconLayer_fu_353_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_i_i_i_fu_476_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_i_i_i_fu_476_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(17);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state13 <= ap_CS_fsm(11);
    ap_CS_fsm_state14 <= ap_CS_fsm(12);
    ap_CS_fsm_state15 <= ap_CS_fsm(13);
    ap_CS_fsm_state16 <= ap_CS_fsm(14);
    ap_CS_fsm_state17 <= ap_CS_fsm(15);
    ap_CS_fsm_state18 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(18);
    ap_CS_fsm_state22 <= ap_CS_fsm(19);
    ap_CS_fsm_state23 <= ap_CS_fsm(20);
    ap_CS_fsm_state24 <= ap_CS_fsm(21);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, input_rows_empty_n, input_cols_empty_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (input_cols_empty_n = ap_const_logic_0) or (input_rows_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state19_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(tmp_117_i_i_fu_451_p2)
    begin
        if ((tmp_117_i_i_fu_451_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state19_assign_proc : process(exitcond_i_i_i_fu_476_p2)
    begin
        if ((exitcond_i_i_i_fu_476_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state19 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_i_i3925_i_phi_fu_309_p4_assign_proc : process(i_0_i_i3925_i_reg_305, exitcond_i_i_i_reg_708, ap_CS_fsm_pp1_stage0, i_1_reg_717, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_i_i_i_reg_708 = ap_const_lv1_0))) then 
            ap_phi_mux_i_0_i_i3925_i_phi_fu_309_p4 <= i_1_reg_717;
        else 
            ap_phi_mux_i_0_i_i3925_i_phi_fu_309_p4 <= i_0_i_i3925_i_reg_305;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    cconlayer_output_V_address0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, grp_CconLayer_fu_353_cconlayer_output_V_address0, ap_block_pp1_stage0, ap_CS_fsm_state16, tmp_i3926_i_fu_482_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            cconlayer_output_V_address0 <= tmp_i3926_i_fu_482_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            cconlayer_output_V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            cconlayer_output_V_address0 <= grp_CconLayer_fu_353_cconlayer_output_V_address0;
        else 
            cconlayer_output_V_address0 <= "XXXX";
        end if; 
    end process;


    cconlayer_output_V_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, grp_CconLayer_fu_353_cconlayer_output_V_ce0, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            cconlayer_output_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            cconlayer_output_V_ce0 <= grp_CconLayer_fu_353_cconlayer_output_V_ce0;
        else 
            cconlayer_output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cconlayer_output_V_we0_assign_proc : process(grp_CconLayer_fu_353_cconlayer_output_V_we0, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            cconlayer_output_V_we0 <= grp_CconLayer_fu_353_cconlayer_output_V_we0;
        else 
            cconlayer_output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    convlayer1_output_va_address0_assign_proc : process(grp_ConvLayer_1_fu_317_convlayer_output_val_V_address0, grp_PoolLayer_fu_363_input_val_V_address0, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            convlayer1_output_va_address0 <= grp_PoolLayer_fu_363_input_val_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            convlayer1_output_va_address0 <= grp_ConvLayer_1_fu_317_convlayer_output_val_V_address0;
        else 
            convlayer1_output_va_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    convlayer1_output_va_ce0_assign_proc : process(grp_ConvLayer_1_fu_317_convlayer_output_val_V_ce0, grp_PoolLayer_fu_363_input_val_V_ce0, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            convlayer1_output_va_ce0 <= grp_PoolLayer_fu_363_input_val_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            convlayer1_output_va_ce0 <= grp_ConvLayer_1_fu_317_convlayer_output_val_V_ce0;
        else 
            convlayer1_output_va_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    convlayer1_output_va_we0_assign_proc : process(grp_ConvLayer_1_fu_317_convlayer_output_val_V_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            convlayer1_output_va_we0 <= grp_ConvLayer_1_fu_317_convlayer_output_val_V_we0;
        else 
            convlayer1_output_va_we0 <= ap_const_logic_0;
        end if; 
    end process;


    convlayer2_output_va_address0_assign_proc : process(grp_ConvLayer_fu_335_convlayer_output_val_V_address0, grp_PoolLayer_1_fu_369_input_val_V_address0, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            convlayer2_output_va_address0 <= grp_PoolLayer_1_fu_369_input_val_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            convlayer2_output_va_address0 <= grp_ConvLayer_fu_335_convlayer_output_val_V_address0;
        else 
            convlayer2_output_va_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    convlayer2_output_va_ce0_assign_proc : process(grp_ConvLayer_fu_335_convlayer_output_val_V_ce0, grp_PoolLayer_1_fu_369_input_val_V_ce0, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            convlayer2_output_va_ce0 <= grp_PoolLayer_1_fu_369_input_val_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            convlayer2_output_va_ce0 <= grp_ConvLayer_fu_335_convlayer_output_val_V_ce0;
        else 
            convlayer2_output_va_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    convlayer2_output_va_we0_assign_proc : process(grp_ConvLayer_fu_335_convlayer_output_val_V_we0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            convlayer2_output_va_we0 <= grp_ConvLayer_fu_335_convlayer_output_val_V_we0;
        else 
            convlayer2_output_va_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i_i_i_fu_476_p2 <= "1" when (ap_phi_mux_i_0_i_i3925_i_phi_fu_309_p4 = ap_const_lv4_A) else "0";
    f_fu_627_p1 <= p_Result_1_fu_616_p5;
    grp_CconLayer_fu_353_ap_start <= grp_CconLayer_fu_353_ap_start_reg;
    grp_ConvLayer_1_fu_317_ap_start <= grp_ConvLayer_1_fu_317_ap_start_reg;
    grp_ConvLayer_fu_335_ap_start <= grp_ConvLayer_fu_335_ap_start_reg;
    grp_PoolLayer_1_fu_369_ap_start <= grp_PoolLayer_1_fu_369_ap_start_reg;
    grp_PoolLayer_fu_363_ap_start <= grp_PoolLayer_fu_363_ap_start_reg;
    i_0_i_i3925_cast_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i3925_i_reg_305),32));
    i_0_i_i_cast_cast_i_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i_i_reg_260),6));
    i_1_fu_487_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_i_i3925_i_phi_fu_309_p4) + unsigned(ap_const_lv4_1));
    i_fu_411_p2 <= std_logic_vector(unsigned(i_0_i_i_i_reg_260) + unsigned(ap_const_lv5_1));
    input_V_load_1_i_i_o_fu_511_p3 <= 
        cconlayer_output_V_q0 when (tmp_i3927_i_fu_497_p2(0) = '1') else 
        outputlayer_score_V_reg_295;

    input_cols_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, input_cols_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_cols_blk_n <= input_cols_empty_n;
        else 
            input_cols_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_cols_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, input_rows_empty_n, input_cols_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (input_cols_empty_n = ap_const_logic_0) or (input_rows_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_cols_read <= ap_const_logic_1;
        else 
            input_cols_read <= ap_const_logic_0;
        end if; 
    end process;


    input_rows_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, input_rows_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_rows_blk_n <= input_rows_empty_n;
        else 
            input_rows_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_rows_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, input_rows_empty_n, input_cols_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (input_cols_empty_n = ap_const_logic_0) or (input_rows_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_rows_read <= ap_const_logic_1;
        else 
            input_rows_read <= ap_const_logic_0;
        end if; 
    end process;

    input_val_V_address0 <= tmp_3_cast_fu_471_p1(10 - 1 downto 0);

    input_val_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_val_V_ce0 <= ap_const_logic_1;
        else 
            input_val_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    inputlayer_output_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_3_cast_reg_688, ap_enable_reg_pp0_iter1, grp_ConvLayer_1_fu_317_input_0_val_V_address0, ap_CS_fsm_state8, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inputlayer_output_0_address0 <= tmp_3_cast_reg_688(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            inputlayer_output_0_address0 <= grp_ConvLayer_1_fu_317_input_0_val_V_address0;
        else 
            inputlayer_output_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    inputlayer_output_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, grp_ConvLayer_1_fu_317_input_0_val_V_ce0, ap_CS_fsm_state8)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            inputlayer_output_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            inputlayer_output_0_ce0 <= grp_ConvLayer_1_fu_317_input_0_val_V_ce0;
        else 
            inputlayer_output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    inputlayer_output_0_we0_assign_proc : process(tmp_117_i_i_reg_679, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_117_i_i_reg_679 = ap_const_lv1_1))) then 
            inputlayer_output_0_we0 <= ap_const_logic_1;
        else 
            inputlayer_output_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    is_neg_fu_525_p3 <= outputlayer_score_V_reg_295(31 downto 31);
    j_0_i_i_cast_cast_i_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_i_i_reg_271),6));
    j_fu_456_p2 <= std_logic_vector(unsigned(j_0_i_i_i_reg_271) + unsigned(ap_const_lv5_1));
    label_r <= outputlayer_label_reg_282;

    label_r_ap_vld_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            label_r_ap_vld <= ap_const_logic_1;
        else 
            label_r_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    
    num_zeros_fu_557_p3_proc : process(p_Result_s_fu_547_p4)
    begin
        num_zeros_fu_557_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_s_fu_547_p4(i) = '1' then
                num_zeros_fu_557_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    outputlayer_score_V_1_fu_539_p3 <= 
        tmp_287_i_fu_533_p2 when (is_neg_fu_525_p3(0) = '1') else 
        outputlayer_score_V_reg_295;
    p_Repl2_7_trunc_i_fu_603_p2 <= std_logic_vector(unsigned(tmp_186_i_fu_594_p2) + unsigned(tmp_187_i_fu_599_p1));
    p_Result_1_fu_616_p5 <= (tmp_188_i_fu_609_p3 & tmp32_V_reg_752(22 downto 0));
    
    p_Result_s_fu_547_p4_proc : process(outputlayer_score_V_1_fu_539_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_s_fu_547_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := outputlayer_score_V_1_fu_539_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_s_fu_547_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_s_fu_547_p4_i) := outputlayer_score_V_1_fu_539_p3(32-1-p_Result_s_fu_547_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_547_p4 <= resvalue(32-1 downto 0);
    end process;

    p_shl1_cast_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_429_p3),11));
    p_shl_cast_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_417_p3),11));

    poollayer1_output_va_address0_assign_proc : process(grp_ConvLayer_fu_335_input_val_V_address0, grp_PoolLayer_fu_363_poollayer_output_val_V_address0, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            poollayer1_output_va_address0 <= grp_PoolLayer_fu_363_poollayer_output_val_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            poollayer1_output_va_address0 <= grp_ConvLayer_fu_335_input_val_V_address0;
        else 
            poollayer1_output_va_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    poollayer1_output_va_ce0_assign_proc : process(grp_ConvLayer_fu_335_input_val_V_ce0, grp_PoolLayer_fu_363_poollayer_output_val_V_ce0, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            poollayer1_output_va_ce0 <= grp_PoolLayer_fu_363_poollayer_output_val_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            poollayer1_output_va_ce0 <= grp_ConvLayer_fu_335_input_val_V_ce0;
        else 
            poollayer1_output_va_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    poollayer1_output_va_we0_assign_proc : process(grp_PoolLayer_fu_363_poollayer_output_val_V_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            poollayer1_output_va_we0 <= grp_PoolLayer_fu_363_poollayer_output_val_V_we0;
        else 
            poollayer1_output_va_we0 <= ap_const_logic_0;
        end if; 
    end process;


    poollayer2_output_va_address0_assign_proc : process(grp_CconLayer_fu_353_input_val_V_address0, grp_PoolLayer_1_fu_369_poollayer_output_val_V_address0, ap_CS_fsm_state16, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            poollayer2_output_va_address0 <= grp_PoolLayer_1_fu_369_poollayer_output_val_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            poollayer2_output_va_address0 <= grp_CconLayer_fu_353_input_val_V_address0;
        else 
            poollayer2_output_va_address0 <= "XXXXXXXX";
        end if; 
    end process;


    poollayer2_output_va_ce0_assign_proc : process(grp_CconLayer_fu_353_input_val_V_ce0, grp_PoolLayer_1_fu_369_poollayer_output_val_V_ce0, ap_CS_fsm_state16, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            poollayer2_output_va_ce0 <= grp_PoolLayer_1_fu_369_poollayer_output_val_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            poollayer2_output_va_ce0 <= grp_CconLayer_fu_353_input_val_V_ce0;
        else 
            poollayer2_output_va_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    poollayer2_output_va_we0_assign_proc : process(grp_PoolLayer_1_fu_369_poollayer_output_val_V_we0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            poollayer2_output_va_we0 <= grp_PoolLayer_1_fu_369_poollayer_output_val_V_we0;
        else 
            poollayer2_output_va_we0 <= ap_const_logic_0;
        end if; 
    end process;

    score <= 
        ap_const_lv32_0 when (tmp_286_i_reg_732(0) = '1') else 
        f_fu_627_p1;

    score_ap_vld_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            score_ap_vld <= ap_const_logic_1;
        else 
            score_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sel_SEBB_fu_503_p3 <= 
        i_0_i_i3925_cast_fu_493_p1 when (tmp_i3927_i_fu_497_p2(0) = '1') else 
        outputlayer_label_reg_282;
    tmp32_V_1_fu_565_p2 <= std_logic_vector(shift_left(unsigned(outputlayer_score_V_1_fu_539_p3),to_integer(unsigned('0' & num_zeros_fu_557_p3(31-1 downto 0)))));
    tmp32_V_fu_575_p1 <= grp_fu_375_p1;
    tmp_117_i_i_fu_451_p2 <= "1" when (signed(j_0_i_i_cast_cast_i_fu_447_p1) < signed(input_cols_read_reg_644)) else "0";
    tmp_118_i_i_cast_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_i_i_reg_271),11));
    tmp_186_i_fu_594_p2 <= std_logic_vector(signed(ap_const_lv8_8E) - signed(tmp_5_reg_747));
    tmp_187_i_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_288_i_fu_589_p2),8));
    tmp_188_i_fu_609_p3 <= (is_neg_reg_737 & p_Repl2_7_trunc_i_fu_603_p2);
    tmp_1_fu_429_p3 <= (i_0_i_i_i_reg_260 & ap_const_lv2_0);
    tmp_270_i_fu_378_p2 <= std_logic_vector(unsigned(tmp_269_i_reg_238) + unsigned(ap_const_lv3_1));
    tmp_272_i_fu_384_p2 <= "1" when (tmp_269_i_reg_238 = ap_const_lv3_5) else "0";
    tmp_280_i_fu_390_p2 <= std_logic_vector(unsigned(tmp_279_i_reg_249) + unsigned(ap_const_lv4_1));
    tmp_282_i_fu_396_p2 <= "1" when (tmp_279_i_reg_249 = ap_const_lv4_B) else "0";
    tmp_286_i_fu_519_p2 <= "1" when (outputlayer_score_V_reg_295 = ap_const_lv32_0) else "0";
    tmp_287_i_fu_533_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(outputlayer_score_V_reg_295));
    tmp_288_i_fu_589_p2 <= "0" when (p_Result_i_reg_757 = ap_const_lv8_9E) else "1";
    tmp_2_fu_441_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_425_p1) - unsigned(p_shl1_cast_fu_437_p1));
        tmp_3_cast_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_466_p2),64));

    tmp_3_fu_466_p2 <= std_logic_vector(unsigned(tmp_2_reg_674) + unsigned(tmp_118_i_i_cast_fu_462_p1));
    tmp_5_fu_571_p1 <= num_zeros_fu_557_p3(8 - 1 downto 0);
    tmp_fu_417_p3 <= (i_0_i_i_i_reg_260 & ap_const_lv5_0);
    tmp_i3926_i_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_0_i_i3925_i_phi_fu_309_p4),64));
    tmp_i3927_i_fu_497_p2 <= "1" when (signed(cconlayer_output_V_q0) > signed(outputlayer_score_V_reg_295)) else "0";
    tmp_i_i_fu_406_p2 <= "1" when (signed(i_0_i_i_cast_cast_i_fu_402_p1) < signed(input_rows_read_reg_639)) else "0";
end behav;
