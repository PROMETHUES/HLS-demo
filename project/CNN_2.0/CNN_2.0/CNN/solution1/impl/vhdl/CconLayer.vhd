-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CconLayer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_val_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_val_V_ce0 : OUT STD_LOGIC;
    input_val_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cconlayer_output_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    cconlayer_output_V_ce0 : OUT STD_LOGIC;
    cconlayer_output_V_we0 : OUT STD_LOGIC;
    cconlayer_output_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of CconLayer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000100000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000001000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000010000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000100000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000001000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000010000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000100000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000001000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000010000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000100000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000001000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000010000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000100000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (37 downto 0) := "00000000001000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (37 downto 0) := "00000000010000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (37 downto 0) := "00000000100000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (37 downto 0) := "00000001000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (37 downto 0) := "00000010000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (37 downto 0) := "00000100000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (37 downto 0) := "00001000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (37 downto 0) := "00010000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (37 downto 0) := "00100000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (37 downto 0) := "01000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (37 downto 0) := "10000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_C0 : STD_LOGIC_VECTOR (7 downto 0) := "11000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv31_7FFFFFFF : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111111111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv31_1F : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000011111";
    constant ap_const_lv6_21 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_9E : STD_LOGIC_VECTOR (7 downto 0) := "10011110";
    constant ap_const_lv8_70 : STD_LOGIC_VECTOR (7 downto 0) := "01110000";
    constant ap_const_lv8_6F : STD_LOGIC_VECTOR (7 downto 0) := "01101111";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_10 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_const_lv12_FF0 : STD_LOGIC_VECTOR (11 downto 0) := "111111110000";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cconlayer_k_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal cconlayer_k_V_ce0 : STD_LOGIC;
    signal cconlayer_k_V_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal cconlayer_b_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal cconlayer_b_V_ce0 : STD_LOGIC;
    signal cconlayer_b_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_reg_219 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_231 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond4_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_16_fu_281_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_16_reg_946 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_311_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_reg_951 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_956 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_14_fu_327_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal tmp_s_fu_390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_980 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_163_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_163_reg_990 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal is_neg_fu_425_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_neg_reg_995 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_52_fu_439_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_52_reg_1000 : STD_LOGIC_VECTOR (31 downto 0);
    signal msb_idx_fu_480_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal msb_idx_reg_1006 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal msb_idx_2_fu_498_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal msb_idx_2_reg_1011 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_1016 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp32_V_fu_580_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_reg_1021 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_12_fu_598_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_12_reg_1026 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp32_V_15_fu_604_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_15_reg_1031 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal p_Result_s_206_reg_1036 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_fu_668_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_reg_1041 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_260_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_reg_1046 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_256_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_172_reg_1051 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_265_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_173_reg_1056 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_270_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_174_reg_1061 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal isneg_reg_1066 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal tmp_229_fu_705_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_229_reg_1072 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_178_fu_709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_178_reg_1077 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_179_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_179_reg_1083 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_180_fu_727_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_180_reg_1090 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_181_fu_733_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_181_reg_1095 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_182_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_182_reg_1100 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal p_temp_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_temp_ce0 : STD_LOGIC;
    signal p_temp_we0 : STD_LOGIC;
    signal p_temp_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Reshape_fu_242_ap_start : STD_LOGIC;
    signal grp_Reshape_fu_242_ap_done : STD_LOGIC;
    signal grp_Reshape_fu_242_ap_idle : STD_LOGIC;
    signal grp_Reshape_fu_242_ap_ready : STD_LOGIC;
    signal grp_Reshape_fu_242_src_val_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Reshape_fu_242_src_val_V_ce0 : STD_LOGIC;
    signal grp_Reshape_fu_242_dst_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Reshape_fu_242_dst_V_ce0 : STD_LOGIC;
    signal grp_Reshape_fu_242_dst_V_we0 : STD_LOGIC;
    signal grp_Reshape_fu_242_dst_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_207 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_Reshape_fu_242_ap_start_reg : STD_LOGIC := '0';
    signal tmp_191_fu_342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_192_fu_347_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_256_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_fu_253_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal p_shl_fu_287_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl2_fu_299_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_295_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl2_cast_fu_307_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_cast2_fu_317_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_190_fu_333_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_232_cast_fu_338_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_17_fu_360_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_17_fu_360_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_193_fu_366_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Val2_17_fu_360_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Val2_18_fu_374_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_162_fu_399_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_75_fu_403_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_161_fu_395_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_162_fu_399_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_75_fu_403_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_49_fu_407_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_46_cast_fu_413_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_239_cast_fu_433_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_48_cast_fu_447_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Result_s_fu_450_p4 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Result_8_fu_460_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_164_fu_468_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal num_zeros_fu_476_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_214_fu_490_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_213_fu_486_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_215_fu_506_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_216_fu_522_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_217_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_219_fu_538_p4 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_220_fu_548_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_218_fu_532_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_222_fu_562_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_221_fu_554_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_223_fu_570_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_224_fu_574_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_167_fu_584_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_243_cast_fu_589_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_9_fu_593_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_250_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_169_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp24_cast_cast_fu_626_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_226_fu_623_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_5_trunc_fu_634_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_171_fu_640_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_9_fu_647_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_16_op_fu_658_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_76_fu_664_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ireg_V_fu_675_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_fu_691_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_227_fu_679_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_176_fu_701_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_715_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_177_fu_745_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_10_fu_752_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_3_fu_756_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal sh_amt_fu_769_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_4_fu_762_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_231_fu_788_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal sh_amt_cast_fu_774_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_186_fu_804_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_187_fu_808_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_230_fu_778_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp1_fu_831_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_demorgan_fu_841_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_851_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_184_fu_782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp21_demorgan_fu_874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp4_fu_798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_fu_879_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_885_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_189_fu_825_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_assign_fu_818_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp5_fu_868_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_856_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_232_fu_814_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp2_fu_836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_899_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel_fu_891_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel7_fu_905_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond5_fu_913_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond6_fu_927_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel8_fu_919_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component Reshape IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_val_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        src_val_V_ce0 : OUT STD_LOGIC;
        src_val_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dst_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_V_ce0 : OUT STD_LOGIC;
        dst_V_we0 : OUT STD_LOGIC;
        dst_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_Core_uitofp_3qcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_Core_fptrunc_rcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_Core_fpext_32sc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component CNN_Core_fexp_32ntde IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_Core_dadd_64nudo IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component CNN_Core_ddiv_64nvdy IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component CconLayer_cconlayLf8 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component CconLayer_cconlayMgi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component CconLayer_p_temp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    cconlayer_k_V_U : component CconLayer_cconlayLf8
    generic map (
        DataWidth => 19,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cconlayer_k_V_address0,
        ce0 => cconlayer_k_V_ce0,
        q0 => cconlayer_k_V_q0);

    cconlayer_b_V_U : component CconLayer_cconlayMgi
    generic map (
        DataWidth => 16,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cconlayer_b_V_address0,
        ce0 => cconlayer_b_V_ce0,
        q0 => cconlayer_b_V_q0);

    p_temp_U : component CconLayer_p_temp
    generic map (
        DataWidth => 32,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_temp_address0,
        ce0 => p_temp_ce0,
        we0 => p_temp_we0,
        d0 => grp_Reshape_fu_242_dst_V_d0,
        q0 => p_temp_q0);

    grp_Reshape_fu_242 : component Reshape
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Reshape_fu_242_ap_start,
        ap_done => grp_Reshape_fu_242_ap_done,
        ap_idle => grp_Reshape_fu_242_ap_idle,
        ap_ready => grp_Reshape_fu_242_ap_ready,
        src_val_V_address0 => grp_Reshape_fu_242_src_val_V_address0,
        src_val_V_ce0 => grp_Reshape_fu_242_src_val_V_ce0,
        src_val_V_q0 => input_val_V_q0,
        dst_V_address0 => grp_Reshape_fu_242_dst_V_address0,
        dst_V_ce0 => grp_Reshape_fu_242_dst_V_ce0,
        dst_V_we0 => grp_Reshape_fu_242_dst_V_we0,
        dst_V_d0 => grp_Reshape_fu_242_dst_V_d0);

    CNN_Core_uitofp_3qcK_U165 : component CNN_Core_uitofp_3qcK
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp32_V_12_reg_1026,
        ce => ap_const_logic_1,
        dout => grp_fu_250_p1);

    CNN_Core_fptrunc_rcU_U166 : component CNN_Core_fptrunc_rcU
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_174_reg_1061,
        dout => res_fu_253_p1);

    CNN_Core_fpext_32sc4_U167 : component CNN_Core_fpext_32sc4
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => grp_fu_256_p0,
        dout => grp_fu_256_p1);

    CNN_Core_fexp_32ntde_U168 : component CNN_Core_fexp_32ntde
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => x_assign_reg_1041,
        ce => ap_const_logic_1,
        dout => grp_fu_260_p2);

    CNN_Core_dadd_64nudo_U169 : component CNN_Core_dadd_64nudo
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_172_reg_1051,
        din1 => ap_const_lv64_3FF0000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_265_p2);

    CNN_Core_ddiv_64nvdy_U170 : component CNN_Core_ddiv_64nvdy
    generic map (
        ID => 1,
        NUM_STAGE => 15,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_3FF0000000000000,
        din1 => tmp_173_reg_1056,
        ce => ap_const_logic_1,
        dout => grp_fu_270_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((exitcond4_fu_275_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((exitcond4_fu_275_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Reshape_fu_242_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Reshape_fu_242_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_Reshape_fu_242_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Reshape_fu_242_ap_ready = ap_const_logic_1)) then 
                    grp_Reshape_fu_242_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                i_reg_207 <= i_16_reg_946;
            elsif (((grp_Reshape_fu_242_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_207 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_fu_321_p2 = ap_const_lv1_0))) then 
                j_reg_231 <= j_14_fu_327_p2;
            elsif (((exitcond4_fu_275_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_reg_231 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_956 = ap_const_lv1_0))) then 
                p_Val2_s_reg_219 <= p_Val2_18_fu_374_p2(47 downto 16);
            elsif (((exitcond4_fu_275_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_Val2_s_reg_219 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_reg_956 <= exitcond_fu_321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_16_reg_946 <= i_16_fu_281_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_163_reg_990 = ap_const_lv1_0))) then
                icmp_reg_1016 <= icmp_fu_516_p2;
                msb_idx_2_reg_1011 <= msb_idx_2_fu_498_p3;
                msb_idx_reg_1006 <= msb_idx_fu_480_p2;
                tmp32_V_reg_1021 <= tmp32_V_fu_580_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                is_neg_reg_995 <= p_Val2_49_fu_407_p2(32 downto 32);
                p_Val2_52_reg_1000 <= p_Val2_52_fu_439_p3;
                tmp_163_reg_990 <= tmp_163_fu_419_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                isneg_reg_1066 <= ireg_V_fu_675_p1(63 downto 63);
                tmp_178_reg_1077 <= tmp_178_fu_709_p2;
                tmp_179_reg_1083 <= tmp_179_fu_721_p2;
                tmp_180_reg_1090 <= tmp_180_fu_727_p2;
                tmp_181_reg_1095 <= tmp_181_fu_733_p2;
                tmp_182_reg_1100 <= tmp_182_fu_739_p2;
                tmp_229_reg_1072 <= tmp_229_fu_705_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_163_reg_990 = ap_const_lv1_0))) then
                p_Result_s_206_reg_1036 <= tmp32_V_15_fu_604_p1(30 downto 23);
                tmp32_V_15_reg_1031 <= tmp32_V_15_fu_604_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_163_reg_990 = ap_const_lv1_0))) then
                tmp32_V_12_reg_1026 <= tmp32_V_12_fu_598_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                tmp_172_reg_1051 <= grp_fu_256_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                tmp_173_reg_1056 <= grp_fu_265_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                tmp_174_reg_1061 <= grp_fu_270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                tmp_i_i_reg_1046 <= grp_fu_260_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_275_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_reg_951(12 downto 6) <= tmp_fu_311_p2(12 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    tmp_s_reg_980(3 downto 0) <= tmp_s_fu_390_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                x_assign_reg_1041 <= x_assign_fu_668_p3;
            end if;
        end if;
    end process;
    tmp_reg_951(5 downto 0) <= "000000";
    tmp_s_reg_980(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond4_fu_275_p2, ap_CS_fsm_state3, exitcond_fu_321_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, grp_Reshape_fu_242_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_Reshape_fu_242_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond4_fu_275_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_fu_321_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_fu_321_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_fu_715_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(tmp_176_fu_701_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state13 <= ap_CS_fsm(11);
    ap_CS_fsm_state17 <= ap_CS_fsm(15);
    ap_CS_fsm_state18 <= ap_CS_fsm(16);
    ap_CS_fsm_state19 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(20);
    ap_CS_fsm_state23 <= ap_CS_fsm(21);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state37 <= ap_CS_fsm(35);
    ap_CS_fsm_state38 <= ap_CS_fsm(36);
    ap_CS_fsm_state39 <= ap_CS_fsm(37);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(exitcond_fu_321_p2)
    begin
        if ((exitcond_fu_321_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, exitcond4_fu_275_p2, ap_CS_fsm_state3)
    begin
        if ((((exitcond4_fu_275_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(exitcond4_fu_275_p2, ap_CS_fsm_state3)
    begin
        if (((exitcond4_fu_275_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cconlayer_b_V_address0 <= tmp_s_fu_390_p1(4 - 1 downto 0);

    cconlayer_b_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cconlayer_b_V_ce0 <= ap_const_logic_1;
        else 
            cconlayer_b_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cconlayer_k_V_address0 <= tmp_191_fu_342_p1(11 - 1 downto 0);

    cconlayer_k_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cconlayer_k_V_ce0 <= ap_const_logic_1;
        else 
            cconlayer_k_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cconlayer_output_V_address0 <= tmp_s_reg_980(4 - 1 downto 0);

    cconlayer_output_V_ce0_assign_proc : process(ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            cconlayer_output_V_ce0 <= ap_const_logic_1;
        else 
            cconlayer_output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cconlayer_output_V_d0 <= 
        newSel8_fu_919_p3 when (or_cond6_fu_927_p2(0) = '1') else 
        ap_const_lv32_0;

    cconlayer_output_V_we0_assign_proc : process(ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            cconlayer_output_V_we0 <= ap_const_logic_1;
        else 
            cconlayer_output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond4_fu_275_p2 <= "1" when (i_reg_207 = ap_const_lv4_A) else "0";
    exitcond_fu_321_p2 <= "1" when (j_reg_231 = ap_const_lv8_C0) else "0";
    exp_tmp_V_fu_691_p4 <= ireg_V_fu_675_p1(62 downto 52);
    grp_Reshape_fu_242_ap_start <= grp_Reshape_fu_242_ap_start_reg;

    grp_fu_256_p0_assign_proc : process(tmp_i_i_reg_1046, ap_CS_fsm_state18, ap_CS_fsm_state38, res_fu_253_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_256_p0 <= res_fu_253_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_256_p0 <= tmp_i_i_reg_1046;
        else 
            grp_fu_256_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_16_fu_281_p2 <= std_logic_vector(unsigned(i_reg_207) + unsigned(ap_const_lv4_1));
    icmp4_fu_798_p2 <= "1" when (tmp_231_fu_788_p4 = ap_const_lv7_0) else "0";
    icmp_fu_516_p2 <= "1" when (tmp_215_fu_506_p4 = ap_const_lv26_0) else "0";
    input_val_V_address0 <= grp_Reshape_fu_242_src_val_V_address0;
    input_val_V_ce0 <= grp_Reshape_fu_242_src_val_V_ce0;
    ireg_V_fu_675_p1 <= grp_fu_256_p1;
    is_neg_fu_425_p3 <= p_Val2_49_fu_407_p2(32 downto 32);
    j_14_fu_327_p2 <= std_logic_vector(unsigned(j_reg_231) + unsigned(ap_const_lv8_1));
    j_cast2_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_231),13));
    man_V_3_fu_756_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_10_fu_752_p1));
    man_V_4_fu_762_p3 <= 
        man_V_3_fu_756_p2 when (isneg_reg_1066(0) = '1') else 
        p_Result_10_fu_752_p1;
    msb_idx_2_fu_498_p3 <= 
        ap_const_lv31_0 when (tmp_214_fu_490_p3(0) = '1') else 
        tmp_213_fu_486_p1;
    msb_idx_fu_480_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(num_zeros_fu_476_p1));
    newSel7_fu_905_p3 <= 
        tmp_232_fu_814_p1 when (sel_tmp8_fu_856_p2(0) = '1') else 
        tmp_230_fu_778_p1;
    newSel8_fu_919_p3 <= 
        newSel_fu_891_p3 when (or_cond_fu_899_p2(0) = '1') else 
        newSel7_fu_905_p3;
    newSel_fu_891_p3 <= 
        tmp_189_fu_825_p2 when (sel_tmp3_fu_885_p2(0) = '1') else 
        this_assign_fu_818_p3;
    num_zeros_fu_476_p1 <= tmp_164_fu_468_p3(32 - 1 downto 0);
    or_cond5_fu_913_p2 <= (sel_tmp8_fu_856_p2 or sel_tmp2_fu_836_p2);
    or_cond6_fu_927_p2 <= (or_cond_fu_899_p2 or or_cond5_fu_913_p2);
    or_cond_fu_899_p2 <= (sel_tmp5_fu_868_p2 or sel_tmp3_fu_885_p2);
    p_Repl2_5_trunc_fu_634_p2 <= std_logic_vector(unsigned(tmp24_cast_cast_fu_626_p3) + unsigned(tmp_226_fu_623_p1));
    p_Result_10_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_177_fu_745_p3),54));
    p_Result_16_op_fu_658_p2 <= (p_Result_9_fu_647_p5 xor ap_const_lv32_80000000);
    p_Result_8_fu_460_p3 <= (ap_const_lv31_7FFFFFFF & p_Result_s_fu_450_p4);
    p_Result_9_fu_647_p5 <= (tmp_171_fu_640_p3 & tmp32_V_15_reg_1031(22 downto 0));
    
    p_Result_s_fu_450_p4_proc : process(p_Val2_48_cast_fu_447_p1)
    variable vlo_cpy : STD_LOGIC_VECTOR(33+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(33+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable p_Result_s_fu_450_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(33 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_20(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := p_Val2_48_cast_fu_447_p1;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(33-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(33-1-unsigned(ap_const_lv32_20(6-1 downto 0)));
            for p_Result_s_fu_450_p4_i in 0 to 33-1 loop
                v0_cpy(p_Result_s_fu_450_p4_i) := p_Val2_48_cast_fu_447_p1(33-1-p_Result_s_fu_450_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(33-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_450_p4 <= resvalue(33-1 downto 0);
    end process;

    p_Val2_17_fu_360_p0 <= cconlayer_k_V_q0;
    p_Val2_17_fu_360_p1 <= p_temp_q0;
    p_Val2_17_fu_360_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_17_fu_360_p0) * signed(p_Val2_17_fu_360_p1))), 48));
    p_Val2_18_fu_374_p2 <= std_logic_vector(unsigned(tmp_193_fu_366_p3) + unsigned(p_Val2_17_fu_360_p2));
    p_Val2_46_cast_fu_413_p2 <= std_logic_vector(signed(p_Val2_s_reg_219) + signed(tmp_75_fu_403_p1));
    p_Val2_48_cast_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_52_reg_1000),33));
    p_Val2_49_fu_407_p2 <= std_logic_vector(signed(tmp_161_fu_395_p1) + signed(tmp_162_fu_399_p1));
    p_Val2_52_fu_439_p3 <= 
        tmp_239_cast_fu_433_p2 when (is_neg_fu_425_p3(0) = '1') else 
        p_Val2_46_cast_fu_413_p2;
    p_shl2_cast_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_299_p3),13));
    p_shl2_fu_299_p3 <= (i_reg_207 & ap_const_lv6_0);
    p_shl_cast_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_287_p3),13));
    p_shl_fu_287_p3 <= (i_reg_207 & ap_const_lv8_0);

    p_temp_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, grp_Reshape_fu_242_dst_V_address0, ap_CS_fsm_state2, ap_block_pp0_stage0, tmp_192_fu_347_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_temp_address0 <= tmp_192_fu_347_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_temp_address0 <= grp_Reshape_fu_242_dst_V_address0;
        else 
            p_temp_address0 <= "XXXXXXXX";
        end if; 
    end process;


    p_temp_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, grp_Reshape_fu_242_dst_V_ce0, ap_CS_fsm_state2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_temp_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_temp_ce0 <= grp_Reshape_fu_242_dst_V_ce0;
        else 
            p_temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_temp_we0_assign_proc : process(grp_Reshape_fu_242_dst_V_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_temp_we0 <= grp_Reshape_fu_242_dst_V_we0;
        else 
            p_temp_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sel_tmp1_fu_831_p2 <= (tmp_178_reg_1077 xor ap_const_lv1_1);
    sel_tmp21_demorgan_fu_874_p2 <= (tmp_179_reg_1083 or sel_tmp6_demorgan_fu_841_p2);
    sel_tmp2_fu_836_p2 <= (tmp_182_reg_1100 and sel_tmp1_fu_831_p2);
    sel_tmp3_fu_885_p2 <= (sel_tmp9_fu_879_p2 and icmp4_fu_798_p2);
    sel_tmp5_fu_868_p2 <= (sel_tmp_fu_862_p2 and sel_tmp7_fu_851_p2);
    sel_tmp6_demorgan_fu_841_p2 <= (tmp_182_reg_1100 or tmp_178_reg_1077);
    sel_tmp6_fu_845_p2 <= (sel_tmp6_demorgan_fu_841_p2 xor ap_const_lv1_1);
    sel_tmp7_fu_851_p2 <= (tmp_179_reg_1083 and sel_tmp6_fu_845_p2);
    sel_tmp8_fu_856_p2 <= (tmp_184_fu_782_p2 and sel_tmp7_fu_851_p2);
    sel_tmp9_fu_879_p2 <= (sel_tmp21_demorgan_fu_874_p2 xor ap_const_lv1_1);
    sel_tmp_fu_862_p2 <= (tmp_184_fu_782_p2 xor ap_const_lv1_1);
        sh_amt_cast_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_769_p3),32));

    sh_amt_fu_769_p3 <= 
        tmp_180_reg_1090 when (tmp_179_reg_1083(0) = '1') else 
        tmp_181_reg_1095;
    this_assign_fu_818_p3 <= 
        ap_const_lv32_FFFFFFFF when (isneg_reg_1066(0) = '1') else 
        ap_const_lv32_0;
    tmp24_cast_cast_fu_626_p3 <= 
        ap_const_lv8_70 when (tmp_169_fu_618_p2(0) = '1') else 
        ap_const_lv8_6F;
    tmp32_V_12_fu_598_p3 <= 
        tmp32_V_9_fu_593_p2 when (icmp_reg_1016(0) = '1') else 
        tmp32_V_reg_1021;
    tmp32_V_15_fu_604_p1 <= grp_fu_250_p1;
    tmp32_V_9_fu_593_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_52_reg_1000),to_integer(unsigned('0' & tmp_243_cast_fu_589_p1(31-1 downto 0)))));
    tmp32_V_fu_580_p1 <= tmp_224_fu_574_p2(32 - 1 downto 0);
        tmp_161_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_219),33));

    tmp_162_fu_399_p0 <= cconlayer_b_V_q0;
        tmp_162_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_162_fu_399_p0),33));

    tmp_163_fu_419_p2 <= "1" when (p_Val2_49_fu_407_p2 = ap_const_lv33_0) else "0";
    
    tmp_164_fu_468_p3_proc : process(p_Result_8_fu_460_p3)
    begin
        tmp_164_fu_468_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_8_fu_460_p3(i) = '1' then
                tmp_164_fu_468_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    tmp_167_fu_584_p2 <= std_logic_vector(unsigned(ap_const_lv31_1F) - unsigned(msb_idx_2_reg_1011));
    tmp_169_fu_618_p2 <= "0" when (p_Result_s_206_reg_1036 = ap_const_lv8_9E) else "1";
    tmp_171_fu_640_p3 <= (is_neg_reg_995 & p_Repl2_5_trunc_fu_634_p2);
    tmp_176_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_fu_691_p4),12));
    tmp_177_fu_745_p3 <= (ap_const_lv1_1 & tmp_229_reg_1072);
    tmp_178_fu_709_p2 <= "1" when (tmp_227_fu_679_p1 = ap_const_lv63_0) else "0";
    tmp_179_fu_721_p2 <= "1" when (signed(F2_fu_715_p2) > signed(ap_const_lv12_10)) else "0";
    tmp_180_fu_727_p2 <= std_logic_vector(signed(ap_const_lv12_FF0) + signed(F2_fu_715_p2));
    tmp_181_fu_733_p2 <= std_logic_vector(unsigned(ap_const_lv12_10) - unsigned(F2_fu_715_p2));
    tmp_182_fu_739_p2 <= "1" when (F2_fu_715_p2 = ap_const_lv12_10) else "0";
    tmp_184_fu_782_p2 <= "1" when (unsigned(sh_amt_fu_769_p3) < unsigned(ap_const_lv12_36)) else "0";
    tmp_186_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_amt_cast_fu_774_p1),54));
    tmp_187_fu_808_p2 <= std_logic_vector(shift_right(signed(man_V_4_fu_762_p3),to_integer(unsigned('0' & tmp_186_fu_804_p1(31-1 downto 0)))));
    tmp_189_fu_825_p2 <= std_logic_vector(shift_left(unsigned(tmp_230_fu_778_p1),to_integer(unsigned('0' & sh_amt_cast_fu_774_p1(31-1 downto 0)))));
    tmp_190_fu_333_p2 <= std_logic_vector(unsigned(j_cast2_fu_317_p1) + unsigned(tmp_reg_951));
    tmp_191_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_232_cast_fu_338_p1),64));
    tmp_192_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_231),64));
    tmp_193_fu_366_p3 <= (p_Val2_s_reg_219 & ap_const_lv16_0);
    tmp_213_fu_486_p1 <= msb_idx_fu_480_p2(31 - 1 downto 0);
    tmp_214_fu_490_p3 <= msb_idx_fu_480_p2(31 downto 31);
    tmp_215_fu_506_p4 <= msb_idx_2_fu_498_p3(30 downto 5);
    tmp_216_fu_522_p1 <= msb_idx_2_fu_498_p3(6 - 1 downto 0);
    tmp_217_fu_526_p2 <= "1" when (unsigned(msb_idx_2_fu_498_p3) < unsigned(ap_const_lv31_1F)) else "0";
    tmp_218_fu_532_p2 <= std_logic_vector(signed(ap_const_lv6_21) + signed(tmp_216_fu_522_p1));
    
    tmp_219_fu_538_p4_proc : process(p_Val2_48_cast_fu_447_p1)
    variable vlo_cpy : STD_LOGIC_VECTOR(33+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(33+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable tmp_219_fu_538_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(33 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_20(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := p_Val2_48_cast_fu_447_p1;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(33-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(33-1-unsigned(ap_const_lv32_20(6-1 downto 0)));
            for tmp_219_fu_538_p4_i in 0 to 33-1 loop
                v0_cpy(tmp_219_fu_538_p4_i) := p_Val2_48_cast_fu_447_p1(33-1-tmp_219_fu_538_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(33-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_219_fu_538_p4 <= resvalue(33-1 downto 0);
    end process;

    tmp_220_fu_548_p2 <= (tmp_216_fu_522_p1 xor ap_const_lv6_3F);
    tmp_221_fu_554_p3 <= 
        tmp_219_fu_538_p4 when (tmp_217_fu_526_p2(0) = '1') else 
        p_Val2_48_cast_fu_447_p1;
    tmp_222_fu_562_p3 <= 
        tmp_220_fu_548_p2 when (tmp_217_fu_526_p2(0) = '1') else 
        tmp_218_fu_532_p2;
    tmp_223_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_222_fu_562_p3),33));
    tmp_224_fu_574_p2 <= std_logic_vector(shift_right(unsigned(tmp_221_fu_554_p3),to_integer(unsigned('0' & tmp_223_fu_570_p1(31-1 downto 0)))));
    tmp_226_fu_623_p1 <= msb_idx_reg_1006(8 - 1 downto 0);
    tmp_227_fu_679_p1 <= ireg_V_fu_675_p1(63 - 1 downto 0);
    tmp_229_fu_705_p1 <= ireg_V_fu_675_p1(52 - 1 downto 0);
    tmp_230_fu_778_p1 <= man_V_4_fu_762_p3(32 - 1 downto 0);
    tmp_231_fu_788_p4 <= sh_amt_fu_769_p3(11 downto 5);
        tmp_232_cast_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_190_fu_333_p2),32));

    tmp_232_fu_814_p1 <= tmp_187_fu_808_p2(32 - 1 downto 0);
    tmp_239_cast_fu_433_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_46_cast_fu_413_p2));
    tmp_243_cast_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_167_fu_584_p2),32));
    tmp_75_fu_403_p0 <= cconlayer_b_V_q0;
        tmp_75_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_75_fu_403_p0),32));

    tmp_76_fu_664_p1 <= p_Result_16_op_fu_658_p2;
    tmp_fu_311_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_295_p1) - unsigned(p_shl2_cast_fu_307_p1));
    tmp_s_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_207),64));
    x_assign_fu_668_p3 <= 
        ap_const_lv32_80000000 when (tmp_163_reg_990(0) = '1') else 
        tmp_76_fu_664_p1;
end behav;
