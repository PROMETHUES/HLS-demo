-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv11 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_val_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    src_val_V_ce0 : OUT STD_LOGIC;
    src_val_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    src_val_V_offset : IN STD_LOGIC_VECTOR (3 downto 0);
    dst_val_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    dst_val_V_ce0 : OUT STD_LOGIC;
    dst_val_V_we0 : OUT STD_LOGIC;
    dst_val_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Conv11 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal j_reg_144 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_208_cast_fu_163_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_208_cast_reg_442 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond4_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_14_fu_173_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_14_reg_451 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_211_cast_fu_188_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_211_cast_reg_456 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_461 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_194_fu_220_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_194_reg_466 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond5_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond5_reg_471 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_12_fu_232_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal LineBuffer_val_1_V_s_reg_485 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_cond_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_491 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_153_fu_268_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_153_reg_495 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal LineBuffer_val_1_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal LineBuffer_val_1_V_ce0 : STD_LOGIC;
    signal LineBuffer_val_1_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal LineBuffer_val_1_V_ce1 : STD_LOGIC;
    signal LineBuffer_val_1_V_we1 : STD_LOGIC;
    signal i_reg_133 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_214_cast_fu_252_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_151_fu_238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_218_cast_fu_415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal BlockBuffer_val_0_V_fu_72 : STD_LOGIC_VECTOR (31 downto 0);
    signal BlockBuffer_val_1_V_fu_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_191_fu_155_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_cast_fu_179_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_192_fu_183_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_148_fu_202_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_193_fu_212_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_149_cast_fu_208_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_151_cast_fu_243_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_195_fu_247_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_152_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_196_fu_288_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_388_0_1_fu_298_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal p_Val2_71_0_1_fu_280_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_3893_0_1_cast_ca_fu_310_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_388_0_1_cast_cas_fu_306_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal p_Val2_72_0_1_fu_314_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_70_fu_320_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_197_fu_338_p3 : STD_LOGIC_VECTOR (46 downto 0);
    signal p_Val2_71_1_fu_330_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_3893_1_cast_fu_350_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_388_1_fu_346_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Val2_72_1_fu_354_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_198_fu_368_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_71_1_1_fu_360_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_3893_1_1_cast_fu_386_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_388_1_1_fu_378_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Val2_72_1_1_fu_390_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_154_cast_fu_407_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_199_fu_410_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component Conv11_LineBufferJfO IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    LineBuffer_val_1_V_U : component Conv11_LineBufferJfO
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => LineBuffer_val_1_V_address0,
        ce0 => LineBuffer_val_1_V_ce0,
        q0 => LineBuffer_val_1_V_q0,
        address1 => LineBuffer_val_1_V_s_reg_485,
        ce1 => LineBuffer_val_1_V_ce1,
        we1 => LineBuffer_val_1_V_we1,
        d1 => src_val_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((exitcond4_fu_167_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((exitcond4_fu_167_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_reg_133 <= i_14_reg_451;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_133 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond5_fu_226_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_reg_144 <= j_12_fu_232_p2;
            elsif (((exitcond4_fu_167_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_144 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond5_reg_471 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                BlockBuffer_val_0_V_fu_72 <= LineBuffer_val_1_V_q0;
                BlockBuffer_val_1_V_fu_76 <= src_val_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond5_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                LineBuffer_val_1_V_s_reg_485 <= tmp_151_fu_238_p1(3 - 1 downto 0);
                or_cond_reg_491 <= or_cond_fu_263_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond5_reg_471 <= exitcond5_fu_226_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_14_reg_451 <= i_14_fu_173_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_fu_263_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond5_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_153_reg_495 <= tmp_153_fu_268_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_167_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_194_reg_466 <= tmp_194_fu_220_p2;
                    tmp_211_cast_reg_456(10 downto 3) <= tmp_211_cast_fu_188_p3(10 downto 3);
                tmp_s_reg_461 <= tmp_s_fu_196_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    tmp_208_cast_reg_442(6 downto 3) <= tmp_208_cast_fu_163_p1(6 downto 3);
            end if;
        end if;
    end process;
    tmp_208_cast_reg_442(2 downto 0) <= "000";
    tmp_208_cast_reg_442(7) <= '0';
    tmp_211_cast_reg_456(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond4_fu_167_p2, ap_CS_fsm_state2, exitcond5_fu_226_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond4_fu_167_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond5_fu_226_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond5_fu_226_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    LineBuffer_val_1_V_address0 <= tmp_151_fu_238_p1(3 - 1 downto 0);

    LineBuffer_val_1_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            LineBuffer_val_1_V_ce0 <= ap_const_logic_1;
        else 
            LineBuffer_val_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    LineBuffer_val_1_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            LineBuffer_val_1_V_ce1 <= ap_const_logic_1;
        else 
            LineBuffer_val_1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    LineBuffer_val_1_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            LineBuffer_val_1_V_we1 <= ap_const_logic_1;
        else 
            LineBuffer_val_1_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond5_fu_226_p2)
    begin
        if ((exitcond5_fu_226_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, exitcond4_fu_167_p2, ap_CS_fsm_state2)
    begin
        if ((((exitcond4_fu_167_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(exitcond4_fu_167_p2, ap_CS_fsm_state2)
    begin
        if (((exitcond4_fu_167_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    dst_val_V_address0 <= tmp_218_cast_fu_415_p1(6 - 1 downto 0);

    dst_val_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            dst_val_V_ce0 <= ap_const_logic_1;
        else 
            dst_val_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dst_val_V_d0 <= p_Val2_72_1_1_fu_390_p2(47 downto 16);

    dst_val_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, or_cond_reg_491, ap_enable_reg_pp0_iter1)
    begin
        if (((or_cond_reg_491 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            dst_val_V_we0 <= ap_const_logic_1;
        else 
            dst_val_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond4_fu_167_p2 <= "1" when (i_reg_133 = ap_const_lv4_8) else "0";
    exitcond5_fu_226_p2 <= "1" when (j_reg_144 = ap_const_lv4_8) else "0";
    i_14_fu_173_p2 <= std_logic_vector(unsigned(i_reg_133) + unsigned(ap_const_lv4_1));
    j_12_fu_232_p2 <= std_logic_vector(unsigned(j_reg_144) + unsigned(ap_const_lv4_1));
    or_cond_fu_263_p2 <= (tmp_s_reg_461 and tmp_152_fu_257_p2);
    p_Val2_71_0_1_fu_280_p3 <= (LineBuffer_val_1_V_q0 & ap_const_lv14_0);
    p_Val2_71_1_1_fu_360_p3 <= (src_val_V_q0 & ap_const_lv14_0);
    p_Val2_71_1_fu_330_p3 <= (BlockBuffer_val_1_V_fu_76 & ap_const_lv14_0);
    p_Val2_72_0_1_fu_314_p2 <= std_logic_vector(signed(tmp_3893_0_1_cast_ca_fu_310_p1) + signed(tmp_388_0_1_cast_cas_fu_306_p1));
    p_Val2_72_1_1_fu_390_p2 <= std_logic_vector(signed(tmp_3893_1_1_cast_fu_386_p1) + signed(tmp_388_1_1_fu_378_p3));
    p_Val2_72_1_fu_354_p2 <= std_logic_vector(signed(tmp_3893_1_cast_fu_350_p1) + signed(tmp_388_1_fu_346_p1));
    src_val_V_address0 <= tmp_214_cast_fu_252_p1(10 - 1 downto 0);

    src_val_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_val_V_ce0 <= ap_const_logic_1;
        else 
            src_val_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_148_fu_202_p2 <= std_logic_vector(unsigned(i_reg_133) + unsigned(ap_const_lv4_F));
        tmp_149_cast_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_148_fu_202_p2),7));

    tmp_151_cast_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_144),11));
    tmp_151_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_144),64));
    tmp_152_fu_257_p2 <= "0" when (j_reg_144 = ap_const_lv4_0) else "1";
    tmp_153_fu_268_p2 <= std_logic_vector(unsigned(j_reg_144) + unsigned(ap_const_lv4_F));
    tmp_154_cast_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_153_reg_495),7));
    tmp_191_fu_155_p3 <= (src_val_V_offset & ap_const_lv3_0);
    tmp_192_fu_183_p2 <= std_logic_vector(unsigned(tmp_208_cast_reg_442) + unsigned(tmp_cast_fu_179_p1));
    tmp_193_fu_212_p3 <= (tmp_148_fu_202_p2 & ap_const_lv3_0);
    tmp_194_fu_220_p2 <= std_logic_vector(unsigned(tmp_193_fu_212_p3) - unsigned(tmp_149_cast_fu_208_p1));
    tmp_195_fu_247_p2 <= std_logic_vector(unsigned(tmp_211_cast_reg_456) + unsigned(tmp_151_cast_fu_243_p1));
    tmp_196_fu_288_p4 <= BlockBuffer_val_0_V_fu_72(31 downto 2);
    tmp_197_fu_338_p3 <= (tmp_70_fu_320_p4 & ap_const_lv16_0);
    tmp_198_fu_368_p4 <= p_Val2_72_1_fu_354_p2(47 downto 16);
    tmp_199_fu_410_p2 <= std_logic_vector(unsigned(tmp_194_reg_466) + unsigned(tmp_154_cast_fu_407_p1));
    tmp_208_cast_fu_163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_191_fu_155_p3),8));
    tmp_211_cast_fu_188_p3 <= (tmp_192_fu_183_p2 & ap_const_lv3_0);
    tmp_214_cast_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_195_fu_247_p2),64));
        tmp_218_cast_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_199_fu_410_p2),64));

        tmp_388_0_1_cast_cas_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_388_0_1_fu_298_p3),47));

    tmp_388_0_1_fu_298_p3 <= (tmp_196_fu_288_p4 & ap_const_lv16_0);
    tmp_388_1_1_fu_378_p3 <= (tmp_198_fu_368_p4 & ap_const_lv16_0);
        tmp_388_1_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_197_fu_338_p3),48));

        tmp_3893_0_1_cast_ca_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_71_0_1_fu_280_p3),47));

        tmp_3893_1_1_cast_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_71_1_1_fu_360_p3),48));

        tmp_3893_1_cast_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_71_1_fu_330_p3),48));

    tmp_70_fu_320_p4 <= p_Val2_72_0_1_fu_314_p2(46 downto 16);
    tmp_cast_fu_179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_133),8));
    tmp_s_fu_196_p2 <= "0" when (i_reg_133 = ap_const_lv4_0) else "1";
end behav;
