// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Reshape (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        src_val_V_address0,
        src_val_V_ce0,
        src_val_V_q0,
        dst_V_address0,
        dst_V_ce0,
        dst_V_we0,
        dst_V_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] src_val_V_address0;
output   src_val_V_ce0;
input  [31:0] src_val_V_q0;
output  [7:0] dst_V_address0;
output   dst_V_ce0;
output   dst_V_we0;
output  [31:0] dst_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_val_V_ce0;
reg dst_V_ce0;
reg dst_V_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] i_reg_95;
wire   [3:0] n_1_fu_112_p2;
reg   [3:0] n_1_reg_218;
wire    ap_CS_fsm_state2;
wire   [5:0] tmp_fu_118_p3;
reg   [5:0] tmp_reg_223;
wire   [0:0] exitcond3_fu_106_p2;
wire   [6:0] tmp_70_cast_fu_126_p1;
reg   [6:0] tmp_70_cast_reg_228;
wire   [0:0] exitcond2_fu_130_p2;
wire    ap_CS_fsm_state3;
wire   [2:0] j_1_fu_136_p2;
reg   [2:0] j_1_reg_237;
wire   [7:0] tmp_57_fu_151_p3;
reg   [7:0] tmp_57_reg_242;
wire   [8:0] tmp_62_cast_fu_159_p1;
reg   [8:0] tmp_62_cast_reg_247;
wire   [0:0] exitcond_fu_167_p2;
reg   [0:0] exitcond_reg_252;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [2:0] i_1_fu_173_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [7:0] index_fu_179_p2;
reg   [7:0] index_reg_261;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
reg   [3:0] n_reg_73;
reg   [2:0] j_reg_84;
wire    ap_CS_fsm_state6;
wire   [63:0] tmp_74_cast_fu_206_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] tmp_59_fu_211_p1;
wire   [5:0] tmp_95_cast_fu_142_p1;
wire   [5:0] tmp_s_fu_146_p2;
wire   [7:0] i_cast8_fu_163_p1;
wire   [6:0] tmp_65_cast_fu_184_p1;
wire   [6:0] tmp_60_fu_188_p2;
wire   [8:0] tmp_73_cast_fu_193_p3;
wire   [8:0] tmp_61_fu_201_p2;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state4))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond2_fu_130_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((exitcond2_fu_130_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_130_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_95 <= 3'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_fu_167_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_95 <= i_1_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_reg_84 <= j_1_reg_237;
    end else if (((exitcond3_fu_106_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_84 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_130_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        n_reg_73 <= n_1_reg_218;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        n_reg_73 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_reg_252 <= exitcond_fu_167_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        index_reg_261 <= index_fu_179_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_1_reg_237 <= j_1_fu_136_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        n_1_reg_218 <= n_1_fu_112_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_130_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_57_reg_242[7 : 2] <= tmp_57_fu_151_p3[7 : 2];
        tmp_62_cast_reg_247[2 : 0] <= tmp_62_cast_fu_159_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_106_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_70_cast_reg_228[5 : 2] <= tmp_70_cast_fu_126_p1[5 : 2];
        tmp_reg_223[5 : 2] <= tmp_fu_118_p3[5 : 2];
    end
end

always @ (*) begin
    if ((exitcond_fu_167_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond3_fu_106_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_fu_106_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        dst_V_ce0 = 1'b1;
    end else begin
        dst_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_252 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        dst_V_we0 = 1'b1;
    end else begin
        dst_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_val_V_ce0 = 1'b1;
    end else begin
        src_val_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond3_fu_106_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond2_fu_130_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_167_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_167_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign dst_V_address0 = tmp_59_fu_211_p1;

assign dst_V_d0 = src_val_V_q0;

assign exitcond2_fu_130_p2 = ((j_reg_84 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond3_fu_106_p2 = ((n_reg_73 == 4'd12) ? 1'b1 : 1'b0);

assign exitcond_fu_167_p2 = ((i_reg_95 == 3'd4) ? 1'b1 : 1'b0);

assign i_1_fu_173_p2 = (i_reg_95 + 3'd1);

assign i_cast8_fu_163_p1 = i_reg_95;

assign index_fu_179_p2 = (tmp_57_reg_242 + i_cast8_fu_163_p1);

assign j_1_fu_136_p2 = (j_reg_84 + 3'd1);

assign n_1_fu_112_p2 = (n_reg_73 + 4'd1);

assign src_val_V_address0 = tmp_74_cast_fu_206_p1;

assign tmp_57_fu_151_p3 = {{tmp_s_fu_146_p2}, {2'd0}};

assign tmp_59_fu_211_p1 = index_reg_261;

assign tmp_60_fu_188_p2 = (tmp_65_cast_fu_184_p1 + tmp_70_cast_reg_228);

assign tmp_61_fu_201_p2 = (tmp_62_cast_reg_247 + tmp_73_cast_fu_193_p3);

assign tmp_62_cast_fu_159_p1 = j_reg_84;

assign tmp_65_cast_fu_184_p1 = i_reg_95;

assign tmp_70_cast_fu_126_p1 = tmp_fu_118_p3;

assign tmp_73_cast_fu_193_p3 = {{tmp_60_fu_188_p2}, {2'd0}};

assign tmp_74_cast_fu_206_p1 = tmp_61_fu_201_p2;

assign tmp_95_cast_fu_142_p1 = j_reg_84;

assign tmp_fu_118_p3 = {{n_reg_73}, {2'd0}};

assign tmp_s_fu_146_p2 = (tmp_reg_223 + tmp_95_cast_fu_142_p1);

always @ (posedge ap_clk) begin
    tmp_reg_223[1:0] <= 2'b00;
    tmp_70_cast_reg_228[1:0] <= 2'b00;
    tmp_70_cast_reg_228[6] <= 1'b0;
    tmp_57_reg_242[1:0] <= 2'b00;
    tmp_62_cast_reg_247[8:3] <= 6'b000000;
end

endmodule //Reshape
