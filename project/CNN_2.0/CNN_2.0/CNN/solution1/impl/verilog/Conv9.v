// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv9 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        src_val_V_address0,
        src_val_V_ce0,
        src_val_V_q0,
        src_val_V_offset,
        dst_val_V_address0,
        dst_val_V_ce0,
        dst_val_V_we0,
        dst_val_V_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] src_val_V_address0;
output   src_val_V_ce0;
input  [31:0] src_val_V_q0;
input  [2:0] src_val_V_offset;
output  [9:0] dst_val_V_address0;
output   dst_val_V_ce0;
output   dst_val_V_we0;
output  [31:0] dst_val_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_val_V_ce0;
reg dst_val_V_ce0;
reg dst_val_V_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] j_reg_152;
wire  signed [9:0] tmp_164_cast_fu_193_p1;
reg  signed [9:0] tmp_164_cast_reg_478;
wire   [0:0] exitcond_fu_201_p2;
wire    ap_CS_fsm_state2;
wire   [4:0] i_12_fu_207_p2;
reg   [4:0] i_12_reg_487;
wire   [12:0] tmp_154_fu_242_p2;
reg   [12:0] tmp_154_reg_492;
wire   [0:0] tmp_s_fu_248_p2;
reg   [0:0] tmp_s_reg_497;
wire  signed [10:0] grp_fu_458_p3;
reg  signed [10:0] tmp_155_reg_502;
wire   [0:0] exitcond2_fu_254_p2;
reg   [0:0] exitcond2_reg_507;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [4:0] j_10_fu_260_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [4:0] LineBuffer_val_1_V_s_reg_521;
wire   [0:0] or_cond_fu_291_p2;
reg   [0:0] or_cond_reg_527;
wire   [4:0] tmp_140_fu_296_p2;
reg   [4:0] tmp_140_reg_531;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
wire   [4:0] LineBuffer_val_1_V_address0;
reg    LineBuffer_val_1_V_ce0;
wire   [31:0] LineBuffer_val_1_V_q0;
reg    LineBuffer_val_1_V_ce1;
reg    LineBuffer_val_1_V_we1;
reg   [4:0] i_reg_141;
wire    ap_CS_fsm_state5;
wire   [63:0] tmp_171_cast_fu_280_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] tmp_138_fu_266_p1;
wire  signed [63:0] tmp_175_cast_fu_443_p1;
reg   [31:0] BlockBuffer_val_0_V_fu_80;
reg   [31:0] BlockBuffer_val_1_V_fu_84;
wire   [7:0] tmp_150_fu_163_p3;
wire   [5:0] tmp_151_fu_175_p3;
wire   [8:0] p_shl_cast_fu_171_p1;
wire   [8:0] p_shl1_cast_fu_183_p1;
wire   [8:0] tmp_152_fu_187_p2;
wire   [9:0] tmp_cast_fu_213_p1;
wire   [9:0] tmp_153_fu_217_p2;
wire   [7:0] tmp_fu_222_p1;
wire   [12:0] p_shl2_cast_fu_226_p3;
wire   [12:0] p_shl3_cast_fu_234_p3;
wire   [12:0] tmp_138_cast_fu_271_p1;
wire   [12:0] tmp_156_fu_275_p2;
wire   [0:0] tmp_139_fu_285_p2;
wire   [29:0] tmp_157_fu_316_p4;
wire   [45:0] tmp_436_0_1_fu_326_p3;
wire   [45:0] p_Val2_75_0_1_fu_308_p3;
wire  signed [46:0] tmp_4373_0_1_cast_ca_fu_338_p1;
wire  signed [46:0] tmp_436_0_1_cast_cas_fu_334_p1;
wire   [46:0] p_Val2_76_0_1_fu_342_p2;
wire   [30:0] tmp_73_fu_348_p4;
wire   [46:0] tmp_158_fu_366_p3;
wire   [45:0] p_Val2_75_1_fu_358_p3;
wire  signed [47:0] tmp_4373_1_cast_fu_378_p1;
wire  signed [47:0] tmp_436_1_fu_374_p1;
wire   [47:0] p_Val2_76_1_fu_382_p2;
wire   [31:0] tmp_159_fu_396_p4;
wire   [45:0] p_Val2_75_1_1_fu_388_p3;
wire  signed [47:0] tmp_4373_1_1_cast_fu_414_p1;
wire   [47:0] tmp_436_1_1_fu_406_p3;
wire   [47:0] p_Val2_76_1_1_fu_418_p2;
wire   [10:0] tmp_141_cast_fu_435_p1;
(* use_dsp48 = "no" *) wire   [10:0] tmp_160_fu_438_p2;
wire  signed [0:0] grp_fu_458_p0;
wire   [4:0] grp_fu_458_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [5:0] grp_fu_458_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

Conv9_LineBuffer_wdI #(
    .DataWidth( 32 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
LineBuffer_val_1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(LineBuffer_val_1_V_address0),
    .ce0(LineBuffer_val_1_V_ce0),
    .q0(LineBuffer_val_1_V_q0),
    .address1(LineBuffer_val_1_V_s_reg_521),
    .ce1(LineBuffer_val_1_V_ce1),
    .we1(LineBuffer_val_1_V_we1),
    .d1(src_val_V_q0)
);

CNN_Core_am_addmuxdS #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 11 ),
    .dout_WIDTH( 11 ))
CNN_Core_am_addmuxdS_U102(
    .din0(grp_fu_458_p0),
    .din1(grp_fu_458_p1),
    .din2(11'd23),
    .dout(grp_fu_458_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((exitcond_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_141 <= i_12_reg_487;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_141 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond2_fu_254_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_152 <= j_10_fu_260_p2;
    end else if (((exitcond_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_152 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond2_reg_507 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        BlockBuffer_val_0_V_fu_80 <= LineBuffer_val_1_V_q0;
        BlockBuffer_val_1_V_fu_84 <= src_val_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond2_fu_254_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        LineBuffer_val_1_V_s_reg_521 <= tmp_138_fu_266_p1;
        or_cond_reg_527 <= or_cond_fu_291_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond2_reg_507 <= exitcond2_fu_254_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_12_reg_487 <= i_12_fu_207_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_fu_291_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond2_fu_254_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_140_reg_531 <= tmp_140_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_154_reg_492[12 : 3] <= tmp_154_fu_242_p2[12 : 3];
        tmp_155_reg_502 <= grp_fu_458_p3;
        tmp_s_reg_497 <= tmp_s_fu_248_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_164_cast_reg_478[9 : 3] <= tmp_164_cast_fu_193_p1[9 : 3];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        LineBuffer_val_1_V_ce0 = 1'b1;
    end else begin
        LineBuffer_val_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        LineBuffer_val_1_V_ce1 = 1'b1;
    end else begin
        LineBuffer_val_1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        LineBuffer_val_1_V_we1 = 1'b1;
    end else begin
        LineBuffer_val_1_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond2_fu_254_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        dst_val_V_ce0 = 1'b1;
    end else begin
        dst_val_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((or_cond_reg_527 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        dst_val_V_we0 = 1'b1;
    end else begin
        dst_val_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_val_V_ce0 = 1'b1;
    end else begin
        src_val_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond2_fu_254_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond2_fu_254_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign LineBuffer_val_1_V_address0 = tmp_138_fu_266_p1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign dst_val_V_address0 = tmp_175_cast_fu_443_p1;

assign dst_val_V_d0 = {{p_Val2_76_1_1_fu_418_p2[47:16]}};

assign exitcond2_fu_254_p2 = ((j_reg_152 == 5'd24) ? 1'b1 : 1'b0);

assign exitcond_fu_201_p2 = ((i_reg_141 == 5'd24) ? 1'b1 : 1'b0);

assign grp_fu_458_p0 = 6'd63;

assign grp_fu_458_p1 = grp_fu_458_p10;

assign grp_fu_458_p10 = i_reg_141;

assign i_12_fu_207_p2 = (i_reg_141 + 5'd1);

assign j_10_fu_260_p2 = (j_reg_152 + 5'd1);

assign or_cond_fu_291_p2 = (tmp_s_reg_497 & tmp_139_fu_285_p2);

assign p_Val2_75_0_1_fu_308_p3 = {{LineBuffer_val_1_V_q0}, {14'd0}};

assign p_Val2_75_1_1_fu_388_p3 = {{src_val_V_q0}, {14'd0}};

assign p_Val2_75_1_fu_358_p3 = {{BlockBuffer_val_1_V_fu_84}, {14'd0}};

assign p_Val2_76_0_1_fu_342_p2 = ($signed(tmp_4373_0_1_cast_ca_fu_338_p1) + $signed(tmp_436_0_1_cast_cas_fu_334_p1));

assign p_Val2_76_1_1_fu_418_p2 = ($signed(tmp_4373_1_1_cast_fu_414_p1) + $signed(tmp_436_1_1_fu_406_p3));

assign p_Val2_76_1_fu_382_p2 = ($signed(tmp_4373_1_cast_fu_378_p1) + $signed(tmp_436_1_fu_374_p1));

assign p_shl1_cast_fu_183_p1 = tmp_151_fu_175_p3;

assign p_shl2_cast_fu_226_p3 = {{tmp_fu_222_p1}, {5'd0}};

assign p_shl3_cast_fu_234_p3 = {{tmp_153_fu_217_p2}, {3'd0}};

assign p_shl_cast_fu_171_p1 = tmp_150_fu_163_p3;

assign src_val_V_address0 = tmp_171_cast_fu_280_p1;

assign tmp_138_cast_fu_271_p1 = j_reg_152;

assign tmp_138_fu_266_p1 = j_reg_152;

assign tmp_139_fu_285_p2 = ((j_reg_152 != 5'd0) ? 1'b1 : 1'b0);

assign tmp_140_fu_296_p2 = ($signed(j_reg_152) + $signed(5'd31));

assign tmp_141_cast_fu_435_p1 = tmp_140_reg_531;

assign tmp_150_fu_163_p3 = {{src_val_V_offset}, {5'd0}};

assign tmp_151_fu_175_p3 = {{src_val_V_offset}, {3'd0}};

assign tmp_152_fu_187_p2 = (p_shl_cast_fu_171_p1 - p_shl1_cast_fu_183_p1);

assign tmp_153_fu_217_p2 = ($signed(tmp_cast_fu_213_p1) + $signed(tmp_164_cast_reg_478));

assign tmp_154_fu_242_p2 = (p_shl2_cast_fu_226_p3 - p_shl3_cast_fu_234_p3);

assign tmp_156_fu_275_p2 = (tmp_154_reg_492 + tmp_138_cast_fu_271_p1);

assign tmp_157_fu_316_p4 = {{BlockBuffer_val_0_V_fu_80[31:2]}};

assign tmp_158_fu_366_p3 = {{tmp_73_fu_348_p4}, {16'd0}};

assign tmp_159_fu_396_p4 = {{p_Val2_76_1_fu_382_p2[47:16]}};

assign tmp_160_fu_438_p2 = ($signed(tmp_155_reg_502) + $signed(tmp_141_cast_fu_435_p1));

assign tmp_164_cast_fu_193_p1 = $signed(tmp_152_fu_187_p2);

assign tmp_171_cast_fu_280_p1 = tmp_156_fu_275_p2;

assign tmp_175_cast_fu_443_p1 = $signed(tmp_160_fu_438_p2);

assign tmp_436_0_1_cast_cas_fu_334_p1 = $signed(tmp_436_0_1_fu_326_p3);

assign tmp_436_0_1_fu_326_p3 = {{tmp_157_fu_316_p4}, {16'd0}};

assign tmp_436_1_1_fu_406_p3 = {{tmp_159_fu_396_p4}, {16'd0}};

assign tmp_436_1_fu_374_p1 = $signed(tmp_158_fu_366_p3);

assign tmp_4373_0_1_cast_ca_fu_338_p1 = $signed(p_Val2_75_0_1_fu_308_p3);

assign tmp_4373_1_1_cast_fu_414_p1 = $signed(p_Val2_75_1_1_fu_388_p3);

assign tmp_4373_1_cast_fu_378_p1 = $signed(p_Val2_75_1_fu_358_p3);

assign tmp_73_fu_348_p4 = {{p_Val2_76_0_1_fu_342_p2[46:16]}};

assign tmp_cast_fu_213_p1 = i_reg_141;

assign tmp_fu_222_p1 = tmp_153_fu_217_p2[7:0];

assign tmp_s_fu_248_p2 = ((i_reg_141 != 5'd0) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_164_cast_reg_478[2:0] <= 3'b000;
    tmp_154_reg_492[2:0] <= 3'b000;
end

endmodule //Conv9
