// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv11 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        src_val_V_address0,
        src_val_V_ce0,
        src_val_V_q0,
        src_val_V_offset,
        dst_val_V_address0,
        dst_val_V_ce0,
        dst_val_V_we0,
        dst_val_V_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] src_val_V_address0;
output   src_val_V_ce0;
input  [31:0] src_val_V_q0;
input  [3:0] src_val_V_offset;
output  [5:0] dst_val_V_address0;
output   dst_val_V_ce0;
output   dst_val_V_we0;
output  [31:0] dst_val_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_val_V_ce0;
reg dst_val_V_ce0;
reg dst_val_V_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] j_reg_144;
wire   [7:0] tmp_208_cast_fu_163_p1;
reg   [7:0] tmp_208_cast_reg_442;
wire   [0:0] exitcond4_fu_167_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] i_14_fu_173_p2;
reg   [3:0] i_14_reg_451;
wire   [10:0] tmp_211_cast_fu_188_p3;
reg   [10:0] tmp_211_cast_reg_456;
wire   [0:0] tmp_s_fu_196_p2;
reg   [0:0] tmp_s_reg_461;
wire   [6:0] tmp_194_fu_220_p2;
reg   [6:0] tmp_194_reg_466;
wire   [0:0] exitcond5_fu_226_p2;
reg   [0:0] exitcond5_reg_471;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] j_12_fu_232_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [2:0] LineBuffer_val_1_V_s_reg_485;
wire   [0:0] or_cond_fu_263_p2;
reg   [0:0] or_cond_reg_491;
wire   [3:0] tmp_153_fu_268_p2;
reg   [3:0] tmp_153_reg_495;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
wire   [2:0] LineBuffer_val_1_V_address0;
reg    LineBuffer_val_1_V_ce0;
wire   [31:0] LineBuffer_val_1_V_q0;
reg    LineBuffer_val_1_V_ce1;
reg    LineBuffer_val_1_V_we1;
reg   [3:0] i_reg_133;
wire    ap_CS_fsm_state5;
wire   [63:0] tmp_214_cast_fu_252_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] tmp_151_fu_238_p1;
wire  signed [63:0] tmp_218_cast_fu_415_p1;
reg   [31:0] BlockBuffer_val_0_V_fu_72;
reg   [31:0] BlockBuffer_val_1_V_fu_76;
wire   [6:0] tmp_191_fu_155_p3;
wire   [7:0] tmp_cast_fu_179_p1;
wire   [7:0] tmp_192_fu_183_p2;
wire  signed [3:0] tmp_148_fu_202_p2;
wire   [6:0] tmp_193_fu_212_p3;
wire  signed [6:0] tmp_149_cast_fu_208_p1;
wire   [10:0] tmp_151_cast_fu_243_p1;
wire   [10:0] tmp_195_fu_247_p2;
wire   [0:0] tmp_152_fu_257_p2;
wire   [29:0] tmp_196_fu_288_p4;
wire   [45:0] tmp_388_0_1_fu_298_p3;
wire   [45:0] p_Val2_71_0_1_fu_280_p3;
wire  signed [46:0] tmp_3893_0_1_cast_ca_fu_310_p1;
wire  signed [46:0] tmp_388_0_1_cast_cas_fu_306_p1;
wire   [46:0] p_Val2_72_0_1_fu_314_p2;
wire   [30:0] tmp_70_fu_320_p4;
wire   [46:0] tmp_197_fu_338_p3;
wire   [45:0] p_Val2_71_1_fu_330_p3;
wire  signed [47:0] tmp_3893_1_cast_fu_350_p1;
wire  signed [47:0] tmp_388_1_fu_346_p1;
wire   [47:0] p_Val2_72_1_fu_354_p2;
wire   [31:0] tmp_198_fu_368_p4;
wire   [45:0] p_Val2_71_1_1_fu_360_p3;
wire  signed [47:0] tmp_3893_1_1_cast_fu_386_p1;
wire   [47:0] tmp_388_1_1_fu_378_p3;
wire   [47:0] p_Val2_72_1_1_fu_390_p2;
wire   [6:0] tmp_154_cast_fu_407_p1;
wire   [6:0] tmp_199_fu_410_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

Conv11_LineBufferJfO #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
LineBuffer_val_1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(LineBuffer_val_1_V_address0),
    .ce0(LineBuffer_val_1_V_ce0),
    .q0(LineBuffer_val_1_V_q0),
    .address1(LineBuffer_val_1_V_s_reg_485),
    .ce1(LineBuffer_val_1_V_ce1),
    .we1(LineBuffer_val_1_V_we1),
    .d1(src_val_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond4_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((exitcond4_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_133 <= i_14_reg_451;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_133 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond5_fu_226_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_144 <= j_12_fu_232_p2;
    end else if (((exitcond4_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_144 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond5_reg_471 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        BlockBuffer_val_0_V_fu_72 <= LineBuffer_val_1_V_q0;
        BlockBuffer_val_1_V_fu_76 <= src_val_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond5_fu_226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        LineBuffer_val_1_V_s_reg_485 <= tmp_151_fu_238_p1;
        or_cond_reg_491 <= or_cond_fu_263_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond5_reg_471 <= exitcond5_fu_226_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_14_reg_451 <= i_14_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_fu_263_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond5_fu_226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_153_reg_495 <= tmp_153_fu_268_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_194_reg_466 <= tmp_194_fu_220_p2;
        tmp_211_cast_reg_456[10 : 3] <= tmp_211_cast_fu_188_p3[10 : 3];
        tmp_s_reg_461 <= tmp_s_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_208_cast_reg_442[6 : 3] <= tmp_208_cast_fu_163_p1[6 : 3];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        LineBuffer_val_1_V_ce0 = 1'b1;
    end else begin
        LineBuffer_val_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        LineBuffer_val_1_V_ce1 = 1'b1;
    end else begin
        LineBuffer_val_1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        LineBuffer_val_1_V_we1 = 1'b1;
    end else begin
        LineBuffer_val_1_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond5_fu_226_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond4_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond4_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        dst_val_V_ce0 = 1'b1;
    end else begin
        dst_val_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((or_cond_reg_491 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        dst_val_V_we0 = 1'b1;
    end else begin
        dst_val_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_val_V_ce0 = 1'b1;
    end else begin
        src_val_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond4_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond5_fu_226_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond5_fu_226_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign LineBuffer_val_1_V_address0 = tmp_151_fu_238_p1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign dst_val_V_address0 = tmp_218_cast_fu_415_p1;

assign dst_val_V_d0 = {{p_Val2_72_1_1_fu_390_p2[47:16]}};

assign exitcond4_fu_167_p2 = ((i_reg_133 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond5_fu_226_p2 = ((j_reg_144 == 4'd8) ? 1'b1 : 1'b0);

assign i_14_fu_173_p2 = (i_reg_133 + 4'd1);

assign j_12_fu_232_p2 = (j_reg_144 + 4'd1);

assign or_cond_fu_263_p2 = (tmp_s_reg_461 & tmp_152_fu_257_p2);

assign p_Val2_71_0_1_fu_280_p3 = {{LineBuffer_val_1_V_q0}, {14'd0}};

assign p_Val2_71_1_1_fu_360_p3 = {{src_val_V_q0}, {14'd0}};

assign p_Val2_71_1_fu_330_p3 = {{BlockBuffer_val_1_V_fu_76}, {14'd0}};

assign p_Val2_72_0_1_fu_314_p2 = ($signed(tmp_3893_0_1_cast_ca_fu_310_p1) + $signed(tmp_388_0_1_cast_cas_fu_306_p1));

assign p_Val2_72_1_1_fu_390_p2 = ($signed(tmp_3893_1_1_cast_fu_386_p1) + $signed(tmp_388_1_1_fu_378_p3));

assign p_Val2_72_1_fu_354_p2 = ($signed(tmp_3893_1_cast_fu_350_p1) + $signed(tmp_388_1_fu_346_p1));

assign src_val_V_address0 = tmp_214_cast_fu_252_p1;

assign tmp_148_fu_202_p2 = ($signed(i_reg_133) + $signed(4'd15));

assign tmp_149_cast_fu_208_p1 = tmp_148_fu_202_p2;

assign tmp_151_cast_fu_243_p1 = j_reg_144;

assign tmp_151_fu_238_p1 = j_reg_144;

assign tmp_152_fu_257_p2 = ((j_reg_144 != 4'd0) ? 1'b1 : 1'b0);

assign tmp_153_fu_268_p2 = ($signed(j_reg_144) + $signed(4'd15));

assign tmp_154_cast_fu_407_p1 = tmp_153_reg_495;

assign tmp_191_fu_155_p3 = {{src_val_V_offset}, {3'd0}};

assign tmp_192_fu_183_p2 = (tmp_208_cast_reg_442 + tmp_cast_fu_179_p1);

assign tmp_193_fu_212_p3 = {{tmp_148_fu_202_p2}, {3'd0}};

assign tmp_194_fu_220_p2 = ($signed(tmp_193_fu_212_p3) - $signed(tmp_149_cast_fu_208_p1));

assign tmp_195_fu_247_p2 = (tmp_211_cast_reg_456 + tmp_151_cast_fu_243_p1);

assign tmp_196_fu_288_p4 = {{BlockBuffer_val_0_V_fu_72[31:2]}};

assign tmp_197_fu_338_p3 = {{tmp_70_fu_320_p4}, {16'd0}};

assign tmp_198_fu_368_p4 = {{p_Val2_72_1_fu_354_p2[47:16]}};

assign tmp_199_fu_410_p2 = (tmp_194_reg_466 + tmp_154_cast_fu_407_p1);

assign tmp_208_cast_fu_163_p1 = tmp_191_fu_155_p3;

assign tmp_211_cast_fu_188_p3 = {{tmp_192_fu_183_p2}, {3'd0}};

assign tmp_214_cast_fu_252_p1 = tmp_195_fu_247_p2;

assign tmp_218_cast_fu_415_p1 = $signed(tmp_199_fu_410_p2);

assign tmp_388_0_1_cast_cas_fu_306_p1 = $signed(tmp_388_0_1_fu_298_p3);

assign tmp_388_0_1_fu_298_p3 = {{tmp_196_fu_288_p4}, {16'd0}};

assign tmp_388_1_1_fu_378_p3 = {{tmp_198_fu_368_p4}, {16'd0}};

assign tmp_388_1_fu_346_p1 = $signed(tmp_197_fu_338_p3);

assign tmp_3893_0_1_cast_ca_fu_310_p1 = $signed(p_Val2_71_0_1_fu_280_p3);

assign tmp_3893_1_1_cast_fu_386_p1 = $signed(p_Val2_71_1_1_fu_360_p3);

assign tmp_3893_1_cast_fu_350_p1 = $signed(p_Val2_71_1_fu_330_p3);

assign tmp_70_fu_320_p4 = {{p_Val2_72_0_1_fu_314_p2[46:16]}};

assign tmp_cast_fu_179_p1 = i_reg_133;

assign tmp_s_fu_196_p2 = ((i_reg_133 != 4'd0) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_208_cast_reg_442[2:0] <= 3'b000;
    tmp_208_cast_reg_442[7] <= 1'b0;
    tmp_211_cast_reg_456[2:0] <= 3'b000;
end

endmodule //Conv11
