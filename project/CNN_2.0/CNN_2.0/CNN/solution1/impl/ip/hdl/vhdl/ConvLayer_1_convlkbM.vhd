-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity ConvLayer_1_convlkbM_rom is 
    generic(
             DWIDTH     : integer := 18; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 150
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of ConvLayer_1_convlkbM_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "101011000000111010", 1 => "110100110110000010", 
    2 => "111011110001001001", 3 => "111111111000110110", 
    4 => "110001001101101000", 5 => "000011010111101111", 
    6 => "001101110010111100", 7 => "010001110111001011", 
    8 => "010000000110110110", 9 => "111100100101101100", 
    10 => "010011111011000010", 11 => "010110010000001010", 
    12 => "011010000001000100", 13 => "010111000010110111", 
    14 => "001110110100101010", 15 => "001100110101010011", 
    16 => "010100010011010110", 17 => "010000110001100101", 
    18 => "010001001100100011", 19 => "000111100111110100", 
    20 => "111100101000110100", 21 => "000000000111111111", 
    22 => "111100111000111101", 23 => "111101110101011000", 
    24 => "101101010100001101", 25 => "010000100001000010", 
    26 => "001000100100010111", 27 => "000100100010011100", 
    28 => "001001111101001100", 29 => "001111010011010011", 
    30 => "111010001110110100", 31 => "110110000001100111", 
    32 => "110111000011000111", 33 => "111101010100011111", 
    34 => "001011000010010010", 35 => "110000001000000100", 
    36 => "101010000001000010", 37 => "110000000001111010", 
    38 => "111100000101000111", 39 => "000001101110101010", 
    40 => "110000100010111001", 41 => "110001101111010000", 
    42 => "110001111011010100", 43 => "111010111010001010", 
    44 => "111111001011111100", 45 => "111100011010100100", 
    46 => "111101110100010101", 47 => "000011101111000011", 
    48 => "001001011001101001", 49 => "000101001111100000", 
    50 => "100010000101000101", 51 => "101011011101011010", 
    52 => "101111100111100100", 53 => "110101001101001110", 
    54 => "110001110001010001", 55 => "110010000000101100", 
    56 => "000011100001000101", 57 => "001101101000011010", 
    58 => "001011111000001010", 59 => "111100011000100100", 
    60 => "111110101000110001", 61 => "010011110110100011", 
    62 => "010110011100001001", 63 => "010011100001101110", 
    64 => "001001010101101100", 65 => "000000111100010000", 
    66 => "010010111111000000", 67 => "010110100011000111", 
    68 => "010110010111010000", 69 => "010011000010010010", 
    70 => "110010001001110111", 71 => "000111101101110000", 
    72 => "001110000110010110", 73 => "001100100100000000", 
    74 => "000100001000101011", 75 => "010001001101011111", 
    76 => "001111001001000000", 77 => "001100000011010001", 
    78 => "111110010110111011", 79 => "111000100110111001", 
    80 => "010110000000111111", 81 => "010111001110111010", 
    82 => "010011110101111011", 83 => "000111001001111000", 
    84 => "111010011000100011", 85 => "010000010000001011", 
    86 => "010011001000010000", 87 => "001111001010011010", 
    88 => "000011101101010001", 89 => "110110100010001101", 
    90 => "000001100000010000", 91 => "000100111100101011", 
    92 => "111101111110001101", 93 => "110000100011101000", 
    94 => "110100111100111000", 95 => "101011100110001101", 
    96 => "101010000111000011", 97 => "101100100110001111", 
    98 => "110001000110101111", 99 => "000010010001000010", 
    100 => "011111111101000001", 101 => "010000001010011011", 
    102 => "000101011011001101", 103 => "111111001010101010", 
    104 => "001000001001010100", 105 => "000110100011010101", 
    106 => "110110101100001010", 107 => "101111001110100110", 
    108 => "110001111101111010", 109 => "000001010100100101", 
    110 => "111010001010000111", 111 => "101110110110111011", 
    112 => "101011000001011011", 113 => "101001100010010001", 
    114 => "111010100000100011", 115 => "111011101000001101", 
    116 => "101100110111011000", 117 => "101001010111000001", 
    118 => "101010010101011000", 119 => "101011100111101000", 
    120 => "000110011000110011", 121 => "110111001110000101", 
    122 => "110100011111000110", 123 => "110011001010101010", 
    124 => "000000000001101011", 125 => "011100010100110111", 
    126 => "010011100111000110", 127 => "010010000110010110", 
    128 => "001111101001010000", 129 => "000111011110111100", 
    130 => "010110000110110001", 131 => "001011100110111010", 
    132 => "000010001101000111", 133 => "111010100100011000", 
    134 => "111100000001000100", 135 => "001101000000001010", 
    136 => "111101110111010101", 137 => "110100101101000001", 
    138 => "110011010100001001", 139 => "110110001011010101", 
    140 => "000001011110011111", 141 => "111000110101011111", 
    142 => "101111100101110111", 143 => "101101010000010011", 
    144 => "110001001010110100", 145 => "000000110000100001", 
    146 => "110111000100000110", 147 => "101101111100110010", 
    148 => "100111000001101100", 149 => "101111011001110010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity ConvLayer_1_convlkbM is
    generic (
        DataWidth : INTEGER := 18;
        AddressRange : INTEGER := 150;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of ConvLayer_1_convlkbM is
    component ConvLayer_1_convlkbM_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    ConvLayer_1_convlkbM_rom_U :  component ConvLayer_1_convlkbM_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


