// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Array2D2Mat (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        arr_val_address0,
        arr_val_ce0,
        arr_val_q0,
        arr_rows_dout,
        arr_rows_empty_n,
        arr_rows_read,
        arr_cols_dout,
        arr_cols_empty_n,
        arr_cols_read,
        mat_data_stream_V_din,
        mat_data_stream_V_full_n,
        mat_data_stream_V_write,
        mat_rows_V_din,
        mat_rows_V_full_n,
        mat_rows_V_write,
        mat_cols_V_din,
        mat_cols_V_full_n,
        mat_cols_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output  [10:0] arr_val_address0;
output   arr_val_ce0;
input  [15:0] arr_val_q0;
input  [2:0] arr_rows_dout;
input   arr_rows_empty_n;
output   arr_rows_read;
input  [10:0] arr_cols_dout;
input   arr_cols_empty_n;
output   arr_cols_read;
output  [15:0] mat_data_stream_V_din;
input   mat_data_stream_V_full_n;
output   mat_data_stream_V_write;
output  [2:0] mat_rows_V_din;
input   mat_rows_V_full_n;
output   mat_rows_V_write;
output  [10:0] mat_cols_V_din;
input   mat_cols_V_full_n;
output   mat_cols_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg arr_val_ce0;
reg arr_rows_read;
reg arr_cols_read;
reg mat_data_stream_V_write;
reg mat_rows_V_write;
reg mat_cols_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    arr_rows_blk_n;
reg    arr_cols_blk_n;
reg    mat_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_34_i_reg_226;
reg    mat_rows_V_blk_n;
reg    mat_cols_V_blk_n;
reg   [9:0] j_i_reg_140;
reg   [2:0] arr_rows_read_reg_202;
reg    ap_block_state1;
reg   [10:0] arr_cols_read_reg_207;
wire   [11:0] next_mul_fu_151_p2;
reg   [11:0] next_mul_reg_212;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_i_fu_161_p2;
wire   [1:0] i_fu_166_p2;
reg   [1:0] i_reg_221;
wire   [0:0] tmp_34_i_fu_176_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] j_fu_181_p2;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [1:0] i_i_reg_117;
wire    ap_CS_fsm_state5;
reg   [11:0] phi_mul_reg_128;
wire   [63:0] tmp_31_cast_fu_197_p1;
reg    ap_block_pp0_stage0_01001;
wire   [2:0] i_cast_cast_i_fu_157_p1;
wire   [10:0] j_cast_cast_i_fu_172_p1;
wire   [11:0] tmp_35_i_cast_fu_187_p1;
wire   [11:0] tmp_s_fu_191_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_161_p2 == 1'd0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((tmp_i_fu_161_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((tmp_i_fu_161_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_i_reg_117 <= i_reg_221;
    end else if ((~((mat_cols_V_full_n == 1'b0) | (mat_rows_V_full_n == 1'b0) | (arr_cols_empty_n == 1'b0) | (arr_rows_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_i_reg_117 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_fu_161_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_i_reg_140 <= 10'd0;
    end else if (((tmp_34_i_fu_176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_i_reg_140 <= j_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        phi_mul_reg_128 <= next_mul_reg_212;
    end else if ((~((mat_cols_V_full_n == 1'b0) | (mat_rows_V_full_n == 1'b0) | (arr_cols_empty_n == 1'b0) | (arr_rows_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_128 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((mat_cols_V_full_n == 1'b0) | (mat_rows_V_full_n == 1'b0) | (arr_cols_empty_n == 1'b0) | (arr_rows_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        arr_cols_read_reg_207 <= arr_cols_dout;
        arr_rows_read_reg_202 <= arr_rows_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_221 <= i_fu_166_p2;
        next_mul_reg_212 <= next_mul_fu_151_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_34_i_reg_226 <= tmp_34_i_fu_176_p2;
    end
end

always @ (*) begin
    if ((tmp_34_i_fu_176_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_161_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        arr_cols_blk_n = arr_cols_empty_n;
    end else begin
        arr_cols_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((mat_cols_V_full_n == 1'b0) | (mat_rows_V_full_n == 1'b0) | (arr_cols_empty_n == 1'b0) | (arr_rows_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        arr_cols_read = 1'b1;
    end else begin
        arr_cols_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        arr_rows_blk_n = arr_rows_empty_n;
    end else begin
        arr_rows_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((mat_cols_V_full_n == 1'b0) | (mat_rows_V_full_n == 1'b0) | (arr_cols_empty_n == 1'b0) | (arr_rows_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        arr_rows_read = 1'b1;
    end else begin
        arr_rows_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        arr_val_ce0 = 1'b1;
    end else begin
        arr_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_161_p2 == 1'd0))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mat_cols_V_blk_n = mat_cols_V_full_n;
    end else begin
        mat_cols_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((mat_cols_V_full_n == 1'b0) | (mat_rows_V_full_n == 1'b0) | (arr_cols_empty_n == 1'b0) | (arr_rows_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mat_cols_V_write = 1'b1;
    end else begin
        mat_cols_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_34_i_reg_226 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mat_data_stream_V_blk_n = mat_data_stream_V_full_n;
    end else begin
        mat_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_34_i_reg_226 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mat_data_stream_V_write = 1'b1;
    end else begin
        mat_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mat_rows_V_blk_n = mat_rows_V_full_n;
    end else begin
        mat_rows_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((mat_cols_V_full_n == 1'b0) | (mat_rows_V_full_n == 1'b0) | (arr_cols_empty_n == 1'b0) | (arr_rows_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mat_rows_V_write = 1'b1;
    end else begin
        mat_rows_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((mat_cols_V_full_n == 1'b0) | (mat_rows_V_full_n == 1'b0) | (arr_cols_empty_n == 1'b0) | (arr_rows_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_161_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (tmp_34_i_fu_176_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (tmp_34_i_fu_176_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((tmp_34_i_reg_226 == 1'd1) & (mat_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((tmp_34_i_reg_226 == 1'd1) & (mat_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((tmp_34_i_reg_226 == 1'd1) & (mat_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((mat_cols_V_full_n == 1'b0) | (mat_rows_V_full_n == 1'b0) | (arr_cols_empty_n == 1'b0) | (arr_rows_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((tmp_34_i_reg_226 == 1'd1) & (mat_data_stream_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign arr_val_address0 = tmp_31_cast_fu_197_p1;

assign i_cast_cast_i_fu_157_p1 = i_i_reg_117;

assign i_fu_166_p2 = (i_i_reg_117 + 2'd1);

assign j_cast_cast_i_fu_172_p1 = j_i_reg_140;

assign j_fu_181_p2 = (j_i_reg_140 + 10'd1);

assign mat_cols_V_din = arr_cols_dout;

assign mat_data_stream_V_din = arr_val_q0;

assign mat_rows_V_din = arr_rows_dout;

assign next_mul_fu_151_p2 = (phi_mul_reg_128 + 12'd1000);

assign start_out = real_start;

assign tmp_31_cast_fu_197_p1 = tmp_s_fu_191_p2;

assign tmp_34_i_fu_176_p2 = (($signed(j_cast_cast_i_fu_172_p1) < $signed(arr_cols_read_reg_207)) ? 1'b1 : 1'b0);

assign tmp_35_i_cast_fu_187_p1 = j_i_reg_140;

assign tmp_i_fu_161_p2 = (($signed(i_cast_cast_i_fu_157_p1) < $signed(arr_rows_read_reg_202)) ? 1'b1 : 1'b0);

assign tmp_s_fu_191_p2 = (phi_mul_reg_128 + tmp_35_i_cast_fu_187_p1);

endmodule //Array2D2Mat
