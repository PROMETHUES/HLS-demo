// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XFAST2_CORE_H
#define XFAST2_CORE_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xfast2_core_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Ctrl_BaseAddress;
} XFast2_core_Config;
#endif

typedef struct {
    u32 Ctrl_BaseAddress;
    u32 IsReady;
} XFast2_core;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XFast2_core_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XFast2_core_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XFast2_core_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XFast2_core_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XFast2_core_Initialize(XFast2_core *InstancePtr, u16 DeviceId);
XFast2_core_Config* XFast2_core_LookupConfig(u16 DeviceId);
int XFast2_core_CfgInitialize(XFast2_core *InstancePtr, XFast2_core_Config *ConfigPtr);
#else
int XFast2_core_Initialize(XFast2_core *InstancePtr, const char* InstanceName);
int XFast2_core_Release(XFast2_core *InstancePtr);
#endif

void XFast2_core_Start(XFast2_core *InstancePtr);
u32 XFast2_core_IsDone(XFast2_core *InstancePtr);
u32 XFast2_core_IsIdle(XFast2_core *InstancePtr);
u32 XFast2_core_IsReady(XFast2_core *InstancePtr);
void XFast2_core_EnableAutoRestart(XFast2_core *InstancePtr);
void XFast2_core_DisableAutoRestart(XFast2_core *InstancePtr);

void XFast2_core_Set_rows(XFast2_core *InstancePtr, u32 Data);
u32 XFast2_core_Get_rows(XFast2_core *InstancePtr);
void XFast2_core_Set_cols(XFast2_core *InstancePtr, u32 Data);
u32 XFast2_core_Get_cols(XFast2_core *InstancePtr);
void XFast2_core_Set_threhold(XFast2_core *InstancePtr, u32 Data);
u32 XFast2_core_Get_threhold(XFast2_core *InstancePtr);

void XFast2_core_InterruptGlobalEnable(XFast2_core *InstancePtr);
void XFast2_core_InterruptGlobalDisable(XFast2_core *InstancePtr);
void XFast2_core_InterruptEnable(XFast2_core *InstancePtr, u32 Mask);
void XFast2_core_InterruptDisable(XFast2_core *InstancePtr, u32 Mask);
void XFast2_core_InterruptClear(XFast2_core *InstancePtr, u32 Mask);
u32 XFast2_core_InterruptGetEnabled(XFast2_core *InstancePtr);
u32 XFast2_core_InterruptGetStatus(XFast2_core *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
