// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __log_generic_floatmb6_H__
#define __log_generic_floatmb6_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct log_generic_floatmb6_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 42;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(log_generic_floatmb6_ram) {
        ram[0] = "0b000000000000000000000000000000000000000000";
        ram[1] = "0b000001000000000000000000000000000001010101";
        ram[2] = "0b000010000000000000100000000000010010101010";
        ram[3] = "0b000011000000000001100000000001010100000001";
        ram[4] = "0b000100000000000011000000000011100101011010";
        ram[5] = "0b000101000000000101000000000111100110110111";
        ram[6] = "0b000110000000000111100000001101111000011100";
        ram[7] = "0b000111000000001010100000010110111010001101";
        ram[8] = "0b001000000000001110000000100011001100001101";
        ram[9] = "0b001001000000010010000000110011001110100011";
        ram[10] = "0b001010000000010110100001000111100001010100";
        ram[11] = "0b001011000000011011100001100000100100100110";
        ram[12] = "0b001100000000100001000001111110111000100011";
        ram[13] = "0b001101000000100111000010100010111101010001";
        ram[14] = "0b001110000000101101100011001101010010111010";
        ram[15] = "0b001111000000110100100011111110011001100111";
        ram[16] = "0b010000000000111100000100110110110001100011";
        ram[17] = "0b010001000001000100000101110110111010111010";
        ram[18] = "0b010010000001001100100110111111010101110111";
        ram[19] = "0b010011000001010101101000010000100010101000";
        ram[20] = "0b010100000001011111001001101011000001011001";
        ram[21] = "0b010101000001101001001011001111010010011010";
        ram[22] = "0b010110000001110011101100111101110101111000";
        ram[23] = "0b010111000001111110101110110111001100000101";
        ram[24] = "0b011000000010001010010000111011110101010000";
        ram[25] = "0b011001000010010110010011001100010001101011";
        ram[26] = "0b011010000010100010110101101001000001101000";
        ram[27] = "0b011011000010101111111000010010100101011011";
        ram[28] = "0b011100000010111101011011001001011101010101";
        ram[29] = "0b011101000011001011011110001110001001101101";
        ram[30] = "0b011110000011011010000001100001001010110111";
        ram[31] = "0b011111000011101001000101000011000001001000";
        ram[32] = "0b100000000011111000101000110100001100111001";
        ram[33] = "0b100001000100001000101100110101001110011111";
        ram[34] = "0b100010000100011001010001000110100110010100";
        ram[35] = "0b100011000100101010010101101000110100110000";
        ram[36] = "0b100100000100111011111010011100011010001100";
        ram[37] = "0b100101000101001101111111100001110111000101";
        ram[38] = "0b100110000101100000100100111001101011110011";
        ram[39] = "0b100111000101110011101010100100011000110101";
        ram[40] = "0b101000000110000111010000100010011110100110";
        ram[41] = "0b101001000110011011010110110100011101100100";
        ram[42] = "0b101010000110101111111101011010110110001101";
        ram[43] = "0b101011000111000101000100010110001001000000";
        ram[44] = "0b101100000111011010101011100110110110011110";
        ram[45] = "0b101101000111110000110011001101011111000110";
        ram[46] = "0b101110001000000111011011001010100011011010";
        ram[47] = "0b101111001000011110100011011110100011111101";
        ram[48] = "0b110000001000110110001100001010000001010000";
        ram[49] = "0b110001001001001110010101001101011011111001";
        ram[50] = "0b110010001001100110111110101001010100011010";
        ram[51] = "0b110011001010000000001000011110001011011010";
        ram[52] = "0b110100001010011001110010101100100001011110";
        ram[53] = "0b110101001010110011111101010100110111001101";
        ram[54] = "0b110110001011001110101000010111101101001111";
        ram[55] = "0b110111001011101001110011110101100100001100";
        ram[56] = "0b111000001100000101011111101110111100101100";
        ram[57] = "0b111001001100100001101100000100010111011011";
        ram[58] = "0b111010001100111110011000110110010101000001";
        ram[59] = "0b111011001101011011100110000101010110001011";
        ram[60] = "0b111100001101111001010011110001111011100101";
        ram[61] = "0b111101001110010111100001111100100101111011";
        ram[62] = "0b111110001110110110010000100101110101111100";
        ram[63] = "0b111111001111010101011111101110001100010110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(log_generic_floatmb6) {


static const unsigned DataWidth = 42;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


log_generic_floatmb6_ram* meminst;


SC_CTOR(log_generic_floatmb6) {
meminst = new log_generic_floatmb6_ram("log_generic_floatmb6_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~log_generic_floatmb6() {
    delete meminst;
}


};//endmodule
#endif
