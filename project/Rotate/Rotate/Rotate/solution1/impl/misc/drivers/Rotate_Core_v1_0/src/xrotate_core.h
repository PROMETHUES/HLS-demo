// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XROTATE_CORE_H
#define XROTATE_CORE_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xrotate_core_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Ctrl_BaseAddress;
} XRotate_core_Config;
#endif

typedef struct {
    u32 Ctrl_BaseAddress;
    u32 IsReady;
} XRotate_core;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XRotate_core_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XRotate_core_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XRotate_core_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XRotate_core_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XRotate_core_Initialize(XRotate_core *InstancePtr, u16 DeviceId);
XRotate_core_Config* XRotate_core_LookupConfig(u16 DeviceId);
int XRotate_core_CfgInitialize(XRotate_core *InstancePtr, XRotate_core_Config *ConfigPtr);
#else
int XRotate_core_Initialize(XRotate_core *InstancePtr, const char* InstanceName);
int XRotate_core_Release(XRotate_core *InstancePtr);
#endif

void XRotate_core_Start(XRotate_core *InstancePtr);
u32 XRotate_core_IsDone(XRotate_core *InstancePtr);
u32 XRotate_core_IsIdle(XRotate_core *InstancePtr);
u32 XRotate_core_IsReady(XRotate_core *InstancePtr);
void XRotate_core_EnableAutoRestart(XRotate_core *InstancePtr);
void XRotate_core_DisableAutoRestart(XRotate_core *InstancePtr);

void XRotate_core_Set_rows0(XRotate_core *InstancePtr, u32 Data);
u32 XRotate_core_Get_rows0(XRotate_core *InstancePtr);
void XRotate_core_Set_cols0(XRotate_core *InstancePtr, u32 Data);
u32 XRotate_core_Get_cols0(XRotate_core *InstancePtr);
void XRotate_core_Set_param(XRotate_core *InstancePtr, u32 Data);
u32 XRotate_core_Get_param(XRotate_core *InstancePtr);
u32 XRotate_core_Get_rows1(XRotate_core *InstancePtr);
u32 XRotate_core_Get_rows1_vld(XRotate_core *InstancePtr);
u32 XRotate_core_Get_cols1(XRotate_core *InstancePtr);
u32 XRotate_core_Get_cols1_vld(XRotate_core *InstancePtr);

void XRotate_core_InterruptGlobalEnable(XRotate_core *InstancePtr);
void XRotate_core_InterruptGlobalDisable(XRotate_core *InstancePtr);
void XRotate_core_InterruptEnable(XRotate_core *InstancePtr, u32 Mask);
void XRotate_core_InterruptDisable(XRotate_core *InstancePtr, u32 Mask);
void XRotate_core_InterruptClear(XRotate_core *InstancePtr, u32 Mask);
u32 XRotate_core_InterruptGetEnabled(XRotate_core *InstancePtr);
u32 XRotate_core_InterruptGetStatus(XRotate_core *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
