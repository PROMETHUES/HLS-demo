// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Block_Mat_exit1120_p (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        dst_cols_dout,
        dst_cols_empty_n,
        dst_cols_read,
        cols1,
        cols1_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [16:0] dst_cols_dout;
input   dst_cols_empty_n;
output   dst_cols_read;
output  [31:0] cols1;
output   cols1_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg dst_cols_read;
reg[31:0] cols1;
reg cols1_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    dst_cols_blk_n;
reg    ap_block_state1;
wire   [31:0] extLd8_i_fu_33_p1;
reg   [31:0] cols1_preg;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 cols1_preg = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (dst_cols_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                cols1_preg[0] <= 1'b0;
        cols1_preg[1] <= 1'b0;
        cols1_preg[2] <= 1'b0;
        cols1_preg[3] <= 1'b0;
        cols1_preg[4] <= 1'b0;
        cols1_preg[5] <= 1'b0;
        cols1_preg[6] <= 1'b0;
        cols1_preg[7] <= 1'b0;
        cols1_preg[8] <= 1'b0;
        cols1_preg[9] <= 1'b0;
        cols1_preg[10] <= 1'b0;
        cols1_preg[11] <= 1'b0;
        cols1_preg[12] <= 1'b0;
        cols1_preg[13] <= 1'b0;
        cols1_preg[14] <= 1'b0;
        cols1_preg[15] <= 1'b0;
        cols1_preg[16] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (dst_cols_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        cols1_preg[16 : 0] <= extLd8_i_fu_33_p1[16 : 0];
        end
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (dst_cols_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (dst_cols_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (dst_cols_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols1 = extLd8_i_fu_33_p1;
    end else begin
        cols1 = cols1_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (dst_cols_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols1_ap_vld = 1'b1;
    end else begin
        cols1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        dst_cols_blk_n = dst_cols_empty_n;
    end else begin
        dst_cols_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (dst_cols_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        dst_cols_read = 1'b1;
    end else begin
        dst_cols_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (dst_cols_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign extLd8_i_fu_33_p1 = dst_cols_dout;

always @ (posedge ap_clk) begin
    cols1_preg[31:17] <= 15'b000000000000000;
end

endmodule //Block_Mat_exit1120_p
