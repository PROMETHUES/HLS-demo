-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Integral7 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_val_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    src_val_ce0 : OUT STD_LOGIC;
    src_val_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    src_rows_read : IN STD_LOGIC_VECTOR (31 downto 0);
    src_cols_read : IN STD_LOGIC_VECTOR (31 downto 0);
    swin_val_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    swin_val_ce0 : OUT STD_LOGIC;
    swin_val_we0 : OUT STD_LOGIC;
    swin_val_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    swin_val_address1 : OUT STD_LOGIC_VECTOR (17 downto 0);
    swin_val_ce1 : OUT STD_LOGIC;
    swin_val_we1 : OUT STD_LOGIC;
    swin_val_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sqwin_val_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    sqwin_val_ce0 : OUT STD_LOGIC;
    sqwin_val_we0 : OUT STD_LOGIC;
    sqwin_val_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sqwin_val_address1 : OUT STD_LOGIC_VECTOR (17 downto 0);
    sqwin_val_ce1 : OUT STD_LOGIC;
    sqwin_val_we1 : OUT STD_LOGIC;
    sqwin_val_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Integral7 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv19_7FFFF : STD_LOGIC_VECTOR (18 downto 0) := "1111111111111111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal j_reg_208 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_s_fu_231_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_533 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_104_fu_237_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_104_reg_538 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_105_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_9_fu_252_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_9_reg_547 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_106_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_106_reg_552 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_fu_280_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_53_reg_557 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_55_cast_fu_296_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_55_cast_reg_563 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_107_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_2_fu_313_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_108_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_108_reg_577 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_108_reg_577_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_585 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_585_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_fu_360_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_58_reg_594 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_58_reg_594_pp0_iter1_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal sLineBuffer_addr_reg_599 : STD_LOGIC_VECTOR (9 downto 0);
    signal sqLineBuffer_addr_reg_605 : STD_LOGIC_VECTOR (9 downto 0);
    signal sqLineBuffer_addr_reg_605_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal src_val_load_reg_611 : STD_LOGIC_VECTOR (7 downto 0);
    signal swinBuffer_1_0_fu_402_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal swinBuffer_1_0_reg_616 : STD_LOGIC_VECTOR (31 downto 0);
    signal sqLineBuffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sqwinBuffer_0_0_reg_621 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal sLineBuffer_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal sLineBuffer_ce0 : STD_LOGIC;
    signal sLineBuffer_we0 : STD_LOGIC;
    signal sLineBuffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sLineBuffer_ce1 : STD_LOGIC;
    signal sLineBuffer_we1 : STD_LOGIC;
    signal sLineBuffer_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sqLineBuffer_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal sqLineBuffer_ce0 : STD_LOGIC;
    signal sqLineBuffer_we0 : STD_LOGIC;
    signal sqLineBuffer_ce1 : STD_LOGIC;
    signal sqLineBuffer_we1 : STD_LOGIC;
    signal i_reg_197 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_57_cast_fu_345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_110_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_56_cast_fu_380_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_109_fu_365_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_58_cast_fu_446_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal swinBuffer_0_0_1_fu_48 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_swinBuffer_0_0_1_fu_426_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal swinBuffer_1_0_1_fu_52 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_swinBuffer_1_0_1_fu_419_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sqwinBuffer_0_0_1_fu_56 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_sqwinBuffer_0_0_1_fu_479_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sqwinBuffer_1_0_1_fu_60 : STD_LOGIC_VECTOR (31 downto 0);
    signal sqwinBuffer_1_0_fu_455_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_sqwinBuffer_1_0_1_fu_472_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_fu_243_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_138_fu_268_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_272_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_137_fu_264_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_139_fu_286_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_140_fu_290_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_cast_fu_304_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_142_fu_330_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_143_fu_334_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_57_fu_340_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_144_fu_356_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_141_fu_371_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_56_fu_375_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal value_fu_386_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_390_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_111_fu_396_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_496_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_113_fu_451_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_113_fu_451_p2 : signal is "no";
    signal grp_fu_496_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal value_cast_fu_443_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_496_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_434 : BOOLEAN;
    signal ap_condition_139 : BOOLEAN;

    component Haar_Core_mac_mulibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Integral7_sLineBug8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    sLineBuffer_U : component Integral7_sLineBug8j
    generic map (
        DataWidth => 32,
        AddressRange => 513,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sLineBuffer_address0,
        ce0 => sLineBuffer_ce0,
        we0 => sLineBuffer_we0,
        d0 => ap_const_lv32_0,
        q0 => sLineBuffer_q0,
        address1 => sLineBuffer_addr_reg_599,
        ce1 => sLineBuffer_ce1,
        we1 => sLineBuffer_we1,
        d1 => sLineBuffer_d1);

    sqLineBuffer_U : component Integral7_sLineBug8j
    generic map (
        DataWidth => 32,
        AddressRange => 513,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sqLineBuffer_address0,
        ce0 => sqLineBuffer_ce0,
        we0 => sqLineBuffer_we0,
        d0 => ap_const_lv32_0,
        q0 => sqLineBuffer_q0,
        address1 => sqLineBuffer_addr_reg_605_pp0_iter1_reg,
        ce1 => sqLineBuffer_ce1,
        we1 => sqLineBuffer_we1,
        d1 => sqwinBuffer_1_0_fu_455_p2);

    Haar_Core_mac_mulibs_U47 : component Haar_Core_mac_mulibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_496_p0,
        din1 => grp_fu_496_p1,
        din2 => sqwinBuffer_1_0_1_fu_60,
        dout => grp_fu_496_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((tmp_105_fu_247_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((tmp_105_fu_247_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_reg_197 <= i_9_reg_547;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_197 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    j_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_107_fu_308_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_reg_208 <= j_2_fu_313_p2;
            elsif (((tmp_105_fu_247_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_208 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    sqwinBuffer_0_0_1_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                if ((or_cond_reg_585_pp0_iter1_reg = ap_const_lv1_1)) then 
                    sqwinBuffer_0_0_1_fu_56 <= p_sqwinBuffer_0_0_1_fu_479_p3;
                elsif ((or_cond_reg_585_pp0_iter1_reg = ap_const_lv1_0)) then 
                    sqwinBuffer_0_0_1_fu_56 <= sqwinBuffer_0_0_reg_621;
                end if;
            end if; 
        end if;
    end process;

    sqwinBuffer_1_0_1_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                if ((or_cond_reg_585_pp0_iter1_reg = ap_const_lv1_1)) then 
                    sqwinBuffer_1_0_1_fu_60 <= p_sqwinBuffer_1_0_1_fu_472_p3;
                elsif ((or_cond_reg_585_pp0_iter1_reg = ap_const_lv1_0)) then 
                    sqwinBuffer_1_0_1_fu_60 <= sqwinBuffer_1_0_fu_455_p2;
                end if;
            end if; 
        end if;
    end process;

    swinBuffer_0_0_1_fu_48_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_139)) then
                if ((or_cond_reg_585 = ap_const_lv1_1)) then 
                    swinBuffer_0_0_1_fu_48 <= p_swinBuffer_0_0_1_fu_426_p3;
                elsif ((or_cond_reg_585 = ap_const_lv1_0)) then 
                    swinBuffer_0_0_1_fu_48 <= sLineBuffer_q0;
                end if;
            end if; 
        end if;
    end process;

    swinBuffer_1_0_1_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_139)) then
                if ((or_cond_reg_585 = ap_const_lv1_1)) then 
                    swinBuffer_1_0_1_fu_52 <= p_swinBuffer_1_0_1_fu_419_p3;
                elsif ((or_cond_reg_585 = ap_const_lv1_0)) then 
                    swinBuffer_1_0_1_fu_52 <= swinBuffer_1_0_fu_402_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_9_reg_547 <= i_9_fu_252_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_107_fu_308_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                or_cond_reg_585 <= or_cond_fu_325_p2;
                tmp_108_reg_577 <= tmp_108_fu_319_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                or_cond_reg_585_pp0_iter1_reg <= or_cond_reg_585;
                sqLineBuffer_addr_reg_605_pp0_iter1_reg <= sqLineBuffer_addr_reg_605;
                tmp_108_reg_577_pp0_iter1_reg <= tmp_108_reg_577;
                tmp_58_reg_594_pp0_iter1_reg <= tmp_58_reg_594;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_107_fu_308_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_cond_fu_325_p2 = ap_const_lv1_0))) then
                sLineBuffer_addr_reg_599 <= tmp_110_fu_350_p1(10 - 1 downto 0);
                sqLineBuffer_addr_reg_605 <= tmp_110_fu_350_p1(10 - 1 downto 0);
                tmp_58_reg_594 <= tmp_58_fu_360_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (or_cond_reg_585 = ap_const_lv1_0))) then
                sqwinBuffer_0_0_reg_621 <= sqLineBuffer_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_cond_reg_585 = ap_const_lv1_0))) then
                src_val_load_reg_611 <= src_val_q0;
                swinBuffer_1_0_reg_616 <= swinBuffer_1_0_fu_402_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_104_reg_538 <= tmp_104_fu_237_p2;
                tmp_s_reg_533 <= tmp_s_fu_231_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_105_fu_247_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_106_reg_552 <= tmp_106_fu_258_p2;
                tmp_53_reg_557 <= tmp_53_fu_280_p2;
                    tmp_55_cast_reg_563(18 downto 9) <= tmp_55_cast_fu_296_p3(18 downto 9);
            end if;
        end if;
    end process;
    tmp_55_cast_reg_563(8 downto 0) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_105_fu_247_p2, ap_CS_fsm_state2, tmp_107_fu_308_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_105_fu_247_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((tmp_107_fu_308_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((tmp_107_fu_308_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_139_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_139 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_434_assign_proc : process(tmp_107_fu_308_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0)
    begin
                ap_condition_434 <= ((tmp_107_fu_308_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(tmp_107_fu_308_p2)
    begin
        if ((tmp_107_fu_308_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_105_fu_247_p2, ap_CS_fsm_state2)
    begin
        if ((((tmp_105_fu_247_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_105_fu_247_p2, ap_CS_fsm_state2)
    begin
        if (((tmp_105_fu_247_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_496_p0 <= value_cast_fu_443_p1(8 - 1 downto 0);
    grp_fu_496_p1 <= value_cast_fu_443_p1(8 - 1 downto 0);
    i_9_fu_252_p2 <= std_logic_vector(unsigned(i_reg_197) + unsigned(ap_const_lv31_1));
    i_cast_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_197),32));
    j_2_fu_313_p2 <= std_logic_vector(unsigned(j_reg_208) + unsigned(ap_const_lv31_1));
    j_cast_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_208),32));
    or_cond_fu_325_p2 <= (tmp_108_fu_319_p2 or tmp_106_reg_552);
    p_shl_cast_fu_272_p3 <= (tmp_138_fu_268_p1 & ap_const_lv9_0);
    p_sqwinBuffer_0_0_1_fu_479_p3 <= 
        ap_const_lv32_0 when (tmp_108_reg_577_pp0_iter1_reg(0) = '1') else 
        sqwinBuffer_0_0_1_fu_56;
    p_sqwinBuffer_1_0_1_fu_472_p3 <= 
        ap_const_lv32_0 when (tmp_108_reg_577_pp0_iter1_reg(0) = '1') else 
        sqwinBuffer_1_0_1_fu_60;
    p_swinBuffer_0_0_1_fu_426_p3 <= 
        ap_const_lv32_0 when (tmp_108_reg_577(0) = '1') else 
        swinBuffer_0_0_1_fu_48;
    p_swinBuffer_1_0_1_fu_419_p3 <= 
        ap_const_lv32_0 when (tmp_108_reg_577(0) = '1') else 
        swinBuffer_1_0_1_fu_52;

    sLineBuffer_address0_assign_proc : process(tmp_106_reg_552, or_cond_fu_325_p2, tmp_110_fu_350_p1, tmp_109_fu_365_p1, ap_condition_434)
    begin
        if ((ap_const_boolean_1 = ap_condition_434)) then
            if (((or_cond_fu_325_p2 = ap_const_lv1_1) and (tmp_106_reg_552 = ap_const_lv1_1))) then 
                sLineBuffer_address0 <= tmp_109_fu_365_p1(10 - 1 downto 0);
            elsif ((or_cond_fu_325_p2 = ap_const_lv1_0)) then 
                sLineBuffer_address0 <= tmp_110_fu_350_p1(10 - 1 downto 0);
            else 
                sLineBuffer_address0 <= "XXXXXXXXXX";
            end if;
        else 
            sLineBuffer_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    sLineBuffer_ce0_assign_proc : process(tmp_106_reg_552, tmp_107_fu_308_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, or_cond_fu_325_p2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_107_fu_308_p2 = ap_const_lv1_1) and (or_cond_fu_325_p2 = ap_const_lv1_1) and (tmp_106_reg_552 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_107_fu_308_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_cond_fu_325_p2 = ap_const_lv1_0)))) then 
            sLineBuffer_ce0 <= ap_const_logic_1;
        else 
            sLineBuffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sLineBuffer_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            sLineBuffer_ce1 <= ap_const_logic_1;
        else 
            sLineBuffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    sLineBuffer_d1 <= std_logic_vector(unsigned(tmp_111_fu_396_p2) - unsigned(swinBuffer_0_0_1_fu_48));

    sLineBuffer_we0_assign_proc : process(tmp_106_reg_552, tmp_107_fu_308_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, or_cond_fu_325_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_107_fu_308_p2 = ap_const_lv1_1) and (or_cond_fu_325_p2 = ap_const_lv1_1) and (tmp_106_reg_552 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sLineBuffer_we0 <= ap_const_logic_1;
        else 
            sLineBuffer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sLineBuffer_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, or_cond_reg_585, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (or_cond_reg_585 = ap_const_lv1_0))) then 
            sLineBuffer_we1 <= ap_const_logic_1;
        else 
            sLineBuffer_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sqLineBuffer_address0_assign_proc : process(tmp_106_reg_552, or_cond_fu_325_p2, tmp_110_fu_350_p1, tmp_109_fu_365_p1, ap_condition_434)
    begin
        if ((ap_const_boolean_1 = ap_condition_434)) then
            if (((or_cond_fu_325_p2 = ap_const_lv1_1) and (tmp_106_reg_552 = ap_const_lv1_1))) then 
                sqLineBuffer_address0 <= tmp_109_fu_365_p1(10 - 1 downto 0);
            elsif ((or_cond_fu_325_p2 = ap_const_lv1_0)) then 
                sqLineBuffer_address0 <= tmp_110_fu_350_p1(10 - 1 downto 0);
            else 
                sqLineBuffer_address0 <= "XXXXXXXXXX";
            end if;
        else 
            sqLineBuffer_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    sqLineBuffer_ce0_assign_proc : process(tmp_106_reg_552, tmp_107_fu_308_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, or_cond_fu_325_p2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_107_fu_308_p2 = ap_const_lv1_1) and (or_cond_fu_325_p2 = ap_const_lv1_1) and (tmp_106_reg_552 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_107_fu_308_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_cond_fu_325_p2 = ap_const_lv1_0)))) then 
            sqLineBuffer_ce0 <= ap_const_logic_1;
        else 
            sqLineBuffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sqLineBuffer_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            sqLineBuffer_ce1 <= ap_const_logic_1;
        else 
            sqLineBuffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sqLineBuffer_we0_assign_proc : process(tmp_106_reg_552, tmp_107_fu_308_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, or_cond_fu_325_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_107_fu_308_p2 = ap_const_lv1_1) and (or_cond_fu_325_p2 = ap_const_lv1_1) and (tmp_106_reg_552 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sqLineBuffer_we0 <= ap_const_logic_1;
        else 
            sqLineBuffer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sqLineBuffer_we1_assign_proc : process(ap_block_pp0_stage0_11001, or_cond_reg_585_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (or_cond_reg_585_pp0_iter1_reg = ap_const_lv1_0))) then 
            sqLineBuffer_we1 <= ap_const_logic_1;
        else 
            sqLineBuffer_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sqwinBuffer_1_0_fu_455_p2 <= std_logic_vector(unsigned(tmp_113_fu_451_p2) - unsigned(sqwinBuffer_0_0_1_fu_56));
    sqwin_val_address0 <= tmp_56_cast_fu_380_p1(18 - 1 downto 0);
    sqwin_val_address1 <= tmp_58_cast_fu_446_p1(18 - 1 downto 0);

    sqwin_val_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sqwin_val_ce0 <= ap_const_logic_1;
        else 
            sqwin_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sqwin_val_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            sqwin_val_ce1 <= ap_const_logic_1;
        else 
            sqwin_val_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    sqwin_val_d0 <= ap_const_lv32_0;
    sqwin_val_d1 <= sqwinBuffer_1_0_fu_455_p2;

    sqwin_val_we0_assign_proc : process(tmp_107_fu_308_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, or_cond_fu_325_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_107_fu_308_p2 = ap_const_lv1_1) and (or_cond_fu_325_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sqwin_val_we0 <= ap_const_logic_1;
        else 
            sqwin_val_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sqwin_val_we1_assign_proc : process(ap_block_pp0_stage0_11001, or_cond_reg_585_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (or_cond_reg_585_pp0_iter1_reg = ap_const_lv1_0))) then 
            sqwin_val_we1 <= ap_const_logic_1;
        else 
            sqwin_val_we1 <= ap_const_logic_0;
        end if; 
    end process;

    src_val_address0 <= tmp_57_cast_fu_345_p1(17 - 1 downto 0);

    src_val_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_val_ce0 <= ap_const_logic_1;
        else 
            src_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    swinBuffer_1_0_fu_402_p2 <= std_logic_vector(unsigned(tmp_111_fu_396_p2) - unsigned(swinBuffer_0_0_1_fu_48));
    swin_val_address0 <= tmp_56_cast_fu_380_p1(18 - 1 downto 0);
    swin_val_address1 <= tmp_58_cast_fu_446_p1(18 - 1 downto 0);

    swin_val_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            swin_val_ce0 <= ap_const_logic_1;
        else 
            swin_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    swin_val_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            swin_val_ce1 <= ap_const_logic_1;
        else 
            swin_val_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    swin_val_d0 <= ap_const_lv32_0;
    swin_val_d1 <= swinBuffer_1_0_reg_616;

    swin_val_we0_assign_proc : process(tmp_107_fu_308_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, or_cond_fu_325_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_107_fu_308_p2 = ap_const_lv1_1) and (or_cond_fu_325_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            swin_val_we0 <= ap_const_logic_1;
        else 
            swin_val_we0 <= ap_const_logic_0;
        end if; 
    end process;


    swin_val_we1_assign_proc : process(ap_block_pp0_stage0_11001, or_cond_reg_585_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (or_cond_reg_585_pp0_iter1_reg = ap_const_lv1_0))) then 
            swin_val_we1 <= ap_const_logic_1;
        else 
            swin_val_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_390_p2 <= std_logic_vector(unsigned(value_fu_386_p1) + unsigned(swinBuffer_1_0_1_fu_52));
    tmp_104_fu_237_p2 <= std_logic_vector(unsigned(src_cols_read) + unsigned(ap_const_lv32_1));
    tmp_105_fu_247_p2 <= "1" when (signed(i_cast_fu_243_p1) < signed(tmp_s_reg_533)) else "0";
    tmp_106_fu_258_p2 <= "1" when (i_reg_197 = ap_const_lv31_0) else "0";
    tmp_107_fu_308_p2 <= "1" when (signed(j_cast_fu_304_p1) < signed(tmp_104_reg_538)) else "0";
    tmp_108_fu_319_p2 <= "1" when (j_reg_208 = ap_const_lv31_0) else "0";
    tmp_109_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_208),64));
    tmp_110_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_208),64));
    tmp_111_fu_396_p2 <= std_logic_vector(unsigned(sLineBuffer_q0) + unsigned(tmp1_fu_390_p2));
    tmp_113_fu_451_p2 <= std_logic_vector(unsigned(sqwinBuffer_0_0_reg_621) + unsigned(grp_fu_496_p3));
    tmp_137_fu_264_p1 <= i_reg_197(19 - 1 downto 0);
    tmp_138_fu_268_p1 <= i_reg_197(10 - 1 downto 0);
    tmp_139_fu_286_p1 <= i_reg_197(10 - 1 downto 0);
    tmp_140_fu_290_p2 <= std_logic_vector(signed(ap_const_lv10_3FF) + signed(tmp_139_fu_286_p1));
    tmp_141_fu_371_p1 <= j_reg_208(19 - 1 downto 0);
    tmp_142_fu_330_p1 <= j_reg_208(19 - 1 downto 0);
    tmp_143_fu_334_p2 <= std_logic_vector(signed(ap_const_lv19_7FFFF) + signed(tmp_142_fu_330_p1));
    tmp_144_fu_356_p1 <= j_reg_208(19 - 1 downto 0);
    tmp_53_fu_280_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_272_p3) + unsigned(tmp_137_fu_264_p1));
    tmp_55_cast_fu_296_p3 <= (tmp_140_fu_290_p2 & ap_const_lv9_0);
    tmp_56_cast_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_fu_375_p2),64));
    tmp_56_fu_375_p2 <= std_logic_vector(unsigned(tmp_53_reg_557) + unsigned(tmp_141_fu_371_p1));
        tmp_57_cast_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_57_fu_340_p2),64));

    tmp_57_fu_340_p2 <= std_logic_vector(unsigned(tmp_55_cast_reg_563) + unsigned(tmp_143_fu_334_p2));
    tmp_58_cast_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_58_reg_594_pp0_iter1_reg),64));
    tmp_58_fu_360_p2 <= std_logic_vector(unsigned(tmp_53_reg_557) + unsigned(tmp_144_fu_356_p1));
    tmp_s_fu_231_p2 <= std_logic_vector(unsigned(src_rows_read) + unsigned(ap_const_lv32_1));
    value_cast_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_val_load_reg_611),16));
    value_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_val_q0),32));
end behav;
