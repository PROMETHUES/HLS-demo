-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Resize5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_val_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    src_val_ce0 : OUT STD_LOGIC;
    src_val_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    src_rows_read : IN STD_LOGIC_VECTOR (31 downto 0);
    src_cols_read : IN STD_LOGIC_VECTOR (31 downto 0);
    dst_val_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    dst_val_ce0 : OUT STD_LOGIC;
    dst_val_we0 : OUT STD_LOGIC;
    dst_val_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    scale : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Resize5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (41 downto 0) := "000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (41 downto 0) := "000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (41 downto 0) := "000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (41 downto 0) := "000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (41 downto 0) := "000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (41 downto 0) := "000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (41 downto 0) := "000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (41 downto 0) := "000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (41 downto 0) := "000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (41 downto 0) := "001000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (41 downto 0) := "010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (41 downto 0) := "100000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_3F000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000000000000000000000000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_10 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_const_lv12_FF0 : STD_LOGIC_VECTOR (11 downto 0) := "111111110000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv34_100000000 : STD_LOGIC_VECTOR (33 downto 0) := "0100000000000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv33_8000 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000001000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv19_7FFFF : STD_LOGIC_VECTOR (18 downto 0) := "1111111111111111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_op_assign_4_reg_188 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_32_reg_199 : STD_LOGIC_VECTOR (31 downto 0);
    signal isneg_reg_1086 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_117_fu_270_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_117_reg_1092 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_88_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_88_reg_1097 : STD_LOGIC_VECTOR (0 downto 0);
    signal F2_fu_280_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_reg_1103 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal tmp_122_fu_519_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_122_reg_1129 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_228_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1134 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_fu_232_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_85_reg_1139 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_220_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1144 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_fu_224_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_86_reg_1149 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_reg_1154 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal grp_fu_215_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_8_reg_1159 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_34_fu_658_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_34_reg_1164 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal p_Val2_35_fu_801_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_35_reg_1170 : STD_LOGIC_VECTOR (31 downto 0);
    signal iscale_V_fu_809_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal iscale_V_reg_1176 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_97_fu_817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal i_fu_822_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_reg_1186 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_43_cast_fu_832_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_43_cast_reg_1191 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_fu_849_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_reg_1196 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_99_fu_869_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_99_reg_1203 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state41_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state42_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_fu_874_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_44_fu_884_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_44_reg_1212 : STD_LOGIC_VECTOR (18 downto 0);
    signal next_mul_fu_889_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state41 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal i_op_assign_reg_177 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal tmp_48_cast_fu_1071_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_44_cast_fu_1076_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal d_assign_fu_236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_240_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_fu_256_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_115_fu_244_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_87_fu_266_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_57_fu_286_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_4_fu_293_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_3_fu_297_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_89_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_90_fu_315_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_91_fu_320_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_fu_325_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_4_fu_303_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_119_fu_352_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal sh_amt_cast_fu_333_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_94_fu_368_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_95_fu_372_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_118_fu_342_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_92_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_demorgan_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_93_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp21_demorgan_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp12_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp13_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_96_fu_389_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_120_fu_378_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_071_s_fu_382_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp2_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel_fu_459_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel1_fu_473_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond1_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel2_fu_487_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel3_fu_501_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_523_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_2_fu_544_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_238_i_i_i_fu_548_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal loc_V_fu_534_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i_cast_fu_562_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_566_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_239_i_i_i_fu_580_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_572_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_239_i_i_i_cast_fu_586_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_2_fu_590_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_2_i_i_i_ca_fu_598_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_2_i_i_i_ca_1_fu_602_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_238_i_i_i_cast1_fu_558_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_240_i_i_i_fu_606_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_241_i_i_i_fu_610_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_110_fu_622_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_242_i_i_i_fu_616_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_35_fu_630_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_634_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_20_fu_644_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_526_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_i_i_i_fu_652_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_23_fu_666_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_4_fu_687_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_238_i_i_i7_fu_691_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal loc_V_3_fu_677_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i8_cast_fu_705_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_3_fu_709_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_239_i_i_i1_fu_723_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_1_fu_715_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_239_i_i_i11_cast_fu_729_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_4_fu_733_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_2_i_i_i12_s_fu_741_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_2_i_i_i12_1_fu_745_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_238_i_i_i7_cast1_fu_701_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_240_i_i_i1_fu_749_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_241_i_i_i1_fu_753_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_114_fu_765_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_242_i_i_i1_fu_759_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_39_fu_773_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_fu_777_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_25_fu_787_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_fu_669_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_i_i_i1_fu_795_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_513_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_cast_fu_813_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_123_fu_828_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_30_fu_840_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_30_fu_840_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_98_fu_845_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal i_op_assign_4_cast_fu_865_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_124_fu_880_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_126_fu_910_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_fu_894_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_100_fu_913_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_6_fu_919_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_125_fu_903_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_fu_925_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_4_fu_933_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_101_fu_945_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_5_fu_949_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_128_fu_973_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_7_fu_955_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_102_fu_977_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_8_fu_983_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_127_fu_965_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_9_fu_989_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_5_fu_997_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal r0_fu_941_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt_fu_1009_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c0_fu_1005_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_103_fu_1020_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_129_fu_1025_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_130_fu_1029_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal rev_fu_1014_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_132_fu_1042_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_133_fu_1045_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_134_fu_1049_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_131_fu_1034_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_47_cast_fu_1057_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_48_fu_1065_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_513_ap_start : STD_LOGIC;
    signal grp_fu_513_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component Haar_Core_fadd_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Haar_Core_fmul_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Haar_Core_sitofp_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Haar_Core_fpext_3eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Haar_Core_sdiv_34fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (33 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    Haar_Core_fadd_32bkb_U29 : component Haar_Core_fadd_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_s_reg_1144,
        din1 => ap_const_lv32_3F000000,
        ce => ap_const_logic_1,
        dout => grp_fu_210_p2);

    Haar_Core_fadd_32bkb_U30 : component Haar_Core_fadd_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_86_reg_1149,
        din1 => ap_const_lv32_3F000000,
        ce => ap_const_logic_1,
        dout => grp_fu_215_p2);

    Haar_Core_fmul_32cud_U31 : component Haar_Core_fmul_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_reg_1134,
        din1 => scale,
        ce => ap_const_logic_1,
        dout => grp_fu_220_p2);

    Haar_Core_fmul_32cud_U32 : component Haar_Core_fmul_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_85_reg_1139,
        din1 => scale,
        ce => ap_const_logic_1,
        dout => grp_fu_224_p2);

    Haar_Core_sitofp_dEe_U33 : component Haar_Core_sitofp_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => src_rows_read,
        ce => ap_const_logic_1,
        dout => grp_fu_228_p1);

    Haar_Core_sitofp_dEe_U34 : component Haar_Core_sitofp_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => src_cols_read,
        ce => ap_const_logic_1,
        dout => grp_fu_232_p1);

    Haar_Core_fpext_3eOg_U35 : component Haar_Core_fpext_3eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => scale,
        dout => d_assign_fu_236_p1);

    Haar_Core_sdiv_34fYi_U36 : component Haar_Core_sdiv_34fYi
    generic map (
        ID => 1,
        NUM_STAGE => 38,
        din0_WIDTH => 34,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_513_ap_start,
        done => grp_fu_513_ap_done,
        din0 => ap_const_lv34_100000000,
        din1 => newSel3_fu_501_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_513_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state41) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state40) and (tmp_97_fu_817_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state41) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state41);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state40) and (tmp_97_fu_817_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_op_assign_4_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state40) and (tmp_97_fu_817_p2 = ap_const_lv1_1))) then 
                i_op_assign_4_reg_188 <= ap_const_lv31_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_99_fu_869_p2 = ap_const_lv1_1))) then 
                i_op_assign_4_reg_188 <= j_fu_874_p2;
            end if; 
        end if;
    end process;

    i_op_assign_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                i_op_assign_reg_177 <= i_reg_1186;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                i_op_assign_reg_177 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    p_Val2_32_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state40) and (tmp_97_fu_817_p2 = ap_const_lv1_1))) then 
                p_Val2_32_reg_199 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_99_fu_869_p2 = ap_const_lv1_1))) then 
                p_Val2_32_reg_199 <= next_mul_fu_889_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                F2_reg_1103 <= F2_fu_280_p2;
                isneg_reg_1086 <= ireg_V_fu_240_p1(63 downto 63);
                tmp_117_reg_1092 <= tmp_117_fu_270_p1;
                tmp_88_reg_1097 <= tmp_88_fu_274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                i_reg_1186 <= i_fu_822_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                iscale_V_reg_1176 <= iscale_V_fu_809_p1;
                p_Val2_34_reg_1164 <= p_Val2_34_fu_658_p3;
                p_Val2_35_reg_1170 <= p_Val2_35_fu_801_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state40) and (tmp_97_fu_817_p2 = ap_const_lv1_1))) then
                r_V_reg_1196 <= r_V_fu_849_p2;
                    tmp_43_cast_reg_1191(18 downto 9) <= tmp_43_cast_fu_832_p3(18 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                tmp_122_reg_1129 <= tmp_122_fu_519_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_99_fu_869_p2 = ap_const_lv1_1))) then
                tmp_44_reg_1212 <= tmp_44_fu_884_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                tmp_85_reg_1139 <= grp_fu_232_p1;
                tmp_reg_1134 <= grp_fu_228_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                tmp_86_reg_1149 <= grp_fu_224_p2;
                tmp_s_reg_1144 <= grp_fu_220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_99_reg_1203 <= tmp_99_fu_869_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                x_assign_8_reg_1159 <= grp_fu_215_p2;
                x_assign_reg_1154 <= grp_fu_210_p2;
            end if;
        end if;
    end process;
    tmp_43_cast_reg_1191(8 downto 0) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_97_fu_817_p2, ap_CS_fsm_state40, tmp_99_fu_869_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state40) and (tmp_97_fu_817_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (tmp_99_fu_869_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (tmp_99_fu_869_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_fu_280_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(tmp_87_fu_266_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(40);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state43 <= ap_CS_fsm(41);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state41_assign_proc : process(tmp_99_fu_869_p2)
    begin
        if ((tmp_99_fu_869_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state41 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state41 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_97_fu_817_p2, ap_CS_fsm_state40)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (tmp_97_fu_817_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_97_fu_817_p2, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) and (tmp_97_fu_817_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= p_Val2_34_reg_1164;
    ap_return_1 <= p_Val2_35_reg_1170;
        c0_fu_1005_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_5_fu_997_p3),32));

    dst_val_address0 <= tmp_44_cast_fu_1076_p1(17 - 1 downto 0);

    dst_val_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst_val_ce0 <= ap_const_logic_1;
        else 
            dst_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dst_val_d0 <= src_val_q0;

    dst_val_we0_assign_proc : process(tmp_99_reg_1203, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_99_reg_1203 = ap_const_lv1_1))) then 
            dst_val_we0 <= ap_const_logic_1;
        else 
            dst_val_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_tmp_V_fu_256_p4 <= ireg_V_fu_240_p1(62 downto 52);

    grp_fu_513_ap_start_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_513_ap_start <= ap_const_logic_1;
        else 
            grp_fu_513_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_822_p2 <= std_logic_vector(unsigned(i_op_assign_reg_177) + unsigned(ap_const_lv31_1));
    i_op_assign_4_cast_fu_865_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_4_reg_188),32));
    i_op_assign_cast_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_reg_177),32));
    icmp_fu_362_p2 <= "1" when (tmp_119_fu_352_p4 = ap_const_lv7_0) else "0";
    ireg_V_fu_240_p1 <= d_assign_fu_236_p1;
    isNeg_1_fu_715_p3 <= sh_assign_3_fu_709_p2(8 downto 8);
    isNeg_fu_572_p3 <= sh_assign_fu_566_p2(8 downto 8);
    iscale_V_fu_809_p1 <= grp_fu_513_p2(32 - 1 downto 0);
    j_fu_874_p2 <= std_logic_vector(unsigned(i_op_assign_4_reg_188) + unsigned(ap_const_lv31_1));
    loc_V_2_fu_544_p1 <= p_Val2_s_fu_523_p1(23 - 1 downto 0);
    loc_V_3_fu_677_p4 <= p_Val2_23_fu_666_p1(30 downto 23);
    loc_V_4_fu_687_p1 <= p_Val2_23_fu_666_p1(23 - 1 downto 0);
    loc_V_fu_534_p4 <= p_Val2_s_fu_523_p1(30 downto 23);
    man_V_3_fu_297_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_4_fu_293_p1));
    man_V_4_fu_303_p3 <= 
        man_V_3_fu_297_p2 when (isneg_reg_1086(0) = '1') else 
        p_Result_4_fu_293_p1;
    newSel1_fu_473_p3 <= 
        p_071_s_fu_382_p3 when (sel_tmp9_fu_429_p2(0) = '1') else 
        tmp_118_fu_342_p1;
    newSel2_fu_487_p3 <= 
        newSel_fu_459_p3 when (or_cond_fu_467_p2(0) = '1') else 
        newSel1_fu_473_p3;
    newSel3_fu_501_p3 <= 
        newSel2_fu_487_p3 when (or_cond2_fu_495_p2(0) = '1') else 
        ap_const_lv32_0;
    newSel_fu_459_p3 <= 
        tmp_96_fu_389_p2 when (sel_tmp13_fu_453_p2(0) = '1') else 
        tmp_120_fu_378_p1;
    next_mul_fu_889_p2 <= std_logic_vector(signed(iscale_V_reg_1176) + signed(p_Val2_32_reg_199));
    or_cond1_fu_481_p2 <= (sel_tmp9_fu_429_p2 or sel_tmp2_fu_400_p2);
    or_cond2_fu_495_p2 <= (or_cond_fu_467_p2 or or_cond1_fu_481_p2);
    or_cond_fu_467_p2 <= (sel_tmp_fu_435_p2 or sel_tmp13_fu_453_p2);
    p_071_s_fu_382_p3 <= 
        ap_const_lv32_FFFFFFFF when (isneg_reg_1086(0) = '1') else 
        ap_const_lv32_0;
    p_4_fu_933_p3 <= 
        p_s_fu_925_p3 when (tmp_125_fu_903_p3(0) = '1') else 
        ret_V_fu_894_p4;
    p_5_fu_997_p3 <= 
        p_9_fu_989_p3 when (tmp_127_fu_965_p3(0) = '1') else 
        ret_V_7_fu_955_p4;
    p_9_fu_989_p3 <= 
        ret_V_7_fu_955_p4 when (tmp_102_fu_977_p2(0) = '1') else 
        ret_V_8_fu_983_p2;
    p_Result_3_fu_669_p3 <= p_Val2_23_fu_666_p1(31 downto 31);
    p_Result_4_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_fu_286_p3),54));
    p_Result_s_fu_526_p3 <= p_Val2_s_fu_523_p1(31 downto 31);
    p_Val2_20_fu_644_p3 <= 
        tmp_35_fu_630_p1 when (isNeg_fu_572_p3(0) = '1') else 
        tmp_36_fu_634_p4;
    p_Val2_23_fu_666_p1 <= x_assign_8_reg_1159;
    p_Val2_25_fu_787_p3 <= 
        tmp_39_fu_773_p1 when (isNeg_1_fu_715_p3(0) = '1') else 
        tmp_40_fu_777_p4;
    p_Val2_30_fu_840_p0 <= i_op_assign_cast_fu_813_p1(31 - 1 downto 0);
    p_Val2_30_fu_840_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &p_Val2_30_fu_840_p0) * signed(iscale_V_reg_1176))), 32));
    p_Val2_34_fu_658_p3 <= 
        p_Val2_i_i_i_fu_652_p2 when (p_Result_s_fu_526_p3(0) = '1') else 
        p_Val2_20_fu_644_p3;
    p_Val2_35_fu_801_p3 <= 
        p_Val2_i_i_i1_fu_795_p2 when (p_Result_3_fu_669_p3(0) = '1') else 
        p_Val2_25_fu_787_p3;
    p_Val2_i_i_i1_fu_795_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_25_fu_787_p3));
    p_Val2_i_i_i_fu_652_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_20_fu_644_p3));
    p_Val2_s_fu_523_p1 <= x_assign_reg_1154;
    p_s_fu_925_p3 <= 
        ret_V_fu_894_p4 when (tmp_100_fu_913_p2(0) = '1') else 
        ret_V_6_fu_919_p2;
        r0_fu_941_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_4_fu_933_p3),32));

    r_V_5_fu_949_p2 <= std_logic_vector(unsigned(ap_const_lv33_8000) + unsigned(tmp_101_fu_945_p1));
    r_V_fu_849_p2 <= std_logic_vector(unsigned(ap_const_lv33_8000) + unsigned(tmp_98_fu_845_p1));
    ret_V_6_fu_919_p2 <= std_logic_vector(unsigned(ap_const_lv17_1) + unsigned(ret_V_fu_894_p4));
    ret_V_7_fu_955_p4 <= r_V_5_fu_949_p2(32 downto 16);
    ret_V_8_fu_983_p2 <= std_logic_vector(unsigned(ap_const_lv17_1) + unsigned(ret_V_7_fu_955_p4));
    ret_V_fu_894_p4 <= r_V_reg_1196(32 downto 16);
    rev_fu_1014_p2 <= (slt_fu_1009_p2 xor ap_const_lv1_1);
    sel_tmp12_fu_447_p2 <= (sel_tmp21_demorgan_fu_441_p2 xor ap_const_lv1_1);
    sel_tmp13_fu_453_p2 <= (sel_tmp12_fu_447_p2 and icmp_fu_362_p2);
    sel_tmp1_fu_395_p2 <= (tmp_88_reg_1097 xor ap_const_lv1_1);
    sel_tmp21_demorgan_fu_441_p2 <= (tmp_89_fu_310_p2 or sel_tmp6_demorgan_fu_406_p2);
    sel_tmp2_fu_400_p2 <= (tmp_92_fu_337_p2 and sel_tmp1_fu_395_p2);
    sel_tmp6_demorgan_fu_406_p2 <= (tmp_92_fu_337_p2 or tmp_88_reg_1097);
    sel_tmp6_fu_411_p2 <= (sel_tmp6_demorgan_fu_406_p2 xor ap_const_lv1_1);
    sel_tmp7_fu_417_p2 <= (tmp_89_fu_310_p2 and sel_tmp6_fu_411_p2);
    sel_tmp8_fu_423_p2 <= (tmp_93_fu_346_p2 xor ap_const_lv1_1);
    sel_tmp9_fu_429_p2 <= (sel_tmp8_fu_423_p2 and sel_tmp7_fu_417_p2);
    sel_tmp_fu_435_p2 <= (tmp_93_fu_346_p2 and sel_tmp7_fu_417_p2);
        sh_amt_cast_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_325_p3),32));

    sh_amt_fu_325_p3 <= 
        tmp_90_fu_315_p2 when (tmp_89_fu_310_p2(0) = '1') else 
        tmp_91_fu_320_p2;
    sh_assign_2_fu_590_p3 <= 
        tmp_239_i_i_i_cast_fu_586_p1 when (isNeg_fu_572_p3(0) = '1') else 
        sh_assign_fu_566_p2;
        sh_assign_2_i_i_i12_1_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_4_fu_733_p3),25));

        sh_assign_2_i_i_i12_s_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_4_fu_733_p3),32));

        sh_assign_2_i_i_i_ca_1_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_2_fu_590_p3),25));

        sh_assign_2_i_i_i_ca_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_2_fu_590_p3),32));

    sh_assign_3_fu_709_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i8_cast_fu_705_p1));
    sh_assign_4_fu_733_p3 <= 
        tmp_239_i_i_i11_cast_fu_729_p1 when (isNeg_1_fu_715_p3(0) = '1') else 
        sh_assign_3_fu_709_p2;
    sh_assign_fu_566_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i_cast_fu_562_p1));
    slt_fu_1009_p2 <= "1" when (signed(r0_fu_941_p1) < signed(src_rows_read)) else "0";
    src_val_address0 <= tmp_48_cast_fu_1071_p1(17 - 1 downto 0);

    src_val_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src_val_ce0 <= ap_const_logic_1;
        else 
            src_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_100_fu_913_p2 <= "1" when (tmp_126_fu_910_p1 = ap_const_lv16_0) else "0";
        tmp_101_fu_945_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_32_reg_199),33));

    tmp_102_fu_977_p2 <= "1" when (tmp_128_fu_973_p1 = ap_const_lv16_0) else "0";
    tmp_103_fu_1020_p2 <= "1" when (signed(c0_fu_1005_p1) < signed(src_cols_read)) else "0";
    tmp_110_fu_622_p3 <= tmp_241_i_i_i_fu_610_p2(24 downto 24);
    tmp_114_fu_765_p3 <= tmp_241_i_i_i1_fu_753_p2(24 downto 24);
    tmp_115_fu_244_p1 <= ireg_V_fu_240_p1(63 - 1 downto 0);
    tmp_117_fu_270_p1 <= ireg_V_fu_240_p1(52 - 1 downto 0);
    tmp_118_fu_342_p1 <= man_V_4_fu_303_p3(32 - 1 downto 0);
    tmp_119_fu_352_p4 <= sh_amt_fu_325_p3(11 downto 5);
    tmp_120_fu_378_p1 <= tmp_95_fu_372_p2(32 - 1 downto 0);
    tmp_122_fu_519_p1 <= src_cols_read(19 - 1 downto 0);
    tmp_123_fu_828_p1 <= i_op_assign_reg_177(10 - 1 downto 0);
    tmp_124_fu_880_p1 <= i_op_assign_4_reg_188(19 - 1 downto 0);
    tmp_125_fu_903_p3 <= r_V_reg_1196(32 downto 32);
    tmp_126_fu_910_p1 <= r_V_reg_1196(16 - 1 downto 0);
    tmp_127_fu_965_p3 <= r_V_5_fu_949_p2(32 downto 32);
    tmp_128_fu_973_p1 <= r_V_5_fu_949_p2(16 - 1 downto 0);
        tmp_129_fu_1025_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_5_fu_997_p3),19));

    tmp_130_fu_1029_p2 <= std_logic_vector(signed(ap_const_lv19_7FFFF) + signed(tmp_122_reg_1129));
    tmp_131_fu_1034_p3 <= 
        tmp_129_fu_1025_p1 when (tmp_103_fu_1020_p2(0) = '1') else 
        tmp_130_fu_1029_p2;
    tmp_132_fu_1042_p1 <= src_rows_read(10 - 1 downto 0);
    tmp_133_fu_1045_p1 <= p_4_fu_933_p3(10 - 1 downto 0);
    tmp_134_fu_1049_p3 <= 
        tmp_132_fu_1042_p1 when (rev_fu_1014_p2(0) = '1') else 
        tmp_133_fu_1045_p1;
    tmp_238_i_i_i7_cast1_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_238_i_i_i7_fu_691_p4),79));
    tmp_238_i_i_i7_fu_691_p4 <= ((ap_const_lv1_1 & loc_V_4_fu_687_p1) & ap_const_lv1_0);
    tmp_238_i_i_i_cast1_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_238_i_i_i_fu_548_p4),79));
    tmp_238_i_i_i_fu_548_p4 <= ((ap_const_lv1_1 & loc_V_2_fu_544_p1) & ap_const_lv1_0);
        tmp_239_i_i_i11_cast_fu_729_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_239_i_i_i1_fu_723_p2),9));

    tmp_239_i_i_i1_fu_723_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_3_fu_677_p4));
        tmp_239_i_i_i_cast_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_239_i_i_i_fu_580_p2),9));

    tmp_239_i_i_i_fu_580_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_fu_534_p4));
    tmp_240_i_i_i1_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_2_i_i_i12_s_fu_741_p1),79));
    tmp_240_i_i_i_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_2_i_i_i_ca_fu_598_p1),79));
    tmp_241_i_i_i1_fu_753_p2 <= std_logic_vector(shift_right(unsigned(tmp_238_i_i_i7_fu_691_p4),to_integer(unsigned('0' & sh_assign_2_i_i_i12_1_fu_745_p1(25-1 downto 0)))));
    tmp_241_i_i_i_fu_610_p2 <= std_logic_vector(shift_right(unsigned(tmp_238_i_i_i_fu_548_p4),to_integer(unsigned('0' & sh_assign_2_i_i_i_ca_1_fu_602_p1(25-1 downto 0)))));
    tmp_242_i_i_i1_fu_759_p2 <= std_logic_vector(shift_left(unsigned(tmp_238_i_i_i7_cast1_fu_701_p1),to_integer(unsigned('0' & tmp_240_i_i_i1_fu_749_p1(31-1 downto 0)))));
    tmp_242_i_i_i_fu_616_p2 <= std_logic_vector(shift_left(unsigned(tmp_238_i_i_i_cast1_fu_558_p1),to_integer(unsigned('0' & tmp_240_i_i_i_fu_606_p1(31-1 downto 0)))));
    tmp_35_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_110_fu_622_p3),32));
    tmp_36_fu_634_p4 <= tmp_242_i_i_i_fu_616_p2(55 downto 24);
    tmp_39_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_114_fu_765_p3),32));
    tmp_40_fu_777_p4 <= tmp_242_i_i_i1_fu_759_p2(55 downto 24);
    tmp_43_cast_fu_832_p3 <= (tmp_123_fu_828_p1 & ap_const_lv9_0);
    tmp_44_cast_fu_1076_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_44_reg_1212),64));
    tmp_44_fu_884_p2 <= std_logic_vector(unsigned(tmp_124_fu_880_p1) + unsigned(tmp_43_cast_reg_1191));
    tmp_47_cast_fu_1057_p3 <= (tmp_134_fu_1049_p3 & ap_const_lv9_0);
        tmp_48_cast_fu_1071_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_48_fu_1065_p2),64));

    tmp_48_fu_1065_p2 <= std_logic_vector(unsigned(tmp_131_fu_1034_p3) + unsigned(tmp_47_cast_fu_1057_p3));
    tmp_57_fu_286_p3 <= (ap_const_lv1_1 & tmp_117_reg_1092);
    tmp_87_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_fu_256_p4),12));
    tmp_88_fu_274_p2 <= "1" when (tmp_115_fu_244_p1 = ap_const_lv63_0) else "0";
    tmp_89_fu_310_p2 <= "1" when (signed(F2_reg_1103) > signed(ap_const_lv12_10)) else "0";
    tmp_90_fu_315_p2 <= std_logic_vector(signed(ap_const_lv12_FF0) + signed(F2_reg_1103));
    tmp_91_fu_320_p2 <= std_logic_vector(unsigned(ap_const_lv12_10) - unsigned(F2_reg_1103));
    tmp_92_fu_337_p2 <= "1" when (F2_reg_1103 = ap_const_lv12_10) else "0";
    tmp_93_fu_346_p2 <= "1" when (unsigned(sh_amt_fu_325_p3) < unsigned(ap_const_lv12_36)) else "0";
    tmp_94_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_amt_cast_fu_333_p1),54));
    tmp_95_fu_372_p2 <= std_logic_vector(shift_right(signed(man_V_4_fu_303_p3),to_integer(unsigned('0' & tmp_94_fu_368_p1(31-1 downto 0)))));
    tmp_96_fu_389_p2 <= std_logic_vector(shift_left(unsigned(tmp_118_fu_342_p1),to_integer(unsigned('0' & sh_amt_cast_fu_333_p1(31-1 downto 0)))));
    tmp_97_fu_817_p2 <= "1" when (signed(i_op_assign_cast_fu_813_p1) < signed(p_Val2_34_reg_1164)) else "0";
        tmp_98_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_30_fu_840_p2),33));

    tmp_99_fu_869_p2 <= "1" when (signed(i_op_assign_4_cast_fu_865_p1) < signed(p_Val2_35_reg_1170)) else "0";
    tmp_i_i_i_i8_cast_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_3_fu_677_p4),9));
    tmp_i_i_i_i_cast_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_fu_534_p4),9));
end behav;
