// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module groupRectangles (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        rects_val_x_address0,
        rects_val_x_ce0,
        rects_val_x_q0,
        rects_val_y_address0,
        rects_val_y_ce0,
        rects_val_y_q0,
        rects_val_width_address0,
        rects_val_width_ce0,
        rects_val_width_q0,
        rects_val_height_address0,
        rects_val_height_ce0,
        rects_val_height_q0,
        rects_length_read,
        locations_val_address0,
        locations_val_ce0,
        locations_val_we0,
        locations_val_d0,
        locations_val_address1,
        locations_val_ce1,
        locations_val_we1,
        locations_val_d1,
        neighbors
);

parameter    ap_ST_fsm_state1 = 47'd1;
parameter    ap_ST_fsm_state2 = 47'd2;
parameter    ap_ST_fsm_state3 = 47'd4;
parameter    ap_ST_fsm_pp0_stage0 = 47'd8;
parameter    ap_ST_fsm_pp0_stage1 = 47'd16;
parameter    ap_ST_fsm_state7 = 47'd32;
parameter    ap_ST_fsm_state8 = 47'd64;
parameter    ap_ST_fsm_state9 = 47'd128;
parameter    ap_ST_fsm_state10 = 47'd256;
parameter    ap_ST_fsm_state11 = 47'd512;
parameter    ap_ST_fsm_state12 = 47'd1024;
parameter    ap_ST_fsm_state13 = 47'd2048;
parameter    ap_ST_fsm_state14 = 47'd4096;
parameter    ap_ST_fsm_state15 = 47'd8192;
parameter    ap_ST_fsm_state16 = 47'd16384;
parameter    ap_ST_fsm_state17 = 47'd32768;
parameter    ap_ST_fsm_state18 = 47'd65536;
parameter    ap_ST_fsm_state19 = 47'd131072;
parameter    ap_ST_fsm_state20 = 47'd262144;
parameter    ap_ST_fsm_state21 = 47'd524288;
parameter    ap_ST_fsm_state22 = 47'd1048576;
parameter    ap_ST_fsm_state23 = 47'd2097152;
parameter    ap_ST_fsm_state24 = 47'd4194304;
parameter    ap_ST_fsm_state25 = 47'd8388608;
parameter    ap_ST_fsm_state26 = 47'd16777216;
parameter    ap_ST_fsm_state27 = 47'd33554432;
parameter    ap_ST_fsm_state28 = 47'd67108864;
parameter    ap_ST_fsm_state29 = 47'd134217728;
parameter    ap_ST_fsm_state30 = 47'd268435456;
parameter    ap_ST_fsm_state31 = 47'd536870912;
parameter    ap_ST_fsm_state32 = 47'd1073741824;
parameter    ap_ST_fsm_state33 = 47'd2147483648;
parameter    ap_ST_fsm_state34 = 47'd4294967296;
parameter    ap_ST_fsm_state35 = 47'd8589934592;
parameter    ap_ST_fsm_state36 = 47'd17179869184;
parameter    ap_ST_fsm_state37 = 47'd34359738368;
parameter    ap_ST_fsm_state38 = 47'd68719476736;
parameter    ap_ST_fsm_state39 = 47'd137438953472;
parameter    ap_ST_fsm_state40 = 47'd274877906944;
parameter    ap_ST_fsm_state41 = 47'd549755813888;
parameter    ap_ST_fsm_state42 = 47'd1099511627776;
parameter    ap_ST_fsm_state43 = 47'd2199023255552;
parameter    ap_ST_fsm_state44 = 47'd4398046511104;
parameter    ap_ST_fsm_state45 = 47'd8796093022208;
parameter    ap_ST_fsm_state46 = 47'd17592186044416;
parameter    ap_ST_fsm_state47 = 47'd35184372088832;
parameter    ap_ST_fsm_state48 = 47'd70368744177664;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] rects_val_x_address0;
output   rects_val_x_ce0;
input  [15:0] rects_val_x_q0;
output  [9:0] rects_val_y_address0;
output   rects_val_y_ce0;
input  [15:0] rects_val_y_q0;
output  [9:0] rects_val_width_address0;
output   rects_val_width_ce0;
input  [15:0] rects_val_width_q0;
output  [9:0] rects_val_height_address0;
output   rects_val_height_ce0;
input  [15:0] rects_val_height_q0;
input  [31:0] rects_length_read;
output  [8:0] locations_val_address0;
output   locations_val_ce0;
output   locations_val_we0;
output  [15:0] locations_val_d0;
output  [8:0] locations_val_address1;
output   locations_val_ce1;
output   locations_val_we1;
output  [15:0] locations_val_d1;
input  [31:0] neighbors;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] rects_val_x_address0;
reg rects_val_x_ce0;
reg[9:0] rects_val_y_address0;
reg rects_val_y_ce0;
reg[9:0] rects_val_width_address0;
reg rects_val_width_ce0;
reg[9:0] rects_val_height_address0;
reg rects_val_height_ce0;
reg[8:0] locations_val_address0;
reg locations_val_ce0;
reg locations_val_we0;
reg[15:0] locations_val_d0;
reg[8:0] locations_val_address1;
reg locations_val_ce1;
reg locations_val_we1;
reg[15:0] locations_val_d1;

(* fsm_encoding = "none" *) reg   [46:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [30:0] i1_reg_377;
wire    ap_CS_fsm_state2;
wire    grp_partition_1000_s_fu_399_ap_idle;
wire    grp_partition_1000_s_fu_399_ap_ready;
wire    grp_partition_1000_s_fu_399_ap_done;
wire   [31:0] grp_partition_1000_s_fu_399_ap_return;
reg   [31:0] nclasses_reg_895;
wire   [0:0] exitcond_fu_418_p2;
wire    ap_CS_fsm_state3;
wire   [6:0] i_4_fu_424_p2;
wire   [0:0] tmp_s_fu_443_p2;
reg   [0:0] tmp_s_reg_909;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [30:0] i_5_fu_448_p2;
reg   [30:0] i_5_reg_913;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] tmp_40_fu_454_p1;
reg   [63:0] tmp_40_reg_918;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state5_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
reg   [6:0] rrects_x_addr_1_reg_936;
reg   [6:0] rrects_y_addr_1_reg_946;
reg   [6:0] rrects_width_addr_1_reg_956;
reg   [6:0] rrects_height_addr_1_reg_966;
reg   [6:0] rweights_addr_1_reg_971;
wire   [47:0] tmp_52_fu_519_p3;
reg   [47:0] tmp_52_reg_983;
wire    ap_CS_fsm_state7;
wire   [30:0] i_6_fu_540_p2;
reg   [30:0] i_6_reg_991;
wire    ap_CS_fsm_state8;
wire   [63:0] tmp_54_fu_546_p1;
reg   [63:0] tmp_54_reg_996;
wire   [0:0] tmp_53_fu_535_p2;
wire   [0:0] tmp_56_fu_566_p2;
reg   [0:0] tmp_56_reg_1009;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state45;
wire   [31:0] rrects_x_q0;
reg   [31:0] rrects_x_load_1_reg_1028;
wire    ap_CS_fsm_state46;
wire   [31:0] rrects_y_q0;
reg   [31:0] rrects_y_load_1_reg_1033;
wire   [31:0] grp_fu_575_p2;
reg   [31:0] tmp_50_reg_1048;
wire   [9:0] tmp_63_fu_659_p1;
reg   [9:0] tmp_63_reg_1053;
wire    ap_CS_fsm_state47;
wire   [15:0] tmp_15_fu_786_p3;
reg   [15:0] tmp_15_reg_1059;
wire   [15:0] tmp_20_fu_846_p3;
reg   [15:0] tmp_20_reg_1064;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
reg   [9:0] labels_address0;
reg    labels_ce0;
reg    labels_we0;
wire   [31:0] labels_q0;
reg   [6:0] rrects_x_address0;
reg    rrects_x_ce0;
reg    rrects_x_we0;
reg   [31:0] rrects_x_d0;
reg   [6:0] rrects_y_address0;
reg    rrects_y_ce0;
reg    rrects_y_we0;
reg   [31:0] rrects_y_d0;
reg   [6:0] rrects_width_address0;
reg    rrects_width_ce0;
reg    rrects_width_we0;
reg   [31:0] rrects_width_d0;
wire   [31:0] rrects_width_q0;
reg   [6:0] rrects_height_address0;
reg    rrects_height_ce0;
reg    rrects_height_we0;
reg   [31:0] rrects_height_d0;
wire   [31:0] rrects_height_q0;
reg   [6:0] rweights_address0;
reg    rweights_ce0;
reg    rweights_we0;
reg   [31:0] rweights_d0;
wire   [31:0] rweights_q0;
wire    grp_partition_1000_s_fu_399_ap_start;
wire   [9:0] grp_partition_1000_s_fu_399_rects_val_x_address0;
wire    grp_partition_1000_s_fu_399_rects_val_x_ce0;
wire   [9:0] grp_partition_1000_s_fu_399_rects_val_y_address0;
wire    grp_partition_1000_s_fu_399_rects_val_y_ce0;
wire   [9:0] grp_partition_1000_s_fu_399_rects_val_width_address0;
wire    grp_partition_1000_s_fu_399_rects_val_width_ce0;
wire   [9:0] grp_partition_1000_s_fu_399_rects_val_height_address0;
wire    grp_partition_1000_s_fu_399_rects_val_height_ce0;
wire   [9:0] grp_partition_1000_s_fu_399_labels_address0;
wire    grp_partition_1000_s_fu_399_labels_ce0;
wire    grp_partition_1000_s_fu_399_labels_we0;
wire   [31:0] grp_partition_1000_s_fu_399_labels_d0;
reg   [6:0] i_reg_366;
reg   [30:0] ap_phi_mux_i1_phi_fu_381_p4;
wire    ap_block_pp0_stage0;
reg   [30:0] i2_reg_388;
wire    ap_CS_fsm_state48;
reg    grp_partition_1000_s_fu_399_ap_start_reg;
wire   [63:0] tmp_39_fu_430_p1;
wire    ap_block_pp0_stage1;
wire  signed [63:0] tmp_42_fu_459_p1;
wire  signed [63:0] tmp_62_fu_654_p1;
wire  signed [63:0] tmp_14_cast_fu_669_p1;
wire  signed [63:0] tmp_19_cast_fu_864_p1;
wire  signed [63:0] tmp_21_cast_fu_874_p1;
reg   [31:0] num_fu_102;
wire  signed [31:0] num_1_fu_581_p2;
wire   [31:0] tmp_43_fu_472_p2;
wire   [31:0] tmp_45_fu_483_p2;
wire   [31:0] tmp_47_fu_494_p2;
wire   [31:0] tmp_49_fu_505_p2;
wire   [31:0] tmp_51_fu_512_p2;
wire   [15:0] tmp_57_fu_551_p1;
wire   [15:0] tmp_5_fu_645_p3;
wire   [15:0] tmp_10_fu_725_p3;
wire   [31:0] i1_cast_fu_439_p1;
wire  signed [31:0] tmp_41_fu_468_p1;
wire  signed [31:0] tmp_44_fu_479_p1;
wire  signed [31:0] tmp_46_fu_490_p1;
wire  signed [31:0] tmp_48_fu_501_p1;
wire   [31:0] i2_cast_fu_531_p1;
wire  signed [31:0] count_V_fu_556_p2;
wire  signed [47:0] tmp_55_fu_562_p1;
wire   [31:0] tmp_58_fu_587_p1;
wire  signed [31:0] r_V_fu_597_p0;
wire  signed [63:0] OP2_V_fu_593_p1;
wire  signed [31:0] r_V_fu_597_p1;
wire   [63:0] r_V_fu_597_p2;
wire   [15:0] tmp_60_fu_611_p1;
wire   [15:0] tmp_1_fu_621_p4;
wire   [0:0] tmp_61_fu_615_p2;
wire   [15:0] tmp_2_fu_631_p2;
wire   [0:0] tmp_59_fu_603_p3;
wire   [15:0] tmp_3_fu_637_p3;
wire   [9:0] tmp_14_fu_663_p2;
wire  signed [31:0] r_V_1_fu_677_p0;
wire  signed [31:0] r_V_1_fu_677_p1;
wire   [63:0] r_V_1_fu_677_p2;
wire   [15:0] tmp_65_fu_691_p1;
wire   [15:0] tmp_6_fu_701_p4;
wire   [0:0] tmp_66_fu_695_p2;
wire   [15:0] tmp_7_fu_711_p2;
wire   [0:0] tmp_64_fu_683_p3;
wire   [15:0] tmp_8_fu_717_p3;
wire  signed [31:0] r_V_2_fu_738_p0;
wire  signed [31:0] r_V_2_fu_738_p1;
wire   [63:0] r_V_2_fu_738_p2;
wire   [15:0] tmp_70_fu_752_p1;
wire   [15:0] tmp_11_fu_762_p4;
wire   [0:0] tmp_68_fu_756_p2;
wire   [15:0] tmp_12_fu_772_p2;
wire   [0:0] tmp_67_fu_744_p3;
wire   [15:0] tmp_13_fu_778_p3;
wire  signed [31:0] r_V_3_fu_798_p0;
wire  signed [31:0] r_V_3_fu_798_p1;
wire   [63:0] r_V_3_fu_798_p2;
wire   [15:0] tmp_72_fu_812_p1;
wire   [15:0] tmp_16_fu_822_p4;
wire   [0:0] tmp_69_fu_816_p2;
wire   [15:0] tmp_17_fu_832_p2;
wire   [0:0] tmp_71_fu_804_p3;
wire   [15:0] tmp_18_fu_838_p3;
wire   [9:0] tmp_19_fu_859_p2;
wire   [9:0] tmp_21_fu_869_p2;
reg    grp_fu_575_ap_start;
wire    grp_fu_575_ap_done;
reg   [46:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 47'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 grp_partition_1000_s_fu_399_ap_start_reg = 1'b0;
end

partition_1000_s_9j0 #(
    .DataWidth( 32 ),
    .AddressRange( 1000 ),
    .AddressWidth( 10 ))
labels_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(labels_address0),
    .ce0(labels_ce0),
    .we0(labels_we0),
    .d0(grp_partition_1000_s_fu_399_labels_d0),
    .q0(labels_q0)
);

groupRectangles_rbdk #(
    .DataWidth( 32 ),
    .AddressRange( 99 ),
    .AddressWidth( 7 ))
rrects_x_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rrects_x_address0),
    .ce0(rrects_x_ce0),
    .we0(rrects_x_we0),
    .d0(rrects_x_d0),
    .q0(rrects_x_q0)
);

groupRectangles_rbdk #(
    .DataWidth( 32 ),
    .AddressRange( 99 ),
    .AddressWidth( 7 ))
rrects_y_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rrects_y_address0),
    .ce0(rrects_y_ce0),
    .we0(rrects_y_we0),
    .d0(rrects_y_d0),
    .q0(rrects_y_q0)
);

groupRectangles_rbdk #(
    .DataWidth( 32 ),
    .AddressRange( 99 ),
    .AddressWidth( 7 ))
rrects_width_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rrects_width_address0),
    .ce0(rrects_width_ce0),
    .we0(rrects_width_we0),
    .d0(rrects_width_d0),
    .q0(rrects_width_q0)
);

groupRectangles_rbdk #(
    .DataWidth( 32 ),
    .AddressRange( 99 ),
    .AddressWidth( 7 ))
rrects_height_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rrects_height_address0),
    .ce0(rrects_height_ce0),
    .we0(rrects_height_we0),
    .d0(rrects_height_d0),
    .q0(rrects_height_q0)
);

groupRectangles_rbdk #(
    .DataWidth( 32 ),
    .AddressRange( 99 ),
    .AddressWidth( 7 ))
rweights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rweights_address0),
    .ce0(rweights_ce0),
    .we0(rweights_we0),
    .d0(rweights_d0),
    .q0(rweights_q0)
);

partition_1000_s grp_partition_1000_s_fu_399(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_partition_1000_s_fu_399_ap_start),
    .ap_done(grp_partition_1000_s_fu_399_ap_done),
    .ap_idle(grp_partition_1000_s_fu_399_ap_idle),
    .ap_ready(grp_partition_1000_s_fu_399_ap_ready),
    .rects_val_x_address0(grp_partition_1000_s_fu_399_rects_val_x_address0),
    .rects_val_x_ce0(grp_partition_1000_s_fu_399_rects_val_x_ce0),
    .rects_val_x_q0(rects_val_x_q0),
    .rects_val_y_address0(grp_partition_1000_s_fu_399_rects_val_y_address0),
    .rects_val_y_ce0(grp_partition_1000_s_fu_399_rects_val_y_ce0),
    .rects_val_y_q0(rects_val_y_q0),
    .rects_val_width_address0(grp_partition_1000_s_fu_399_rects_val_width_address0),
    .rects_val_width_ce0(grp_partition_1000_s_fu_399_rects_val_width_ce0),
    .rects_val_width_q0(rects_val_width_q0),
    .rects_val_height_address0(grp_partition_1000_s_fu_399_rects_val_height_address0),
    .rects_val_height_ce0(grp_partition_1000_s_fu_399_rects_val_height_ce0),
    .rects_val_height_q0(rects_val_height_q0),
    .rects_length_read(rects_length_read),
    .labels_address0(grp_partition_1000_s_fu_399_labels_address0),
    .labels_ce0(grp_partition_1000_s_fu_399_labels_ce0),
    .labels_we0(grp_partition_1000_s_fu_399_labels_we0),
    .labels_d0(grp_partition_1000_s_fu_399_labels_d0),
    .ap_return(grp_partition_1000_s_fu_399_ap_return)
);

Haar_Core_sdiv_34fYi #(
    .ID( 1 ),
    .NUM_STAGE( 38 ),
    .din0_WIDTH( 34 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Haar_Core_sdiv_34fYi_U559(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_575_ap_start),
    .done(grp_fu_575_ap_done),
    .din0(34'd4294967296),
    .din1(count_V_fu_556_p2),
    .ce(1'b1),
    .dout(grp_fu_575_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_418_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state4) & (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
        end else if ((((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_418_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_partition_1000_s_fu_399_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_partition_1000_s_fu_399_ap_start_reg <= 1'b1;
        end else if ((grp_partition_1000_s_fu_399_ap_ready == 1'b1)) begin
            grp_partition_1000_s_fu_399_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_418_p2 == 1'd1))) begin
        i1_reg_377 <= 31'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_s_reg_909 == 1'd1))) begin
        i1_reg_377 <= i_5_reg_913;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        i2_reg_388 <= i_6_reg_991;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i2_reg_388 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_partition_1000_s_fu_399_ap_done == 1'b1))) begin
        i_reg_366 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_418_p2 == 1'd0))) begin
        i_reg_366 <= i_4_fu_424_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        num_fu_102 <= num_1_fu_581_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        num_fu_102 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_5_reg_913 <= i_5_fu_448_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_6_reg_991 <= i_6_fu_540_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_partition_1000_s_fu_399_ap_done == 1'b1))) begin
        nclasses_reg_895 <= grp_partition_1000_s_fu_399_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (tmp_s_reg_909 == 1'd1))) begin
        rrects_height_addr_1_reg_966 <= tmp_42_fu_459_p1;
        rrects_width_addr_1_reg_956 <= tmp_42_fu_459_p1;
        rrects_x_addr_1_reg_936 <= tmp_42_fu_459_p1;
        rrects_y_addr_1_reg_946 <= tmp_42_fu_459_p1;
        rweights_addr_1_reg_971 <= tmp_42_fu_459_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        rrects_x_load_1_reg_1028 <= rrects_x_q0;
        rrects_y_load_1_reg_1033 <= rrects_y_q0;
        tmp_50_reg_1048 <= grp_fu_575_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        tmp_15_reg_1059 <= tmp_15_fu_786_p3;
        tmp_20_reg_1064 <= tmp_20_fu_846_p3;
        tmp_63_reg_1053 <= tmp_63_fu_659_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_s_fu_443_p2 == 1'd1))) begin
        tmp_40_reg_918[30 : 0] <= tmp_40_fu_454_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_52_reg_983[47 : 16] <= tmp_52_fu_519_p3[47 : 16];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_53_fu_535_p2 == 1'd1))) begin
        tmp_54_reg_996[30 : 0] <= tmp_54_fu_546_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_56_reg_1009 <= tmp_56_fu_566_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_s_reg_909 <= tmp_s_fu_443_p2;
    end
end

always @ (*) begin
    if ((tmp_s_fu_443_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_53_fu_535_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_s_reg_909 == 1'd1))) begin
        ap_phi_mux_i1_phi_fu_381_p4 = i_5_reg_913;
    end else begin
        ap_phi_mux_i1_phi_fu_381_p4 = i1_reg_377;
    end
end

always @ (*) begin
    if (((tmp_53_fu_535_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_56_fu_566_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_575_ap_start = 1'b1;
    end else begin
        grp_fu_575_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        labels_address0 = tmp_40_fu_454_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        labels_address0 = grp_partition_1000_s_fu_399_labels_address0;
    end else begin
        labels_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        labels_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        labels_ce0 = grp_partition_1000_s_fu_399_labels_ce0;
    end else begin
        labels_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        labels_we0 = grp_partition_1000_s_fu_399_labels_we0;
    end else begin
        labels_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        locations_val_address0 = tmp_21_cast_fu_874_p1;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        locations_val_address0 = tmp_62_fu_654_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        locations_val_address0 = 64'd0;
    end else begin
        locations_val_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        locations_val_address1 = tmp_19_cast_fu_864_p1;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        locations_val_address1 = tmp_14_cast_fu_669_p1;
    end else begin
        locations_val_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state8))) begin
        locations_val_ce0 = 1'b1;
    end else begin
        locations_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47))) begin
        locations_val_ce1 = 1'b1;
    end else begin
        locations_val_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        locations_val_d0 = tmp_20_reg_1064;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        locations_val_d0 = tmp_5_fu_645_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        locations_val_d0 = tmp_57_fu_551_p1;
    end else begin
        locations_val_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        locations_val_d1 = tmp_15_reg_1059;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        locations_val_d1 = tmp_10_fu_725_p3;
    end else begin
        locations_val_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | ((tmp_56_reg_1009 == 1'd0) & (1'b1 == ap_CS_fsm_state48)) | ((tmp_53_fu_535_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8)))) begin
        locations_val_we0 = 1'b1;
    end else begin
        locations_val_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | ((tmp_56_reg_1009 == 1'd0) & (1'b1 == ap_CS_fsm_state48)))) begin
        locations_val_we1 = 1'b1;
    end else begin
        locations_val_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        rects_val_height_address0 = tmp_40_reg_918;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        rects_val_height_address0 = grp_partition_1000_s_fu_399_rects_val_height_address0;
    end else begin
        rects_val_height_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        rects_val_height_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        rects_val_height_ce0 = grp_partition_1000_s_fu_399_rects_val_height_ce0;
    end else begin
        rects_val_height_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        rects_val_width_address0 = tmp_40_reg_918;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        rects_val_width_address0 = grp_partition_1000_s_fu_399_rects_val_width_address0;
    end else begin
        rects_val_width_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        rects_val_width_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        rects_val_width_ce0 = grp_partition_1000_s_fu_399_rects_val_width_ce0;
    end else begin
        rects_val_width_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        rects_val_x_address0 = tmp_40_reg_918;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        rects_val_x_address0 = grp_partition_1000_s_fu_399_rects_val_x_address0;
    end else begin
        rects_val_x_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        rects_val_x_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        rects_val_x_ce0 = grp_partition_1000_s_fu_399_rects_val_x_ce0;
    end else begin
        rects_val_x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        rects_val_y_address0 = tmp_40_reg_918;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        rects_val_y_address0 = grp_partition_1000_s_fu_399_rects_val_y_address0;
    end else begin
        rects_val_y_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        rects_val_y_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        rects_val_y_ce0 = grp_partition_1000_s_fu_399_rects_val_y_ce0;
    end else begin
        rects_val_y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        rrects_height_address0 = tmp_54_reg_996;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rrects_height_address0 = rrects_height_addr_1_reg_966;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        rrects_height_address0 = tmp_42_fu_459_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        rrects_height_address0 = tmp_39_fu_430_p1;
    end else begin
        rrects_height_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        rrects_height_ce0 = 1'b1;
    end else begin
        rrects_height_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rrects_height_d0 = tmp_49_fu_505_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        rrects_height_d0 = 32'd0;
    end else begin
        rrects_height_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_s_reg_909 == 1'd1)) | ((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_418_p2 == 1'd0)))) begin
        rrects_height_we0 = 1'b1;
    end else begin
        rrects_height_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        rrects_width_address0 = tmp_54_reg_996;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rrects_width_address0 = rrects_width_addr_1_reg_956;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        rrects_width_address0 = tmp_42_fu_459_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        rrects_width_address0 = tmp_39_fu_430_p1;
    end else begin
        rrects_width_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        rrects_width_ce0 = 1'b1;
    end else begin
        rrects_width_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rrects_width_d0 = tmp_47_fu_494_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        rrects_width_d0 = 32'd0;
    end else begin
        rrects_width_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_s_reg_909 == 1'd1)) | ((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_418_p2 == 1'd0)))) begin
        rrects_width_we0 = 1'b1;
    end else begin
        rrects_width_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        rrects_x_address0 = tmp_54_reg_996;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rrects_x_address0 = rrects_x_addr_1_reg_936;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        rrects_x_address0 = tmp_42_fu_459_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        rrects_x_address0 = tmp_39_fu_430_p1;
    end else begin
        rrects_x_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        rrects_x_ce0 = 1'b1;
    end else begin
        rrects_x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rrects_x_d0 = tmp_43_fu_472_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        rrects_x_d0 = 32'd0;
    end else begin
        rrects_x_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_s_reg_909 == 1'd1)) | ((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_418_p2 == 1'd0)))) begin
        rrects_x_we0 = 1'b1;
    end else begin
        rrects_x_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        rrects_y_address0 = tmp_54_reg_996;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rrects_y_address0 = rrects_y_addr_1_reg_946;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        rrects_y_address0 = tmp_42_fu_459_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        rrects_y_address0 = tmp_39_fu_430_p1;
    end else begin
        rrects_y_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        rrects_y_ce0 = 1'b1;
    end else begin
        rrects_y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rrects_y_d0 = tmp_45_fu_483_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        rrects_y_d0 = 32'd0;
    end else begin
        rrects_y_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_s_reg_909 == 1'd1)) | ((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_418_p2 == 1'd0)))) begin
        rrects_y_we0 = 1'b1;
    end else begin
        rrects_y_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        rweights_address0 = tmp_54_fu_546_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rweights_address0 = rweights_addr_1_reg_971;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        rweights_address0 = tmp_42_fu_459_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        rweights_address0 = tmp_39_fu_430_p1;
    end else begin
        rweights_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        rweights_ce0 = 1'b1;
    end else begin
        rweights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rweights_d0 = tmp_51_fu_512_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        rweights_d0 = 32'd0;
    end else begin
        rweights_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_s_reg_909 == 1'd1)) | ((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_418_p2 == 1'd0)))) begin
        rweights_we0 = 1'b1;
    end else begin
        rweights_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_partition_1000_s_fu_399_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_418_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_s_fu_443_p2 == 1'd0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_s_fu_443_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((tmp_53_fu_535_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (tmp_56_fu_566_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP2_V_fu_593_p1 = $signed(tmp_58_fu_587_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign count_V_fu_556_p2 = rweights_q0 << 32'd16;

assign exitcond_fu_418_p2 = ((i_reg_366 == 7'd99) ? 1'b1 : 1'b0);

assign grp_partition_1000_s_fu_399_ap_start = grp_partition_1000_s_fu_399_ap_start_reg;

assign i1_cast_fu_439_p1 = ap_phi_mux_i1_phi_fu_381_p4;

assign i2_cast_fu_531_p1 = i2_reg_388;

assign i_4_fu_424_p2 = (i_reg_366 + 7'd1);

assign i_5_fu_448_p2 = (ap_phi_mux_i1_phi_fu_381_p4 + 31'd1);

assign i_6_fu_540_p2 = (i2_reg_388 + 31'd1);

assign num_1_fu_581_p2 = (32'd1 + num_fu_102);

assign r_V_1_fu_677_p0 = OP2_V_fu_593_p1;

assign r_V_1_fu_677_p1 = rrects_y_load_1_reg_1033;

assign r_V_1_fu_677_p2 = ($signed(r_V_1_fu_677_p0) * $signed(r_V_1_fu_677_p1));

assign r_V_2_fu_738_p0 = OP2_V_fu_593_p1;

assign r_V_2_fu_738_p1 = rrects_width_q0;

assign r_V_2_fu_738_p2 = ($signed(r_V_2_fu_738_p0) * $signed(r_V_2_fu_738_p1));

assign r_V_3_fu_798_p0 = OP2_V_fu_593_p1;

assign r_V_3_fu_798_p1 = rrects_height_q0;

assign r_V_3_fu_798_p2 = ($signed(r_V_3_fu_798_p0) * $signed(r_V_3_fu_798_p1));

assign r_V_fu_597_p0 = OP2_V_fu_593_p1;

assign r_V_fu_597_p1 = rrects_x_load_1_reg_1028;

assign r_V_fu_597_p2 = ($signed(r_V_fu_597_p0) * $signed(r_V_fu_597_p1));

assign tmp_10_fu_725_p3 = ((tmp_64_fu_683_p3[0:0] === 1'b1) ? tmp_8_fu_717_p3 : tmp_6_fu_701_p4);

assign tmp_11_fu_762_p4 = {{r_V_2_fu_738_p2[31:16]}};

assign tmp_12_fu_772_p2 = (16'd1 + tmp_11_fu_762_p4);

assign tmp_13_fu_778_p3 = ((tmp_68_fu_756_p2[0:0] === 1'b1) ? tmp_11_fu_762_p4 : tmp_12_fu_772_p2);

assign tmp_14_cast_fu_669_p1 = $signed(tmp_14_fu_663_p2);

assign tmp_14_fu_663_p2 = (10'd100 + tmp_63_fu_659_p1);

assign tmp_15_fu_786_p3 = ((tmp_67_fu_744_p3[0:0] === 1'b1) ? tmp_13_fu_778_p3 : tmp_11_fu_762_p4);

assign tmp_16_fu_822_p4 = {{r_V_3_fu_798_p2[31:16]}};

assign tmp_17_fu_832_p2 = (16'd1 + tmp_16_fu_822_p4);

assign tmp_18_fu_838_p3 = ((tmp_69_fu_816_p2[0:0] === 1'b1) ? tmp_16_fu_822_p4 : tmp_17_fu_832_p2);

assign tmp_19_cast_fu_864_p1 = $signed(tmp_19_fu_859_p2);

assign tmp_19_fu_859_p2 = (10'd200 + tmp_63_reg_1053);

assign tmp_1_fu_621_p4 = {{r_V_fu_597_p2[31:16]}};

assign tmp_20_fu_846_p3 = ((tmp_71_fu_804_p3[0:0] === 1'b1) ? tmp_18_fu_838_p3 : tmp_16_fu_822_p4);

assign tmp_21_cast_fu_874_p1 = $signed(tmp_21_fu_869_p2);

assign tmp_21_fu_869_p2 = (10'd300 + tmp_63_reg_1053);

assign tmp_2_fu_631_p2 = (16'd1 + tmp_1_fu_621_p4);

assign tmp_39_fu_430_p1 = i_reg_366;

assign tmp_3_fu_637_p3 = ((tmp_61_fu_615_p2[0:0] === 1'b1) ? tmp_1_fu_621_p4 : tmp_2_fu_631_p2);

assign tmp_40_fu_454_p1 = ap_phi_mux_i1_phi_fu_381_p4;

assign tmp_41_fu_468_p1 = $signed(rects_val_x_q0);

assign tmp_42_fu_459_p1 = $signed(labels_q0);

assign tmp_43_fu_472_p2 = ($signed(rrects_x_q0) + $signed(tmp_41_fu_468_p1));

assign tmp_44_fu_479_p1 = $signed(rects_val_y_q0);

assign tmp_45_fu_483_p2 = ($signed(rrects_y_q0) + $signed(tmp_44_fu_479_p1));

assign tmp_46_fu_490_p1 = $signed(rects_val_width_q0);

assign tmp_47_fu_494_p2 = ($signed(rrects_width_q0) + $signed(tmp_46_fu_490_p1));

assign tmp_48_fu_501_p1 = $signed(rects_val_height_q0);

assign tmp_49_fu_505_p2 = ($signed(rrects_height_q0) + $signed(tmp_48_fu_501_p1));

assign tmp_51_fu_512_p2 = (rweights_q0 + 32'd1);

assign tmp_52_fu_519_p3 = {{neighbors}, {16'd0}};

assign tmp_53_fu_535_p2 = (($signed(i2_cast_fu_531_p1) < $signed(nclasses_reg_895)) ? 1'b1 : 1'b0);

assign tmp_54_fu_546_p1 = i2_reg_388;

assign tmp_55_fu_562_p1 = count_V_fu_556_p2;

assign tmp_56_fu_566_p2 = (($signed(tmp_55_fu_562_p1) < $signed(tmp_52_reg_983)) ? 1'b1 : 1'b0);

assign tmp_57_fu_551_p1 = num_fu_102[15:0];

assign tmp_58_fu_587_p1 = tmp_50_reg_1048[31:0];

assign tmp_59_fu_603_p3 = r_V_fu_597_p2[32'd63];

assign tmp_5_fu_645_p3 = ((tmp_59_fu_603_p3[0:0] === 1'b1) ? tmp_3_fu_637_p3 : tmp_1_fu_621_p4);

assign tmp_60_fu_611_p1 = r_V_fu_597_p2[15:0];

assign tmp_61_fu_615_p2 = ((tmp_60_fu_611_p1 == 16'd0) ? 1'b1 : 1'b0);

assign tmp_62_fu_654_p1 = num_1_fu_581_p2;

assign tmp_63_fu_659_p1 = num_1_fu_581_p2[9:0];

assign tmp_64_fu_683_p3 = r_V_1_fu_677_p2[32'd63];

assign tmp_65_fu_691_p1 = r_V_1_fu_677_p2[15:0];

assign tmp_66_fu_695_p2 = ((tmp_65_fu_691_p1 == 16'd0) ? 1'b1 : 1'b0);

assign tmp_67_fu_744_p3 = r_V_2_fu_738_p2[32'd63];

assign tmp_68_fu_756_p2 = ((tmp_70_fu_752_p1 == 16'd0) ? 1'b1 : 1'b0);

assign tmp_69_fu_816_p2 = ((tmp_72_fu_812_p1 == 16'd0) ? 1'b1 : 1'b0);

assign tmp_6_fu_701_p4 = {{r_V_1_fu_677_p2[31:16]}};

assign tmp_70_fu_752_p1 = r_V_2_fu_738_p2[15:0];

assign tmp_71_fu_804_p3 = r_V_3_fu_798_p2[32'd63];

assign tmp_72_fu_812_p1 = r_V_3_fu_798_p2[15:0];

assign tmp_7_fu_711_p2 = (16'd1 + tmp_6_fu_701_p4);

assign tmp_8_fu_717_p3 = ((tmp_66_fu_695_p2[0:0] === 1'b1) ? tmp_6_fu_701_p4 : tmp_7_fu_711_p2);

assign tmp_s_fu_443_p2 = (($signed(i1_cast_fu_439_p1) < $signed(rects_length_read)) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_40_reg_918[63:31] <= 33'b000000000000000000000000000000000;
    tmp_52_reg_983[15:0] <= 16'b0000000000000000;
    tmp_54_reg_996[63:31] <= 33'b000000000000000000000000000000000;
end

endmodule //groupRectangles
