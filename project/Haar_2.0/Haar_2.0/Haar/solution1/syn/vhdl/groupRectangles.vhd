-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity groupRectangles is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    rects_val_x_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    rects_val_x_ce0 : OUT STD_LOGIC;
    rects_val_x_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    rects_val_y_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    rects_val_y_ce0 : OUT STD_LOGIC;
    rects_val_y_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    rects_val_width_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    rects_val_width_ce0 : OUT STD_LOGIC;
    rects_val_width_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    rects_val_height_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    rects_val_height_ce0 : OUT STD_LOGIC;
    rects_val_height_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    rects_length_read : IN STD_LOGIC_VECTOR (31 downto 0);
    locations_val_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    locations_val_ce0 : OUT STD_LOGIC;
    locations_val_we0 : OUT STD_LOGIC;
    locations_val_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    locations_val_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    locations_val_ce1 : OUT STD_LOGIC;
    locations_val_we1 : OUT STD_LOGIC;
    locations_val_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    neighbors : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of groupRectangles is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (46 downto 0) := "00000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (46 downto 0) := "00000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (46 downto 0) := "00000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (46 downto 0) := "00000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (46 downto 0) := "00000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (46 downto 0) := "00000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (46 downto 0) := "00001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (46 downto 0) := "00010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (46 downto 0) := "00100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (46 downto 0) := "01000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (46 downto 0) := "10000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_63 : STD_LOGIC_VECTOR (6 downto 0) := "1100011";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv34_100000000 : STD_LOGIC_VECTOR (33 downto 0) := "0100000000000000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv10_64 : STD_LOGIC_VECTOR (9 downto 0) := "0001100100";
    constant ap_const_lv10_C8 : STD_LOGIC_VECTOR (9 downto 0) := "0011001000";
    constant ap_const_lv10_12C : STD_LOGIC_VECTOR (9 downto 0) := "0100101100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i1_reg_377 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_partition_1000_s_fu_399_ap_idle : STD_LOGIC;
    signal grp_partition_1000_s_fu_399_ap_ready : STD_LOGIC;
    signal grp_partition_1000_s_fu_399_ap_done : STD_LOGIC;
    signal grp_partition_1000_s_fu_399_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal nclasses_reg_895 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_4_fu_424_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_909 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_5_fu_448_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_5_reg_913 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_40_fu_454_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_reg_918 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state5_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal rrects_x_addr_1_reg_936 : STD_LOGIC_VECTOR (6 downto 0);
    signal rrects_y_addr_1_reg_946 : STD_LOGIC_VECTOR (6 downto 0);
    signal rrects_width_addr_1_reg_956 : STD_LOGIC_VECTOR (6 downto 0);
    signal rrects_height_addr_1_reg_966 : STD_LOGIC_VECTOR (6 downto 0);
    signal rweights_addr_1_reg_971 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_52_fu_519_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_52_reg_983 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_6_fu_540_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_6_reg_991 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_54_fu_546_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_54_reg_996 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_53_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_reg_1009 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal rrects_x_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rrects_x_load_1_reg_1028 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal rrects_y_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rrects_y_load_1_reg_1033 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_575_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_50_reg_1048 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_63_fu_659_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_63_reg_1053 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal tmp_15_fu_786_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_reg_1059 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_20_fu_846_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_20_reg_1064 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal labels_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal labels_ce0 : STD_LOGIC;
    signal labels_we0 : STD_LOGIC;
    signal labels_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rrects_x_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal rrects_x_ce0 : STD_LOGIC;
    signal rrects_x_we0 : STD_LOGIC;
    signal rrects_x_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rrects_y_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal rrects_y_ce0 : STD_LOGIC;
    signal rrects_y_we0 : STD_LOGIC;
    signal rrects_y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rrects_width_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal rrects_width_ce0 : STD_LOGIC;
    signal rrects_width_we0 : STD_LOGIC;
    signal rrects_width_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rrects_width_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rrects_height_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal rrects_height_ce0 : STD_LOGIC;
    signal rrects_height_we0 : STD_LOGIC;
    signal rrects_height_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rrects_height_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rweights_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal rweights_ce0 : STD_LOGIC;
    signal rweights_we0 : STD_LOGIC;
    signal rweights_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rweights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_partition_1000_s_fu_399_ap_start : STD_LOGIC;
    signal grp_partition_1000_s_fu_399_rects_val_x_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_partition_1000_s_fu_399_rects_val_x_ce0 : STD_LOGIC;
    signal grp_partition_1000_s_fu_399_rects_val_y_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_partition_1000_s_fu_399_rects_val_y_ce0 : STD_LOGIC;
    signal grp_partition_1000_s_fu_399_rects_val_width_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_partition_1000_s_fu_399_rects_val_width_ce0 : STD_LOGIC;
    signal grp_partition_1000_s_fu_399_rects_val_height_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_partition_1000_s_fu_399_rects_val_height_ce0 : STD_LOGIC;
    signal grp_partition_1000_s_fu_399_labels_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_partition_1000_s_fu_399_labels_ce0 : STD_LOGIC;
    signal grp_partition_1000_s_fu_399_labels_we0 : STD_LOGIC;
    signal grp_partition_1000_s_fu_399_labels_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_366 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_i1_phi_fu_381_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i2_reg_388 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal grp_partition_1000_s_fu_399_ap_start_reg : STD_LOGIC := '0';
    signal tmp_39_fu_430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal tmp_42_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_62_fu_654_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_cast_fu_669_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_cast_fu_864_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_cast_fu_874_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal num_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_1_fu_581_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_472_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_fu_483_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_47_fu_494_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_49_fu_505_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_fu_512_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_57_fu_551_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_645_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_725_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal i1_cast_fu_439_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_fu_468_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_fu_479_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_fu_490_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_fu_501_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i2_cast_fu_531_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_V_fu_556_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_55_fu_562_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_58_fu_587_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_fu_597_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal OP2_V_fu_593_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_fu_597_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_fu_597_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_60_fu_611_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_621_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_61_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_631_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_59_fu_603_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_637_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_fu_663_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_1_fu_677_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_1_fu_677_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_1_fu_677_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_65_fu_691_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_701_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_66_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_711_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_64_fu_683_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_717_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_2_fu_738_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_2_fu_738_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_2_fu_738_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_70_fu_752_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_762_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_68_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_772_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_67_fu_744_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_778_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_3_fu_798_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_3_fu_798_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_3_fu_798_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_72_fu_812_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_fu_822_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_69_fu_816_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_832_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_71_fu_804_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_838_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_19_fu_859_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_21_fu_869_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_575_ap_start : STD_LOGIC;
    signal grp_fu_575_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (46 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component partition_1000_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rects_val_x_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        rects_val_x_ce0 : OUT STD_LOGIC;
        rects_val_x_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        rects_val_y_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        rects_val_y_ce0 : OUT STD_LOGIC;
        rects_val_y_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        rects_val_width_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        rects_val_width_ce0 : OUT STD_LOGIC;
        rects_val_width_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        rects_val_height_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        rects_val_height_ce0 : OUT STD_LOGIC;
        rects_val_height_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        rects_length_read : IN STD_LOGIC_VECTOR (31 downto 0);
        labels_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        labels_ce0 : OUT STD_LOGIC;
        labels_we0 : OUT STD_LOGIC;
        labels_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Haar_Core_sdiv_34fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (33 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component partition_1000_s_9j0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component groupRectangles_rbdk IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    labels_U : component partition_1000_s_9j0
    generic map (
        DataWidth => 32,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => labels_address0,
        ce0 => labels_ce0,
        we0 => labels_we0,
        d0 => grp_partition_1000_s_fu_399_labels_d0,
        q0 => labels_q0);

    rrects_x_U : component groupRectangles_rbdk
    generic map (
        DataWidth => 32,
        AddressRange => 99,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rrects_x_address0,
        ce0 => rrects_x_ce0,
        we0 => rrects_x_we0,
        d0 => rrects_x_d0,
        q0 => rrects_x_q0);

    rrects_y_U : component groupRectangles_rbdk
    generic map (
        DataWidth => 32,
        AddressRange => 99,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rrects_y_address0,
        ce0 => rrects_y_ce0,
        we0 => rrects_y_we0,
        d0 => rrects_y_d0,
        q0 => rrects_y_q0);

    rrects_width_U : component groupRectangles_rbdk
    generic map (
        DataWidth => 32,
        AddressRange => 99,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rrects_width_address0,
        ce0 => rrects_width_ce0,
        we0 => rrects_width_we0,
        d0 => rrects_width_d0,
        q0 => rrects_width_q0);

    rrects_height_U : component groupRectangles_rbdk
    generic map (
        DataWidth => 32,
        AddressRange => 99,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rrects_height_address0,
        ce0 => rrects_height_ce0,
        we0 => rrects_height_we0,
        d0 => rrects_height_d0,
        q0 => rrects_height_q0);

    rweights_U : component groupRectangles_rbdk
    generic map (
        DataWidth => 32,
        AddressRange => 99,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rweights_address0,
        ce0 => rweights_ce0,
        we0 => rweights_we0,
        d0 => rweights_d0,
        q0 => rweights_q0);

    grp_partition_1000_s_fu_399 : component partition_1000_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_partition_1000_s_fu_399_ap_start,
        ap_done => grp_partition_1000_s_fu_399_ap_done,
        ap_idle => grp_partition_1000_s_fu_399_ap_idle,
        ap_ready => grp_partition_1000_s_fu_399_ap_ready,
        rects_val_x_address0 => grp_partition_1000_s_fu_399_rects_val_x_address0,
        rects_val_x_ce0 => grp_partition_1000_s_fu_399_rects_val_x_ce0,
        rects_val_x_q0 => rects_val_x_q0,
        rects_val_y_address0 => grp_partition_1000_s_fu_399_rects_val_y_address0,
        rects_val_y_ce0 => grp_partition_1000_s_fu_399_rects_val_y_ce0,
        rects_val_y_q0 => rects_val_y_q0,
        rects_val_width_address0 => grp_partition_1000_s_fu_399_rects_val_width_address0,
        rects_val_width_ce0 => grp_partition_1000_s_fu_399_rects_val_width_ce0,
        rects_val_width_q0 => rects_val_width_q0,
        rects_val_height_address0 => grp_partition_1000_s_fu_399_rects_val_height_address0,
        rects_val_height_ce0 => grp_partition_1000_s_fu_399_rects_val_height_ce0,
        rects_val_height_q0 => rects_val_height_q0,
        rects_length_read => rects_length_read,
        labels_address0 => grp_partition_1000_s_fu_399_labels_address0,
        labels_ce0 => grp_partition_1000_s_fu_399_labels_ce0,
        labels_we0 => grp_partition_1000_s_fu_399_labels_we0,
        labels_d0 => grp_partition_1000_s_fu_399_labels_d0,
        ap_return => grp_partition_1000_s_fu_399_ap_return);

    Haar_Core_sdiv_34fYi_U559 : component Haar_Core_sdiv_34fYi
    generic map (
        ID => 1,
        NUM_STAGE => 38,
        din0_WIDTH => 34,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_575_ap_start,
        done => grp_fu_575_ap_done,
        din0 => ap_const_lv34_100000000,
        din1 => count_V_fu_556_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_575_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_418_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_418_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_partition_1000_s_fu_399_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_partition_1000_s_fu_399_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_partition_1000_s_fu_399_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_partition_1000_s_fu_399_ap_ready = ap_const_logic_1)) then 
                    grp_partition_1000_s_fu_399_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_377_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_418_p2 = ap_const_lv1_1))) then 
                i1_reg_377 <= ap_const_lv31_0;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_s_reg_909 = ap_const_lv1_1))) then 
                i1_reg_377 <= i_5_reg_913;
            end if; 
        end if;
    end process;

    i2_reg_388_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                i2_reg_388 <= i_6_reg_991;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i2_reg_388 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i_reg_366_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_partition_1000_s_fu_399_ap_done = ap_const_logic_1))) then 
                i_reg_366 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_418_p2 = ap_const_lv1_0))) then 
                i_reg_366 <= i_4_fu_424_p2;
            end if; 
        end if;
    end process;

    num_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                num_fu_102 <= num_1_fu_581_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                num_fu_102 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_5_reg_913 <= i_5_fu_448_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_6_reg_991 <= i_6_fu_540_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_partition_1000_s_fu_399_ap_done = ap_const_logic_1))) then
                nclasses_reg_895 <= grp_partition_1000_s_fu_399_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (tmp_s_reg_909 = ap_const_lv1_1))) then
                rrects_height_addr_1_reg_966 <= tmp_42_fu_459_p1(7 - 1 downto 0);
                rrects_width_addr_1_reg_956 <= tmp_42_fu_459_p1(7 - 1 downto 0);
                rrects_x_addr_1_reg_936 <= tmp_42_fu_459_p1(7 - 1 downto 0);
                rrects_y_addr_1_reg_946 <= tmp_42_fu_459_p1(7 - 1 downto 0);
                rweights_addr_1_reg_971 <= tmp_42_fu_459_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                rrects_x_load_1_reg_1028 <= rrects_x_q0;
                rrects_y_load_1_reg_1033 <= rrects_y_q0;
                tmp_50_reg_1048 <= grp_fu_575_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                tmp_15_reg_1059 <= tmp_15_fu_786_p3;
                tmp_20_reg_1064 <= tmp_20_fu_846_p3;
                tmp_63_reg_1053 <= tmp_63_fu_659_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_s_fu_443_p2 = ap_const_lv1_1))) then
                    tmp_40_reg_918(30 downto 0) <= tmp_40_fu_454_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                    tmp_52_reg_983(47 downto 16) <= tmp_52_fu_519_p3(47 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_53_fu_535_p2 = ap_const_lv1_1))) then
                    tmp_54_reg_996(30 downto 0) <= tmp_54_fu_546_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_56_reg_1009 <= tmp_56_fu_566_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_s_reg_909 <= tmp_s_fu_443_p2;
            end if;
        end if;
    end process;
    tmp_40_reg_918(63 downto 31) <= "000000000000000000000000000000000";
    tmp_52_reg_983(15 downto 0) <= "0000000000000000";
    tmp_54_reg_996(63 downto 31) <= "000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_partition_1000_s_fu_399_ap_done, exitcond_fu_418_p2, ap_CS_fsm_state3, tmp_s_fu_443_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state8, tmp_53_fu_535_p2, tmp_56_fu_566_p2, ap_CS_fsm_state9, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_partition_1000_s_fu_399_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_418_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_s_fu_443_p2 = ap_const_lv1_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_s_fu_443_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((tmp_53_fu_535_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_56_fu_566_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
        OP2_V_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_58_fu_587_p1),64));

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state45 <= ap_CS_fsm(43);
    ap_CS_fsm_state46 <= ap_CS_fsm(44);
    ap_CS_fsm_state47 <= ap_CS_fsm(45);
    ap_CS_fsm_state48 <= ap_CS_fsm(46);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(tmp_s_fu_443_p2)
    begin
        if ((tmp_s_fu_443_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state8, tmp_53_fu_535_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_53_fu_535_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i1_phi_fu_381_p4_assign_proc : process(i1_reg_377, tmp_s_reg_909, ap_CS_fsm_pp0_stage0, i_5_reg_913, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_s_reg_909 = ap_const_lv1_1))) then 
            ap_phi_mux_i1_phi_fu_381_p4 <= i_5_reg_913;
        else 
            ap_phi_mux_i1_phi_fu_381_p4 <= i1_reg_377;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8, tmp_53_fu_535_p2)
    begin
        if (((tmp_53_fu_535_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    count_V_fu_556_p2 <= std_logic_vector(shift_left(unsigned(rweights_q0),to_integer(unsigned('0' & ap_const_lv32_10(31-1 downto 0)))));
    exitcond_fu_418_p2 <= "1" when (i_reg_366 = ap_const_lv7_63) else "0";

    grp_fu_575_ap_start_assign_proc : process(tmp_56_fu_566_p2, ap_CS_fsm_state9)
    begin
        if (((tmp_56_fu_566_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_575_ap_start <= ap_const_logic_1;
        else 
            grp_fu_575_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_partition_1000_s_fu_399_ap_start <= grp_partition_1000_s_fu_399_ap_start_reg;
    i1_cast_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i1_phi_fu_381_p4),32));
    i2_cast_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_reg_388),32));
    i_4_fu_424_p2 <= std_logic_vector(unsigned(i_reg_366) + unsigned(ap_const_lv7_1));
    i_5_fu_448_p2 <= std_logic_vector(unsigned(ap_phi_mux_i1_phi_fu_381_p4) + unsigned(ap_const_lv31_1));
    i_6_fu_540_p2 <= std_logic_vector(unsigned(i2_reg_388) + unsigned(ap_const_lv31_1));

    labels_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_40_fu_454_p1, grp_partition_1000_s_fu_399_labels_address0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            labels_address0 <= tmp_40_fu_454_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            labels_address0 <= grp_partition_1000_s_fu_399_labels_address0;
        else 
            labels_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    labels_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, grp_partition_1000_s_fu_399_labels_ce0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            labels_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            labels_ce0 <= grp_partition_1000_s_fu_399_labels_ce0;
        else 
            labels_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    labels_we0_assign_proc : process(ap_CS_fsm_state2, grp_partition_1000_s_fu_399_labels_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            labels_we0 <= grp_partition_1000_s_fu_399_labels_we0;
        else 
            labels_we0 <= ap_const_logic_0;
        end if; 
    end process;


    locations_val_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state47, ap_CS_fsm_state48, tmp_62_fu_654_p1, tmp_21_cast_fu_874_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            locations_val_address0 <= tmp_21_cast_fu_874_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            locations_val_address0 <= tmp_62_fu_654_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            locations_val_address0 <= ap_const_lv64_0(9 - 1 downto 0);
        else 
            locations_val_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    locations_val_address1_assign_proc : process(ap_CS_fsm_state47, ap_CS_fsm_state48, tmp_14_cast_fu_669_p1, tmp_19_cast_fu_864_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            locations_val_address1 <= tmp_19_cast_fu_864_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            locations_val_address1 <= tmp_14_cast_fu_669_p1(9 - 1 downto 0);
        else 
            locations_val_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    locations_val_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state47, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            locations_val_ce0 <= ap_const_logic_1;
        else 
            locations_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    locations_val_ce1_assign_proc : process(ap_CS_fsm_state47, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            locations_val_ce1 <= ap_const_logic_1;
        else 
            locations_val_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    locations_val_d0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state47, tmp_20_reg_1064, ap_CS_fsm_state48, tmp_57_fu_551_p1, tmp_5_fu_645_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            locations_val_d0 <= tmp_20_reg_1064;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            locations_val_d0 <= tmp_5_fu_645_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            locations_val_d0 <= tmp_57_fu_551_p1;
        else 
            locations_val_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    locations_val_d1_assign_proc : process(ap_CS_fsm_state47, tmp_15_reg_1059, ap_CS_fsm_state48, tmp_10_fu_725_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            locations_val_d1 <= tmp_15_reg_1059;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            locations_val_d1 <= tmp_10_fu_725_p3;
        else 
            locations_val_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    locations_val_we0_assign_proc : process(ap_CS_fsm_state8, tmp_53_fu_535_p2, tmp_56_reg_1009, ap_CS_fsm_state47, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or ((tmp_56_reg_1009 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((tmp_53_fu_535_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            locations_val_we0 <= ap_const_logic_1;
        else 
            locations_val_we0 <= ap_const_logic_0;
        end if; 
    end process;


    locations_val_we1_assign_proc : process(tmp_56_reg_1009, ap_CS_fsm_state47, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or ((tmp_56_reg_1009 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state48)))) then 
            locations_val_we1 <= ap_const_logic_1;
        else 
            locations_val_we1 <= ap_const_logic_0;
        end if; 
    end process;

    num_1_fu_581_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(num_fu_102));
    r_V_1_fu_677_p0 <= OP2_V_fu_593_p1(32 - 1 downto 0);
    r_V_1_fu_677_p1 <= rrects_y_load_1_reg_1033;
    r_V_1_fu_677_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_1_fu_677_p0) * signed(r_V_1_fu_677_p1))), 64));
    r_V_2_fu_738_p0 <= OP2_V_fu_593_p1(32 - 1 downto 0);
    r_V_2_fu_738_p1 <= rrects_width_q0;
    r_V_2_fu_738_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_2_fu_738_p0) * signed(r_V_2_fu_738_p1))), 64));
    r_V_3_fu_798_p0 <= OP2_V_fu_593_p1(32 - 1 downto 0);
    r_V_3_fu_798_p1 <= rrects_height_q0;
    r_V_3_fu_798_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_3_fu_798_p0) * signed(r_V_3_fu_798_p1))), 64));
    r_V_fu_597_p0 <= OP2_V_fu_593_p1(32 - 1 downto 0);
    r_V_fu_597_p1 <= rrects_x_load_1_reg_1028;
    r_V_fu_597_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_fu_597_p0) * signed(r_V_fu_597_p1))), 64));

    rects_val_height_address0_assign_proc : process(ap_CS_fsm_state2, ap_enable_reg_pp0_iter0, tmp_40_reg_918, ap_CS_fsm_pp0_stage1, grp_partition_1000_s_fu_399_rects_val_height_address0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            rects_val_height_address0 <= tmp_40_reg_918(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rects_val_height_address0 <= grp_partition_1000_s_fu_399_rects_val_height_address0;
        else 
            rects_val_height_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    rects_val_height_ce0_assign_proc : process(ap_CS_fsm_state2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, grp_partition_1000_s_fu_399_rects_val_height_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            rects_val_height_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rects_val_height_ce0 <= grp_partition_1000_s_fu_399_rects_val_height_ce0;
        else 
            rects_val_height_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rects_val_width_address0_assign_proc : process(ap_CS_fsm_state2, ap_enable_reg_pp0_iter0, tmp_40_reg_918, ap_CS_fsm_pp0_stage1, grp_partition_1000_s_fu_399_rects_val_width_address0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            rects_val_width_address0 <= tmp_40_reg_918(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rects_val_width_address0 <= grp_partition_1000_s_fu_399_rects_val_width_address0;
        else 
            rects_val_width_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    rects_val_width_ce0_assign_proc : process(ap_CS_fsm_state2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, grp_partition_1000_s_fu_399_rects_val_width_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            rects_val_width_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rects_val_width_ce0 <= grp_partition_1000_s_fu_399_rects_val_width_ce0;
        else 
            rects_val_width_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rects_val_x_address0_assign_proc : process(ap_CS_fsm_state2, ap_enable_reg_pp0_iter0, tmp_40_reg_918, ap_CS_fsm_pp0_stage1, grp_partition_1000_s_fu_399_rects_val_x_address0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            rects_val_x_address0 <= tmp_40_reg_918(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rects_val_x_address0 <= grp_partition_1000_s_fu_399_rects_val_x_address0;
        else 
            rects_val_x_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    rects_val_x_ce0_assign_proc : process(ap_CS_fsm_state2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, grp_partition_1000_s_fu_399_rects_val_x_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            rects_val_x_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rects_val_x_ce0 <= grp_partition_1000_s_fu_399_rects_val_x_ce0;
        else 
            rects_val_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rects_val_y_address0_assign_proc : process(ap_CS_fsm_state2, ap_enable_reg_pp0_iter0, tmp_40_reg_918, ap_CS_fsm_pp0_stage1, grp_partition_1000_s_fu_399_rects_val_y_address0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            rects_val_y_address0 <= tmp_40_reg_918(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rects_val_y_address0 <= grp_partition_1000_s_fu_399_rects_val_y_address0;
        else 
            rects_val_y_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    rects_val_y_ce0_assign_proc : process(ap_CS_fsm_state2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, grp_partition_1000_s_fu_399_rects_val_y_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            rects_val_y_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rects_val_y_ce0 <= grp_partition_1000_s_fu_399_rects_val_y_ce0;
        else 
            rects_val_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rrects_height_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, rrects_height_addr_1_reg_966, tmp_54_reg_996, ap_CS_fsm_state46, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_39_fu_430_p1, ap_block_pp0_stage1, tmp_42_fu_459_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            rrects_height_address0 <= tmp_54_reg_996(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rrects_height_address0 <= rrects_height_addr_1_reg_966;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            rrects_height_address0 <= tmp_42_fu_459_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            rrects_height_address0 <= tmp_39_fu_430_p1(7 - 1 downto 0);
        else 
            rrects_height_address0 <= "XXXXXXX";
        end if; 
    end process;


    rrects_height_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_state46, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            rrects_height_ce0 <= ap_const_logic_1;
        else 
            rrects_height_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rrects_height_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_49_fu_505_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rrects_height_d0 <= tmp_49_fu_505_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            rrects_height_d0 <= ap_const_lv32_0;
        else 
            rrects_height_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    rrects_height_we0_assign_proc : process(exitcond_fu_418_p2, ap_CS_fsm_state3, tmp_s_reg_909, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_s_reg_909 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_418_p2 = ap_const_lv1_0)))) then 
            rrects_height_we0 <= ap_const_logic_1;
        else 
            rrects_height_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rrects_width_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, rrects_width_addr_1_reg_956, tmp_54_reg_996, ap_CS_fsm_state46, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_39_fu_430_p1, ap_block_pp0_stage1, tmp_42_fu_459_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            rrects_width_address0 <= tmp_54_reg_996(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rrects_width_address0 <= rrects_width_addr_1_reg_956;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            rrects_width_address0 <= tmp_42_fu_459_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            rrects_width_address0 <= tmp_39_fu_430_p1(7 - 1 downto 0);
        else 
            rrects_width_address0 <= "XXXXXXX";
        end if; 
    end process;


    rrects_width_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_state46, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            rrects_width_ce0 <= ap_const_logic_1;
        else 
            rrects_width_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rrects_width_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_47_fu_494_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rrects_width_d0 <= tmp_47_fu_494_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            rrects_width_d0 <= ap_const_lv32_0;
        else 
            rrects_width_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    rrects_width_we0_assign_proc : process(exitcond_fu_418_p2, ap_CS_fsm_state3, tmp_s_reg_909, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_s_reg_909 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_418_p2 = ap_const_lv1_0)))) then 
            rrects_width_we0 <= ap_const_logic_1;
        else 
            rrects_width_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rrects_x_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, rrects_x_addr_1_reg_936, tmp_54_reg_996, ap_CS_fsm_state45, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_39_fu_430_p1, ap_block_pp0_stage1, tmp_42_fu_459_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            rrects_x_address0 <= tmp_54_reg_996(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rrects_x_address0 <= rrects_x_addr_1_reg_936;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            rrects_x_address0 <= tmp_42_fu_459_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            rrects_x_address0 <= tmp_39_fu_430_p1(7 - 1 downto 0);
        else 
            rrects_x_address0 <= "XXXXXXX";
        end if; 
    end process;


    rrects_x_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_state45, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            rrects_x_ce0 <= ap_const_logic_1;
        else 
            rrects_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rrects_x_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_43_fu_472_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rrects_x_d0 <= tmp_43_fu_472_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            rrects_x_d0 <= ap_const_lv32_0;
        else 
            rrects_x_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    rrects_x_we0_assign_proc : process(exitcond_fu_418_p2, ap_CS_fsm_state3, tmp_s_reg_909, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_s_reg_909 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_418_p2 = ap_const_lv1_0)))) then 
            rrects_x_we0 <= ap_const_logic_1;
        else 
            rrects_x_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rrects_y_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, rrects_y_addr_1_reg_946, tmp_54_reg_996, ap_CS_fsm_state45, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_39_fu_430_p1, ap_block_pp0_stage1, tmp_42_fu_459_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            rrects_y_address0 <= tmp_54_reg_996(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rrects_y_address0 <= rrects_y_addr_1_reg_946;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            rrects_y_address0 <= tmp_42_fu_459_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            rrects_y_address0 <= tmp_39_fu_430_p1(7 - 1 downto 0);
        else 
            rrects_y_address0 <= "XXXXXXX";
        end if; 
    end process;


    rrects_y_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_state45, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            rrects_y_ce0 <= ap_const_logic_1;
        else 
            rrects_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rrects_y_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_45_fu_483_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rrects_y_d0 <= tmp_45_fu_483_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            rrects_y_d0 <= ap_const_lv32_0;
        else 
            rrects_y_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    rrects_y_we0_assign_proc : process(exitcond_fu_418_p2, ap_CS_fsm_state3, tmp_s_reg_909, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_s_reg_909 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_418_p2 = ap_const_lv1_0)))) then 
            rrects_y_we0 <= ap_const_logic_1;
        else 
            rrects_y_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rweights_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, rweights_addr_1_reg_971, ap_CS_fsm_state8, tmp_54_fu_546_p1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_39_fu_430_p1, ap_block_pp0_stage1, tmp_42_fu_459_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            rweights_address0 <= tmp_54_fu_546_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rweights_address0 <= rweights_addr_1_reg_971;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            rweights_address0 <= tmp_42_fu_459_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            rweights_address0 <= tmp_39_fu_430_p1(7 - 1 downto 0);
        else 
            rweights_address0 <= "XXXXXXX";
        end if; 
    end process;


    rweights_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_state8, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            rweights_ce0 <= ap_const_logic_1;
        else 
            rweights_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rweights_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_51_fu_512_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rweights_d0 <= tmp_51_fu_512_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            rweights_d0 <= ap_const_lv32_0;
        else 
            rweights_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    rweights_we0_assign_proc : process(exitcond_fu_418_p2, ap_CS_fsm_state3, tmp_s_reg_909, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_s_reg_909 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_418_p2 = ap_const_lv1_0)))) then 
            rweights_we0 <= ap_const_logic_1;
        else 
            rweights_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_725_p3 <= 
        tmp_8_fu_717_p3 when (tmp_64_fu_683_p3(0) = '1') else 
        tmp_6_fu_701_p4;
    tmp_11_fu_762_p4 <= r_V_2_fu_738_p2(31 downto 16);
    tmp_12_fu_772_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_11_fu_762_p4));
    tmp_13_fu_778_p3 <= 
        tmp_11_fu_762_p4 when (tmp_68_fu_756_p2(0) = '1') else 
        tmp_12_fu_772_p2;
        tmp_14_cast_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_fu_663_p2),64));

    tmp_14_fu_663_p2 <= std_logic_vector(unsigned(ap_const_lv10_64) + unsigned(tmp_63_fu_659_p1));
    tmp_15_fu_786_p3 <= 
        tmp_13_fu_778_p3 when (tmp_67_fu_744_p3(0) = '1') else 
        tmp_11_fu_762_p4;
    tmp_16_fu_822_p4 <= r_V_3_fu_798_p2(31 downto 16);
    tmp_17_fu_832_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_16_fu_822_p4));
    tmp_18_fu_838_p3 <= 
        tmp_16_fu_822_p4 when (tmp_69_fu_816_p2(0) = '1') else 
        tmp_17_fu_832_p2;
        tmp_19_cast_fu_864_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_19_fu_859_p2),64));

    tmp_19_fu_859_p2 <= std_logic_vector(unsigned(ap_const_lv10_C8) + unsigned(tmp_63_reg_1053));
    tmp_1_fu_621_p4 <= r_V_fu_597_p2(31 downto 16);
    tmp_20_fu_846_p3 <= 
        tmp_18_fu_838_p3 when (tmp_71_fu_804_p3(0) = '1') else 
        tmp_16_fu_822_p4;
        tmp_21_cast_fu_874_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_21_fu_869_p2),64));

    tmp_21_fu_869_p2 <= std_logic_vector(unsigned(ap_const_lv10_12C) + unsigned(tmp_63_reg_1053));
    tmp_2_fu_631_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_1_fu_621_p4));
    tmp_39_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_366),64));
    tmp_3_fu_637_p3 <= 
        tmp_1_fu_621_p4 when (tmp_61_fu_615_p2(0) = '1') else 
        tmp_2_fu_631_p2;
    tmp_40_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i1_phi_fu_381_p4),64));
        tmp_41_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rects_val_x_q0),32));

        tmp_42_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(labels_q0),64));

    tmp_43_fu_472_p2 <= std_logic_vector(unsigned(rrects_x_q0) + unsigned(tmp_41_fu_468_p1));
        tmp_44_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rects_val_y_q0),32));

    tmp_45_fu_483_p2 <= std_logic_vector(unsigned(rrects_y_q0) + unsigned(tmp_44_fu_479_p1));
        tmp_46_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rects_val_width_q0),32));

    tmp_47_fu_494_p2 <= std_logic_vector(unsigned(rrects_width_q0) + unsigned(tmp_46_fu_490_p1));
        tmp_48_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rects_val_height_q0),32));

    tmp_49_fu_505_p2 <= std_logic_vector(unsigned(rrects_height_q0) + unsigned(tmp_48_fu_501_p1));
    tmp_51_fu_512_p2 <= std_logic_vector(unsigned(rweights_q0) + unsigned(ap_const_lv32_1));
    tmp_52_fu_519_p3 <= (neighbors & ap_const_lv16_0);
    tmp_53_fu_535_p2 <= "1" when (signed(i2_cast_fu_531_p1) < signed(nclasses_reg_895)) else "0";
    tmp_54_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_reg_388),64));
        tmp_55_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(count_V_fu_556_p2),48));

    tmp_56_fu_566_p2 <= "1" when (signed(tmp_55_fu_562_p1) < signed(tmp_52_reg_983)) else "0";
    tmp_57_fu_551_p1 <= num_fu_102(16 - 1 downto 0);
    tmp_58_fu_587_p1 <= tmp_50_reg_1048(32 - 1 downto 0);
    tmp_59_fu_603_p3 <= r_V_fu_597_p2(63 downto 63);
    tmp_5_fu_645_p3 <= 
        tmp_3_fu_637_p3 when (tmp_59_fu_603_p3(0) = '1') else 
        tmp_1_fu_621_p4;
    tmp_60_fu_611_p1 <= r_V_fu_597_p2(16 - 1 downto 0);
    tmp_61_fu_615_p2 <= "1" when (tmp_60_fu_611_p1 = ap_const_lv16_0) else "0";
        tmp_62_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(num_1_fu_581_p2),64));

    tmp_63_fu_659_p1 <= num_1_fu_581_p2(10 - 1 downto 0);
    tmp_64_fu_683_p3 <= r_V_1_fu_677_p2(63 downto 63);
    tmp_65_fu_691_p1 <= r_V_1_fu_677_p2(16 - 1 downto 0);
    tmp_66_fu_695_p2 <= "1" when (tmp_65_fu_691_p1 = ap_const_lv16_0) else "0";
    tmp_67_fu_744_p3 <= r_V_2_fu_738_p2(63 downto 63);
    tmp_68_fu_756_p2 <= "1" when (tmp_70_fu_752_p1 = ap_const_lv16_0) else "0";
    tmp_69_fu_816_p2 <= "1" when (tmp_72_fu_812_p1 = ap_const_lv16_0) else "0";
    tmp_6_fu_701_p4 <= r_V_1_fu_677_p2(31 downto 16);
    tmp_70_fu_752_p1 <= r_V_2_fu_738_p2(16 - 1 downto 0);
    tmp_71_fu_804_p3 <= r_V_3_fu_798_p2(63 downto 63);
    tmp_72_fu_812_p1 <= r_V_3_fu_798_p2(16 - 1 downto 0);
    tmp_7_fu_711_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_6_fu_701_p4));
    tmp_8_fu_717_p3 <= 
        tmp_6_fu_701_p4 when (tmp_66_fu_695_p2(0) = '1') else 
        tmp_7_fu_711_p2;
    tmp_s_fu_443_p2 <= "1" when (signed(i1_cast_fu_439_p1) < signed(rects_length_read)) else "0";
end behav;
