// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Mul184.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Mul184::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Mul184::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> Mul184::ap_ST_fsm_state1 = "1";
const sc_lv<4> Mul184::ap_ST_fsm_state2 = "10";
const sc_lv<4> Mul184::ap_ST_fsm_pp0_stage0 = "100";
const sc_lv<4> Mul184::ap_ST_fsm_state6 = "1000";
const sc_lv<32> Mul184::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool Mul184::ap_const_boolean_1 = true;
const sc_lv<32> Mul184::ap_const_lv32_2 = "10";
const bool Mul184::ap_const_boolean_0 = false;
const sc_lv<1> Mul184::ap_const_lv1_0 = "0";
const sc_lv<32> Mul184::ap_const_lv32_1 = "1";
const sc_lv<1> Mul184::ap_const_lv1_1 = "1";
const sc_lv<32> Mul184::ap_const_lv32_3 = "11";

Mul184::Mul184(sc_module_name name) : sc_module(name), mVcdFile(0) {
    Haaris_Core_mul_mxdS_U173 = new Haaris_Core_mul_mxdS<1,1,15,15,30>("Haaris_Core_mul_mxdS_U173");
    Haaris_Core_mul_mxdS_U173->din0(tmp_V_reg_181);
    Haaris_Core_mul_mxdS_U173->din1(tmp_V_7_reg_176);
    Haaris_Core_mul_mxdS_U173->dout(r_V_fu_141_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( src1_data_stream_V_V_empty_n );
    sensitive << ( src2_data_stream_V_V_empty_n );
    sensitive << ( dst_data_stream_V_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_i_reg_167 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( exitcond_i_i_reg_167_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( src1_data_stream_V_V_empty_n );
    sensitive << ( src2_data_stream_V_V_empty_n );
    sensitive << ( dst_data_stream_V_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_i_reg_167 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( exitcond_i_i_reg_167_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( src1_data_stream_V_V_empty_n );
    sensitive << ( src2_data_stream_V_V_empty_n );
    sensitive << ( dst_data_stream_V_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_i_reg_167 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( exitcond_i_i_reg_167_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( src1_rows_V_empty_n );
    sensitive << ( src1_cols_V_empty_n );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter1);
    sensitive << ( src1_data_stream_V_V_empty_n );
    sensitive << ( src2_data_stream_V_V_empty_n );
    sensitive << ( exitcond_i_i_reg_167 );

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter2);
    sensitive << ( dst_data_stream_V_V_full_n );
    sensitive << ( exitcond_i_i_reg_167_pp0_iter1_reg );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state3);
    sensitive << ( exitcond_i_i_fu_120_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( exitcond7_i_i_fu_109_p2 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( exitcond7_i_i_fu_109_p2 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_dst_data_stream_V_V_blk_n);
    sensitive << ( dst_data_stream_V_V_full_n );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( exitcond_i_i_reg_167_pp0_iter1_reg );

    SC_METHOD(thread_dst_data_stream_V_V_din);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( exitcond_i_i_reg_167_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( r_V_fu_141_p2 );

    SC_METHOD(thread_dst_data_stream_V_V_write);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( exitcond_i_i_reg_167_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_exitcond7_i_i_fu_109_p2);
    sensitive << ( rows_V_reg_148 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( t_V_reg_87 );

    SC_METHOD(thread_exitcond_i_i_fu_120_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( t_V_6_reg_98 );
    sensitive << ( cols_V_reg_153 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_i_V_fu_114_p2);
    sensitive << ( t_V_reg_87 );

    SC_METHOD(thread_j_V_fu_125_p2);
    sensitive << ( t_V_6_reg_98 );

    SC_METHOD(thread_src1_cols_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( src1_cols_V_empty_n );

    SC_METHOD(thread_src1_cols_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( src1_rows_V_empty_n );
    sensitive << ( src1_cols_V_empty_n );

    SC_METHOD(thread_src1_data_stream_V_V_blk_n);
    sensitive << ( src1_data_stream_V_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_i_i_reg_167 );

    SC_METHOD(thread_src1_data_stream_V_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_i_reg_167 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_src1_rows_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( src1_rows_V_empty_n );

    SC_METHOD(thread_src1_rows_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( src1_rows_V_empty_n );
    sensitive << ( src1_cols_V_empty_n );

    SC_METHOD(thread_src2_data_stream_V_V_blk_n);
    sensitive << ( src2_data_stream_V_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_i_i_reg_167 );

    SC_METHOD(thread_src2_data_stream_V_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_i_reg_167 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( src1_rows_V_empty_n );
    sensitive << ( src1_cols_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( exitcond7_i_i_fu_109_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_i_i_fu_120_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Mul184_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, src1_rows_V_dout, "(port)src1_rows_V_dout");
    sc_trace(mVcdFile, src1_rows_V_empty_n, "(port)src1_rows_V_empty_n");
    sc_trace(mVcdFile, src1_rows_V_read, "(port)src1_rows_V_read");
    sc_trace(mVcdFile, src1_cols_V_dout, "(port)src1_cols_V_dout");
    sc_trace(mVcdFile, src1_cols_V_empty_n, "(port)src1_cols_V_empty_n");
    sc_trace(mVcdFile, src1_cols_V_read, "(port)src1_cols_V_read");
    sc_trace(mVcdFile, src1_data_stream_V_V_dout, "(port)src1_data_stream_V_V_dout");
    sc_trace(mVcdFile, src1_data_stream_V_V_empty_n, "(port)src1_data_stream_V_V_empty_n");
    sc_trace(mVcdFile, src1_data_stream_V_V_read, "(port)src1_data_stream_V_V_read");
    sc_trace(mVcdFile, src2_data_stream_V_V_dout, "(port)src2_data_stream_V_V_dout");
    sc_trace(mVcdFile, src2_data_stream_V_V_empty_n, "(port)src2_data_stream_V_V_empty_n");
    sc_trace(mVcdFile, src2_data_stream_V_V_read, "(port)src2_data_stream_V_V_read");
    sc_trace(mVcdFile, dst_data_stream_V_V_din, "(port)dst_data_stream_V_V_din");
    sc_trace(mVcdFile, dst_data_stream_V_V_full_n, "(port)dst_data_stream_V_V_full_n");
    sc_trace(mVcdFile, dst_data_stream_V_V_write, "(port)dst_data_stream_V_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, src1_rows_V_blk_n, "src1_rows_V_blk_n");
    sc_trace(mVcdFile, src1_cols_V_blk_n, "src1_cols_V_blk_n");
    sc_trace(mVcdFile, src1_data_stream_V_V_blk_n, "src1_data_stream_V_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, exitcond_i_i_reg_167, "exitcond_i_i_reg_167");
    sc_trace(mVcdFile, src2_data_stream_V_V_blk_n, "src2_data_stream_V_V_blk_n");
    sc_trace(mVcdFile, dst_data_stream_V_V_blk_n, "dst_data_stream_V_V_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, exitcond_i_i_reg_167_pp0_iter1_reg, "exitcond_i_i_reg_167_pp0_iter1_reg");
    sc_trace(mVcdFile, t_V_6_reg_98, "t_V_6_reg_98");
    sc_trace(mVcdFile, rows_V_reg_148, "rows_V_reg_148");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, cols_V_reg_153, "cols_V_reg_153");
    sc_trace(mVcdFile, exitcond7_i_i_fu_109_p2, "exitcond7_i_i_fu_109_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_V_fu_114_p2, "i_V_fu_114_p2");
    sc_trace(mVcdFile, i_V_reg_162, "i_V_reg_162");
    sc_trace(mVcdFile, exitcond_i_i_fu_120_p2, "exitcond_i_i_fu_120_p2");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter0, "ap_block_state3_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter1, "ap_block_state4_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter2, "ap_block_state5_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, j_V_fu_125_p2, "j_V_fu_125_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_V_7_reg_176, "tmp_V_7_reg_176");
    sc_trace(mVcdFile, tmp_V_reg_181, "tmp_V_reg_181");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state3, "ap_condition_pp0_exit_iter0_state3");
    sc_trace(mVcdFile, t_V_reg_87, "t_V_reg_87");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, r_V_fu_141_p2, "r_V_fu_141_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

Mul184::~Mul184() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete Haaris_Core_mul_mxdS_U173;
}

void Mul184::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(exitcond7_i_i_fu_109_p2.read(), ap_const_lv1_1) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(exitcond7_i_i_fu_109_p2.read(), ap_const_lv1_0) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state3.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((esl_seteq<1,1,1>(exitcond7_i_i_fu_109_p2.read(), ap_const_lv1_0) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_fu_120_p2.read()))) {
        t_V_6_reg_98 = j_V_fu_125_p2.read();
    } else if ((esl_seteq<1,1,1>(exitcond7_i_i_fu_109_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        t_V_6_reg_98 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        t_V_reg_87 = i_V_reg_162.read();
    } else if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src1_cols_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src1_rows_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        t_V_reg_87 = ap_const_lv32_0;
    }
    if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src1_cols_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src1_rows_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        cols_V_reg_153 = src1_cols_V_dout.read();
        rows_V_reg_148 = src1_rows_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_i_i_reg_167 = exitcond_i_i_fu_120_p2.read();
        exitcond_i_i_reg_167_pp0_iter1_reg = exitcond_i_i_reg_167.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_V_reg_162 = i_V_fu_114_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(exitcond_i_i_reg_167.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_V_7_reg_176 = src1_data_stream_V_V_dout.read();
        tmp_V_reg_181 = src2_data_stream_V_V_dout.read();
    }
}

void Mul184::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[2];
}

void Mul184::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Mul184::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Mul184::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[3];
}

void Mul184::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Mul184::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(exitcond_i_i_reg_167.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, src1_data_stream_V_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(exitcond_i_i_reg_167.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, src2_data_stream_V_V_empty_n.read())))) || (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_167_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_V_V_full_n.read())));
}

void Mul184::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(exitcond_i_i_reg_167.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, src1_data_stream_V_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(exitcond_i_i_reg_167.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, src2_data_stream_V_V_empty_n.read())))) || (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_167_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_V_V_full_n.read())));
}

void Mul184::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(exitcond_i_i_reg_167.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, src1_data_stream_V_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(exitcond_i_i_reg_167.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, src2_data_stream_V_V_empty_n.read())))) || (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_167_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_V_V_full_n.read())));
}

void Mul184::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src1_cols_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src1_rows_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void Mul184::thread_ap_block_state3_pp0_stage0_iter0() {
    ap_block_state3_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Mul184::thread_ap_block_state4_pp0_stage0_iter1() {
    ap_block_state4_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(exitcond_i_i_reg_167.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, src1_data_stream_V_V_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_i_i_reg_167.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, src2_data_stream_V_V_empty_n.read())));
}

void Mul184::thread_ap_block_state5_pp0_stage0_iter2() {
    ap_block_state5_pp0_stage0_iter2 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_167_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_V_V_full_n.read()));
}

void Mul184::thread_ap_condition_pp0_exit_iter0_state3() {
    if (esl_seteq<1,1,1>(exitcond_i_i_fu_120_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_0;
    }
}

void Mul184::thread_ap_done() {
    if ((esl_seteq<1,1,1>(exitcond7_i_i_fu_109_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Mul184::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void Mul184::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Mul184::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void Mul184::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(exitcond7_i_i_fu_109_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Mul184::thread_dst_data_stream_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_167_pp0_iter1_reg.read()))) {
        dst_data_stream_V_V_blk_n = dst_data_stream_V_V_full_n.read();
    } else {
        dst_data_stream_V_V_blk_n = ap_const_logic_1;
    }
}

void Mul184::thread_dst_data_stream_V_V_din() {
    dst_data_stream_V_V_din = esl_sext<35,30>(r_V_fu_141_p2.read());
}

void Mul184::thread_dst_data_stream_V_V_write() {
    if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_167_pp0_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        dst_data_stream_V_V_write = ap_const_logic_1;
    } else {
        dst_data_stream_V_V_write = ap_const_logic_0;
    }
}

void Mul184::thread_exitcond7_i_i_fu_109_p2() {
    exitcond7_i_i_fu_109_p2 = (!t_V_reg_87.read().is_01() || !rows_V_reg_148.read().is_01())? sc_lv<1>(): sc_lv<1>(t_V_reg_87.read() == rows_V_reg_148.read());
}

void Mul184::thread_exitcond_i_i_fu_120_p2() {
    exitcond_i_i_fu_120_p2 = (!t_V_6_reg_98.read().is_01() || !cols_V_reg_153.read().is_01())? sc_lv<1>(): sc_lv<1>(t_V_6_reg_98.read() == cols_V_reg_153.read());
}

void Mul184::thread_i_V_fu_114_p2() {
    i_V_fu_114_p2 = (!t_V_reg_87.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(t_V_reg_87.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void Mul184::thread_j_V_fu_125_p2() {
    j_V_fu_125_p2 = (!t_V_6_reg_98.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(t_V_6_reg_98.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void Mul184::thread_src1_cols_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        src1_cols_V_blk_n = src1_cols_V_empty_n.read();
    } else {
        src1_cols_V_blk_n = ap_const_logic_1;
    }
}

void Mul184::thread_src1_cols_V_read() {
    if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src1_cols_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src1_rows_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        src1_cols_V_read = ap_const_logic_1;
    } else {
        src1_cols_V_read = ap_const_logic_0;
    }
}

void Mul184::thread_src1_data_stream_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_i_i_reg_167.read(), ap_const_lv1_0))) {
        src1_data_stream_V_V_blk_n = src1_data_stream_V_V_empty_n.read();
    } else {
        src1_data_stream_V_V_blk_n = ap_const_logic_1;
    }
}

void Mul184::thread_src1_data_stream_V_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_i_i_reg_167.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        src1_data_stream_V_V_read = ap_const_logic_1;
    } else {
        src1_data_stream_V_V_read = ap_const_logic_0;
    }
}

void Mul184::thread_src1_rows_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        src1_rows_V_blk_n = src1_rows_V_empty_n.read();
    } else {
        src1_rows_V_blk_n = ap_const_logic_1;
    }
}

void Mul184::thread_src1_rows_V_read() {
    if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src1_cols_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src1_rows_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        src1_rows_V_read = ap_const_logic_1;
    } else {
        src1_rows_V_read = ap_const_logic_0;
    }
}

void Mul184::thread_src2_data_stream_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_i_i_reg_167.read(), ap_const_lv1_0))) {
        src2_data_stream_V_V_blk_n = src2_data_stream_V_V_empty_n.read();
    } else {
        src2_data_stream_V_V_blk_n = ap_const_logic_1;
    }
}

void Mul184::thread_src2_data_stream_V_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_i_i_reg_167.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        src2_data_stream_V_V_read = ap_const_logic_1;
    } else {
        src2_data_stream_V_V_read = ap_const_logic_0;
    }
}

void Mul184::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src1_cols_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src1_rows_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(exitcond7_i_i_fu_109_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            if ((!(esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(exitcond_i_i_fu_120_p2.read(), ap_const_lv1_1)) && !(esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) || (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
  esl_seteq<1,1,1>(exitcond_i_i_fu_120_p2.read(), ap_const_lv1_1)))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

