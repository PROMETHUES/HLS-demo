-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity SepFilter2D is
port (
    p_src_rows_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_src_cols_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_src_data_stream_V_V_dout : IN STD_LOGIC_VECTOR (34 downto 0);
    p_src_data_stream_V_V_empty_n : IN STD_LOGIC;
    p_src_data_stream_V_V_read : OUT STD_LOGIC;
    p_dst_data_stream_V_V_din : OUT STD_LOGIC_VECTOR (34 downto 0);
    p_dst_data_stream_V_V_full_n : IN STD_LOGIC;
    p_dst_data_stream_V_V_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    p_src_rows_V_read_ap_vld : IN STD_LOGIC;
    p_src_cols_V_read_ap_vld : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of SepFilter2D is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv35_0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal SepFilter2D_entry236_U0_ap_start : STD_LOGIC;
    signal SepFilter2D_entry236_U0_start_full_n : STD_LOGIC;
    signal SepFilter2D_entry236_U0_ap_done : STD_LOGIC;
    signal SepFilter2D_entry236_U0_ap_continue : STD_LOGIC;
    signal SepFilter2D_entry236_U0_ap_idle : STD_LOGIC;
    signal SepFilter2D_entry236_U0_ap_ready : STD_LOGIC;
    signal SepFilter2D_entry236_U0_start_out : STD_LOGIC;
    signal SepFilter2D_entry236_U0_start_write : STD_LOGIC;
    signal SepFilter2D_entry236_U0_p_src_rows_V_read_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal SepFilter2D_entry236_U0_p_src_rows_V_read_out_write : STD_LOGIC;
    signal SepFilter2D_entry236_U0_p_src_cols_V_read_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal SepFilter2D_entry236_U0_p_src_cols_V_read_out_write : STD_LOGIC;
    signal SepFilter2D_entry236_U0_p_read2_out_din : STD_LOGIC_VECTOR (0 downto 0);
    signal SepFilter2D_entry236_U0_p_read2_out_write : STD_LOGIC;
    signal SepFilter2D_entry236_U0_p_read3_out_din : STD_LOGIC_VECTOR (0 downto 0);
    signal SepFilter2D_entry236_U0_p_read3_out_write : STD_LOGIC;
    signal SepFilter2D_Block_p_1_U0_ap_start : STD_LOGIC;
    signal SepFilter2D_Block_p_1_U0_ap_done : STD_LOGIC;
    signal SepFilter2D_Block_p_1_U0_ap_continue : STD_LOGIC;
    signal SepFilter2D_Block_p_1_U0_ap_idle : STD_LOGIC;
    signal SepFilter2D_Block_p_1_U0_ap_ready : STD_LOGIC;
    signal SepFilter2D_Block_p_1_U0_p_read3_read : STD_LOGIC;
    signal SepFilter2D_Block_p_1_U0_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_channel_done_this_assign_1_channe : STD_LOGIC;
    signal this_assign_1_channe_full_n : STD_LOGIC;
    signal column_filter_U0_ap_start : STD_LOGIC;
    signal column_filter_U0_ap_done : STD_LOGIC;
    signal column_filter_U0_ap_continue : STD_LOGIC;
    signal column_filter_U0_ap_idle : STD_LOGIC;
    signal column_filter_U0_ap_ready : STD_LOGIC;
    signal column_filter_U0_start_out : STD_LOGIC;
    signal column_filter_U0_start_write : STD_LOGIC;
    signal column_filter_U0_p_src_data_stream_V_V_read : STD_LOGIC;
    signal column_filter_U0_p_dst_V_V_din : STD_LOGIC_VECTOR (39 downto 0);
    signal column_filter_U0_p_dst_V_V_write : STD_LOGIC;
    signal column_filter_U0_rows_read : STD_LOGIC;
    signal column_filter_U0_cols_read : STD_LOGIC;
    signal column_filter_U0_rows_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal column_filter_U0_rows_out_write : STD_LOGIC;
    signal column_filter_U0_cols_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal column_filter_U0_cols_out_write : STD_LOGIC;
    signal SepFilter2D_Block_p_U0_ap_start : STD_LOGIC;
    signal SepFilter2D_Block_p_U0_ap_done : STD_LOGIC;
    signal SepFilter2D_Block_p_U0_ap_continue : STD_LOGIC;
    signal SepFilter2D_Block_p_U0_ap_idle : STD_LOGIC;
    signal SepFilter2D_Block_p_U0_ap_ready : STD_LOGIC;
    signal SepFilter2D_Block_p_U0_p_read2_read : STD_LOGIC;
    signal SepFilter2D_Block_p_U0_this_assign_24_0_out_din : STD_LOGIC_VECTOR (0 downto 0);
    signal SepFilter2D_Block_p_U0_this_assign_24_0_out_write : STD_LOGIC;
    signal row_filter_U0_ap_start : STD_LOGIC;
    signal row_filter_U0_ap_done : STD_LOGIC;
    signal row_filter_U0_ap_continue : STD_LOGIC;
    signal row_filter_U0_ap_idle : STD_LOGIC;
    signal row_filter_U0_ap_ready : STD_LOGIC;
    signal row_filter_U0_p_src_V_V_read : STD_LOGIC;
    signal row_filter_U0_p_dst_data_stream_V_V_din : STD_LOGIC_VECTOR (34 downto 0);
    signal row_filter_U0_p_dst_data_stream_V_V_write : STD_LOGIC;
    signal row_filter_U0_p_anchor_x_read : STD_LOGIC;
    signal row_filter_U0_rows_read : STD_LOGIC;
    signal row_filter_U0_cols_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal p_src_rows_V_read_c_full_n : STD_LOGIC;
    signal p_src_rows_V_read_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal p_src_rows_V_read_c_empty_n : STD_LOGIC;
    signal p_src_cols_V_read_c_full_n : STD_LOGIC;
    signal p_src_cols_V_read_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal p_src_cols_V_read_c_empty_n : STD_LOGIC;
    signal p_read2_c_full_n : STD_LOGIC;
    signal p_read2_c_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal p_read2_c_empty_n : STD_LOGIC;
    signal p_read3_c_full_n : STD_LOGIC;
    signal p_read3_c_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal p_read3_c_empty_n : STD_LOGIC;
    signal this_assign_1_channe_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal this_assign_1_channe_empty_n : STD_LOGIC;
    signal tempY_stream_0_V_V_full_n : STD_LOGIC;
    signal tempY_stream_0_V_V_dout : STD_LOGIC_VECTOR (39 downto 0);
    signal tempY_stream_0_V_V_empty_n : STD_LOGIC;
    signal p_src_rows_V_read_c4_full_n : STD_LOGIC;
    signal p_src_rows_V_read_c4_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal p_src_rows_V_read_c4_empty_n : STD_LOGIC;
    signal p_src_cols_V_read_c5_full_n : STD_LOGIC;
    signal p_src_cols_V_read_c5_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal p_src_cols_V_read_c5_empty_n : STD_LOGIC;
    signal this_assign_24_0_c_full_n : STD_LOGIC;
    signal this_assign_24_0_c_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal this_assign_24_0_c_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_SepFilter2D_entry236_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_SepFilter2D_entry236_U0_ap_ready : STD_LOGIC;
    signal SepFilter2D_entry236_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_column_filter_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_column_filter_U0_ap_ready : STD_LOGIC;
    signal column_filter_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal start_for_SepFilter2D_Block_p_1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_SepFilter2D_Block_p_1_U0_full_n : STD_LOGIC;
    signal start_for_SepFilter2D_Block_p_1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_SepFilter2D_Block_p_1_U0_empty_n : STD_LOGIC;
    signal start_for_SepFilter2D_Block_p_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_SepFilter2D_Block_p_U0_full_n : STD_LOGIC;
    signal start_for_SepFilter2D_Block_p_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_SepFilter2D_Block_p_U0_empty_n : STD_LOGIC;
    signal SepFilter2D_Block_p_1_U0_start_full_n : STD_LOGIC;
    signal SepFilter2D_Block_p_1_U0_start_write : STD_LOGIC;
    signal start_for_row_filter_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_row_filter_U0_full_n : STD_LOGIC;
    signal start_for_row_filter_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_row_filter_U0_empty_n : STD_LOGIC;
    signal SepFilter2D_Block_p_U0_start_full_n : STD_LOGIC;
    signal SepFilter2D_Block_p_U0_start_write : STD_LOGIC;
    signal row_filter_U0_start_full_n : STD_LOGIC;
    signal row_filter_U0_start_write : STD_LOGIC;

    component SepFilter2D_entry236 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_rows_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_cols_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_rows_V_read_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_src_rows_V_read_out_full_n : IN STD_LOGIC;
        p_src_rows_V_read_out_write : OUT STD_LOGIC;
        p_src_cols_V_read_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_src_cols_V_read_out_full_n : IN STD_LOGIC;
        p_src_cols_V_read_out_write : OUT STD_LOGIC;
        p_read2_out_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        p_read2_out_full_n : IN STD_LOGIC;
        p_read2_out_write : OUT STD_LOGIC;
        p_read3_out_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        p_read3_out_full_n : IN STD_LOGIC;
        p_read3_out_write : OUT STD_LOGIC );
    end component;


    component SepFilter2D_Block_p_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read3_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        p_read3_empty_n : IN STD_LOGIC;
        p_read3_read : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component column_filter IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_data_stream_V_V_dout : IN STD_LOGIC_VECTOR (34 downto 0);
        p_src_data_stream_V_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_V_read : OUT STD_LOGIC;
        p_dst_V_V_din : OUT STD_LOGIC_VECTOR (39 downto 0);
        p_dst_V_V_full_n : IN STD_LOGIC;
        p_dst_V_V_write : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (0 downto 0);
        rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rows_empty_n : IN STD_LOGIC;
        rows_read : OUT STD_LOGIC;
        cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        cols_empty_n : IN STD_LOGIC;
        cols_read : OUT STD_LOGIC;
        rows_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rows_out_full_n : IN STD_LOGIC;
        rows_out_write : OUT STD_LOGIC;
        cols_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        cols_out_full_n : IN STD_LOGIC;
        cols_out_write : OUT STD_LOGIC );
    end component;


    component SepFilter2D_Block_p IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read2_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        p_read2_empty_n : IN STD_LOGIC;
        p_read2_read : OUT STD_LOGIC;
        this_assign_24_0_out_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        this_assign_24_0_out_full_n : IN STD_LOGIC;
        this_assign_24_0_out_write : OUT STD_LOGIC );
    end component;


    component row_filter IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_V_V_dout : IN STD_LOGIC_VECTOR (39 downto 0);
        p_src_V_V_empty_n : IN STD_LOGIC;
        p_src_V_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_V_din : OUT STD_LOGIC_VECTOR (34 downto 0);
        p_dst_data_stream_V_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_V_write : OUT STD_LOGIC;
        p_anchor_x_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        p_anchor_x_empty_n : IN STD_LOGIC;
        p_anchor_x_read : OUT STD_LOGIC;
        rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rows_empty_n : IN STD_LOGIC;
        rows_read : OUT STD_LOGIC;
        cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        cols_empty_n : IN STD_LOGIC;
        cols_read : OUT STD_LOGIC );
    end component;


    component fifo_w32_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w1_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w40_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (39 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (39 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w1_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_SepFiltIfE IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_SepFiltJfO IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_row_filKfY IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    SepFilter2D_entry236_U0 : component SepFilter2D_entry236
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => SepFilter2D_entry236_U0_ap_start,
        start_full_n => SepFilter2D_entry236_U0_start_full_n,
        ap_done => SepFilter2D_entry236_U0_ap_done,
        ap_continue => SepFilter2D_entry236_U0_ap_continue,
        ap_idle => SepFilter2D_entry236_U0_ap_idle,
        ap_ready => SepFilter2D_entry236_U0_ap_ready,
        start_out => SepFilter2D_entry236_U0_start_out,
        start_write => SepFilter2D_entry236_U0_start_write,
        p_src_rows_V_read => p_src_rows_V_read,
        p_src_cols_V_read => p_src_cols_V_read,
        p_src_rows_V_read_out_din => SepFilter2D_entry236_U0_p_src_rows_V_read_out_din,
        p_src_rows_V_read_out_full_n => p_src_rows_V_read_c_full_n,
        p_src_rows_V_read_out_write => SepFilter2D_entry236_U0_p_src_rows_V_read_out_write,
        p_src_cols_V_read_out_din => SepFilter2D_entry236_U0_p_src_cols_V_read_out_din,
        p_src_cols_V_read_out_full_n => p_src_cols_V_read_c_full_n,
        p_src_cols_V_read_out_write => SepFilter2D_entry236_U0_p_src_cols_V_read_out_write,
        p_read2_out_din => SepFilter2D_entry236_U0_p_read2_out_din,
        p_read2_out_full_n => p_read2_c_full_n,
        p_read2_out_write => SepFilter2D_entry236_U0_p_read2_out_write,
        p_read3_out_din => SepFilter2D_entry236_U0_p_read3_out_din,
        p_read3_out_full_n => p_read3_c_full_n,
        p_read3_out_write => SepFilter2D_entry236_U0_p_read3_out_write);

    SepFilter2D_Block_p_1_U0 : component SepFilter2D_Block_p_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => SepFilter2D_Block_p_1_U0_ap_start,
        ap_done => SepFilter2D_Block_p_1_U0_ap_done,
        ap_continue => SepFilter2D_Block_p_1_U0_ap_continue,
        ap_idle => SepFilter2D_Block_p_1_U0_ap_idle,
        ap_ready => SepFilter2D_Block_p_1_U0_ap_ready,
        p_read3_dout => p_read3_c_dout,
        p_read3_empty_n => p_read3_c_empty_n,
        p_read3_read => SepFilter2D_Block_p_1_U0_p_read3_read,
        ap_return => SepFilter2D_Block_p_1_U0_ap_return);

    column_filter_U0 : component column_filter
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => column_filter_U0_ap_start,
        start_full_n => start_for_row_filter_U0_full_n,
        ap_done => column_filter_U0_ap_done,
        ap_continue => column_filter_U0_ap_continue,
        ap_idle => column_filter_U0_ap_idle,
        ap_ready => column_filter_U0_ap_ready,
        start_out => column_filter_U0_start_out,
        start_write => column_filter_U0_start_write,
        p_src_data_stream_V_V_dout => p_src_data_stream_V_V_dout,
        p_src_data_stream_V_V_empty_n => p_src_data_stream_V_V_empty_n,
        p_src_data_stream_V_V_read => column_filter_U0_p_src_data_stream_V_V_read,
        p_dst_V_V_din => column_filter_U0_p_dst_V_V_din,
        p_dst_V_V_full_n => tempY_stream_0_V_V_full_n,
        p_dst_V_V_write => column_filter_U0_p_dst_V_V_write,
        p_read => this_assign_1_channe_dout,
        rows_dout => p_src_rows_V_read_c_dout,
        rows_empty_n => p_src_rows_V_read_c_empty_n,
        rows_read => column_filter_U0_rows_read,
        cols_dout => p_src_cols_V_read_c_dout,
        cols_empty_n => p_src_cols_V_read_c_empty_n,
        cols_read => column_filter_U0_cols_read,
        rows_out_din => column_filter_U0_rows_out_din,
        rows_out_full_n => p_src_rows_V_read_c4_full_n,
        rows_out_write => column_filter_U0_rows_out_write,
        cols_out_din => column_filter_U0_cols_out_din,
        cols_out_full_n => p_src_cols_V_read_c5_full_n,
        cols_out_write => column_filter_U0_cols_out_write);

    SepFilter2D_Block_p_U0 : component SepFilter2D_Block_p
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => SepFilter2D_Block_p_U0_ap_start,
        ap_done => SepFilter2D_Block_p_U0_ap_done,
        ap_continue => SepFilter2D_Block_p_U0_ap_continue,
        ap_idle => SepFilter2D_Block_p_U0_ap_idle,
        ap_ready => SepFilter2D_Block_p_U0_ap_ready,
        p_read2_dout => p_read2_c_dout,
        p_read2_empty_n => p_read2_c_empty_n,
        p_read2_read => SepFilter2D_Block_p_U0_p_read2_read,
        this_assign_24_0_out_din => SepFilter2D_Block_p_U0_this_assign_24_0_out_din,
        this_assign_24_0_out_full_n => this_assign_24_0_c_full_n,
        this_assign_24_0_out_write => SepFilter2D_Block_p_U0_this_assign_24_0_out_write);

    row_filter_U0 : component row_filter
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => row_filter_U0_ap_start,
        ap_done => row_filter_U0_ap_done,
        ap_continue => row_filter_U0_ap_continue,
        ap_idle => row_filter_U0_ap_idle,
        ap_ready => row_filter_U0_ap_ready,
        p_src_V_V_dout => tempY_stream_0_V_V_dout,
        p_src_V_V_empty_n => tempY_stream_0_V_V_empty_n,
        p_src_V_V_read => row_filter_U0_p_src_V_V_read,
        p_dst_data_stream_V_V_din => row_filter_U0_p_dst_data_stream_V_V_din,
        p_dst_data_stream_V_V_full_n => p_dst_data_stream_V_V_full_n,
        p_dst_data_stream_V_V_write => row_filter_U0_p_dst_data_stream_V_V_write,
        p_anchor_x_dout => this_assign_24_0_c_dout,
        p_anchor_x_empty_n => this_assign_24_0_c_empty_n,
        p_anchor_x_read => row_filter_U0_p_anchor_x_read,
        rows_dout => p_src_rows_V_read_c4_dout,
        rows_empty_n => p_src_rows_V_read_c4_empty_n,
        rows_read => row_filter_U0_rows_read,
        cols_dout => p_src_cols_V_read_c5_dout,
        cols_empty_n => p_src_cols_V_read_c5_empty_n,
        cols_read => row_filter_U0_cols_read);

    p_src_rows_V_read_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => SepFilter2D_entry236_U0_p_src_rows_V_read_out_din,
        if_full_n => p_src_rows_V_read_c_full_n,
        if_write => SepFilter2D_entry236_U0_p_src_rows_V_read_out_write,
        if_dout => p_src_rows_V_read_c_dout,
        if_empty_n => p_src_rows_V_read_c_empty_n,
        if_read => column_filter_U0_rows_read);

    p_src_cols_V_read_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => SepFilter2D_entry236_U0_p_src_cols_V_read_out_din,
        if_full_n => p_src_cols_V_read_c_full_n,
        if_write => SepFilter2D_entry236_U0_p_src_cols_V_read_out_write,
        if_dout => p_src_cols_V_read_c_dout,
        if_empty_n => p_src_cols_V_read_c_empty_n,
        if_read => column_filter_U0_cols_read);

    p_read2_c_U : component fifo_w1_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => SepFilter2D_entry236_U0_p_read2_out_din,
        if_full_n => p_read2_c_full_n,
        if_write => SepFilter2D_entry236_U0_p_read2_out_write,
        if_dout => p_read2_c_dout,
        if_empty_n => p_read2_c_empty_n,
        if_read => SepFilter2D_Block_p_U0_p_read2_read);

    p_read3_c_U : component fifo_w1_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => SepFilter2D_entry236_U0_p_read3_out_din,
        if_full_n => p_read3_c_full_n,
        if_write => SepFilter2D_entry236_U0_p_read3_out_write,
        if_dout => p_read3_c_dout,
        if_empty_n => p_read3_c_empty_n,
        if_read => SepFilter2D_Block_p_1_U0_p_read3_read);

    this_assign_1_channe_U : component fifo_w1_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => SepFilter2D_Block_p_1_U0_ap_return,
        if_full_n => this_assign_1_channe_full_n,
        if_write => SepFilter2D_Block_p_1_U0_ap_done,
        if_dout => this_assign_1_channe_dout,
        if_empty_n => this_assign_1_channe_empty_n,
        if_read => column_filter_U0_ap_ready);

    tempY_stream_0_V_V_U : component fifo_w40_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => column_filter_U0_p_dst_V_V_din,
        if_full_n => tempY_stream_0_V_V_full_n,
        if_write => column_filter_U0_p_dst_V_V_write,
        if_dout => tempY_stream_0_V_V_dout,
        if_empty_n => tempY_stream_0_V_V_empty_n,
        if_read => row_filter_U0_p_src_V_V_read);

    p_src_rows_V_read_c4_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => column_filter_U0_rows_out_din,
        if_full_n => p_src_rows_V_read_c4_full_n,
        if_write => column_filter_U0_rows_out_write,
        if_dout => p_src_rows_V_read_c4_dout,
        if_empty_n => p_src_rows_V_read_c4_empty_n,
        if_read => row_filter_U0_rows_read);

    p_src_cols_V_read_c5_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => column_filter_U0_cols_out_din,
        if_full_n => p_src_cols_V_read_c5_full_n,
        if_write => column_filter_U0_cols_out_write,
        if_dout => p_src_cols_V_read_c5_dout,
        if_empty_n => p_src_cols_V_read_c5_empty_n,
        if_read => row_filter_U0_cols_read);

    this_assign_24_0_c_U : component fifo_w1_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => SepFilter2D_Block_p_U0_this_assign_24_0_out_din,
        if_full_n => this_assign_24_0_c_full_n,
        if_write => SepFilter2D_Block_p_U0_this_assign_24_0_out_write,
        if_dout => this_assign_24_0_c_dout,
        if_empty_n => this_assign_24_0_c_empty_n,
        if_read => row_filter_U0_p_anchor_x_read);

    start_for_SepFiltIfE_U : component start_for_SepFiltIfE
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_SepFilter2D_Block_p_1_U0_din,
        if_full_n => start_for_SepFilter2D_Block_p_1_U0_full_n,
        if_write => SepFilter2D_entry236_U0_start_write,
        if_dout => start_for_SepFilter2D_Block_p_1_U0_dout,
        if_empty_n => start_for_SepFilter2D_Block_p_1_U0_empty_n,
        if_read => SepFilter2D_Block_p_1_U0_ap_ready);

    start_for_SepFiltJfO_U : component start_for_SepFiltJfO
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_SepFilter2D_Block_p_U0_din,
        if_full_n => start_for_SepFilter2D_Block_p_U0_full_n,
        if_write => SepFilter2D_entry236_U0_start_write,
        if_dout => start_for_SepFilter2D_Block_p_U0_dout,
        if_empty_n => start_for_SepFilter2D_Block_p_U0_empty_n,
        if_read => SepFilter2D_Block_p_U0_ap_ready);

    start_for_row_filKfY_U : component start_for_row_filKfY
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_row_filter_U0_din,
        if_full_n => start_for_row_filter_U0_full_n,
        if_write => column_filter_U0_start_write,
        if_dout => start_for_row_filter_U0_dout,
        if_empty_n => start_for_row_filter_U0_empty_n,
        if_read => row_filter_U0_ap_ready);





    ap_sync_reg_SepFilter2D_entry236_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_SepFilter2D_entry236_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_SepFilter2D_entry236_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_SepFilter2D_entry236_U0_ap_ready <= ap_sync_SepFilter2D_entry236_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_column_filter_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_column_filter_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_column_filter_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_column_filter_U0_ap_ready <= ap_sync_column_filter_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    SepFilter2D_entry236_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = SepFilter2D_entry236_U0_ap_ready) and (ap_sync_ready = ap_const_logic_1))) then 
                SepFilter2D_entry236_U0_ap_ready_count <= std_logic_vector(unsigned(SepFilter2D_entry236_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (ap_const_logic_1 = SepFilter2D_entry236_U0_ap_ready))) then 
                SepFilter2D_entry236_U0_ap_ready_count <= std_logic_vector(unsigned(SepFilter2D_entry236_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    column_filter_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((column_filter_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                column_filter_U0_ap_ready_count <= std_logic_vector(unsigned(column_filter_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (column_filter_U0_ap_ready = ap_const_logic_1))) then 
                column_filter_U0_ap_ready_count <= std_logic_vector(unsigned(column_filter_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    SepFilter2D_Block_p_1_U0_ap_continue <= this_assign_1_channe_full_n;
    SepFilter2D_Block_p_1_U0_ap_start <= start_for_SepFilter2D_Block_p_1_U0_empty_n;
    SepFilter2D_Block_p_1_U0_start_full_n <= ap_const_logic_1;
    SepFilter2D_Block_p_1_U0_start_write <= ap_const_logic_0;
    SepFilter2D_Block_p_U0_ap_continue <= ap_const_logic_1;
    SepFilter2D_Block_p_U0_ap_start <= start_for_SepFilter2D_Block_p_U0_empty_n;
    SepFilter2D_Block_p_U0_start_full_n <= ap_const_logic_1;
    SepFilter2D_Block_p_U0_start_write <= ap_const_logic_0;
    SepFilter2D_entry236_U0_ap_continue <= ap_const_logic_1;
    SepFilter2D_entry236_U0_ap_start <= ((ap_sync_reg_SepFilter2D_entry236_U0_ap_ready xor ap_const_logic_1) and ap_start);
    SepFilter2D_entry236_U0_start_full_n <= (start_for_SepFilter2D_Block_p_U0_full_n and start_for_SepFilter2D_Block_p_1_U0_full_n);
    ap_channel_done_this_assign_1_channe <= SepFilter2D_Block_p_1_U0_ap_done;
    ap_done <= row_filter_U0_ap_done;
    ap_idle <= (row_filter_U0_ap_idle and (this_assign_1_channe_empty_n xor ap_const_logic_1) and column_filter_U0_ap_idle and SepFilter2D_entry236_U0_ap_idle and SepFilter2D_Block_p_U0_ap_idle and SepFilter2D_Block_p_1_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_SepFilter2D_entry236_U0_ap_ready <= (ap_sync_reg_SepFilter2D_entry236_U0_ap_ready or SepFilter2D_entry236_U0_ap_ready);
    ap_sync_column_filter_U0_ap_ready <= (column_filter_U0_ap_ready or ap_sync_reg_column_filter_U0_ap_ready);
    ap_sync_continue <= ap_continue;
    ap_sync_done <= row_filter_U0_ap_done;
    ap_sync_ready <= (ap_sync_column_filter_U0_ap_ready and ap_sync_SepFilter2D_entry236_U0_ap_ready);
    column_filter_U0_ap_continue <= ap_const_logic_1;
    column_filter_U0_ap_start <= (this_assign_1_channe_empty_n and (ap_sync_reg_column_filter_U0_ap_ready xor ap_const_logic_1) and ap_start);
    p_dst_data_stream_V_V_din <= row_filter_U0_p_dst_data_stream_V_V_din;
    p_dst_data_stream_V_V_write <= row_filter_U0_p_dst_data_stream_V_V_write;
    p_src_data_stream_V_V_read <= column_filter_U0_p_src_data_stream_V_V_read;
    row_filter_U0_ap_continue <= ap_continue;
    row_filter_U0_ap_start <= start_for_row_filter_U0_empty_n;
    row_filter_U0_start_full_n <= ap_const_logic_1;
    row_filter_U0_start_write <= ap_const_logic_0;
    start_for_SepFilter2D_Block_p_1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_SepFilter2D_Block_p_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_row_filter_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
