-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CalCim188 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_gradx_data_stream_V_V_dout : IN STD_LOGIC_VECTOR (34 downto 0);
    p_gradx_data_stream_V_V_empty_n : IN STD_LOGIC;
    p_gradx_data_stream_V_V_read : OUT STD_LOGIC;
    p_grady_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_grady_rows_V_empty_n : IN STD_LOGIC;
    p_grady_rows_V_read : OUT STD_LOGIC;
    p_grady_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_grady_cols_V_empty_n : IN STD_LOGIC;
    p_grady_cols_V_read : OUT STD_LOGIC;
    p_grady_data_stream_V_V_dout : IN STD_LOGIC_VECTOR (34 downto 0);
    p_grady_data_stream_V_V_empty_n : IN STD_LOGIC;
    p_grady_data_stream_V_V_read : OUT STD_LOGIC;
    p_gradxy_data_stream_V_V_dout : IN STD_LOGIC_VECTOR (34 downto 0);
    p_gradxy_data_stream_V_V_empty_n : IN STD_LOGIC;
    p_gradxy_data_stream_V_V_read : OUT STD_LOGIC;
    p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_dst_data_stream_V_full_n : IN STD_LOGIC;
    p_dst_data_stream_V_write : OUT STD_LOGIC;
    k_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    k_empty_n : IN STD_LOGIC;
    k_read : OUT STD_LOGIC );
end;


architecture behav of CalCim188 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_30A7AC80 : STD_LOGIC_VECTOR (31 downto 0) := "00110000101001111010110010000000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_gradx_data_stream_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_i_reg_234 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_grady_rows_V_blk_n : STD_LOGIC;
    signal p_grady_cols_V_blk_n : STD_LOGIC;
    signal p_grady_data_stream_V_V_blk_n : STD_LOGIC;
    signal p_gradxy_data_stream_V_V_blk_n : STD_LOGIC;
    signal p_dst_data_stream_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal exitcond_i_reg_234_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal k_blk_n : STD_LOGIC;
    signal t_V_17_reg_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_read_reg_210 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal rows_reg_215 : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_reg_220 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond8_i_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_V_fu_181_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_V_reg_229 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_i_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_i_reg_234_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_reg_234_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_reg_234_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_reg_234_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_reg_234_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_reg_234_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_reg_234_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_reg_234_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_reg_234_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_reg_234_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_reg_234_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_reg_234_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_reg_234_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_reg_234_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_reg_234_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_fu_192_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_V_reg_243 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_V_10_reg_248 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_V_11_reg_253 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_167_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i_reg_273 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_170_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i22_i_reg_278 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_173_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i23_i_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_136_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lgx_reg_288 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_141_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lgy_reg_294 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_146_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lgxy_reg_300 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_151_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_60_i_reg_306 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_155_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_61_i_reg_311 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_123_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trac_reg_316 : STD_LOGIC_VECTOR (31 downto 0);
    signal trac_reg_316_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trac_reg_316_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_127_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal det_reg_322 : STD_LOGIC_VECTOR (31 downto 0);
    signal det_reg_322_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal det_reg_322_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_159_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_62_i_reg_327 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_163_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_63_i_reg_332 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal t_V_reg_101 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_131_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_167_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_170_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_173_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_123_ce : STD_LOGIC;
    signal grp_fu_127_ce : STD_LOGIC;
    signal grp_fu_131_ce : STD_LOGIC;
    signal grp_fu_136_ce : STD_LOGIC;
    signal grp_fu_141_ce : STD_LOGIC;
    signal grp_fu_146_ce : STD_LOGIC;
    signal grp_fu_151_ce : STD_LOGIC;
    signal grp_fu_155_ce : STD_LOGIC;
    signal grp_fu_159_ce : STD_LOGIC;
    signal grp_fu_163_ce : STD_LOGIC;
    signal grp_fu_167_ce : STD_LOGIC;
    signal grp_fu_170_ce : STD_LOGIC;
    signal grp_fu_173_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component Haaris_Core_fadd_Lf8 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Haaris_Core_fsub_Mgi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Haaris_Core_fmul_Ngs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Haaris_Core_sitofOgC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    Haaris_Core_fadd_Lf8_U251 : component Haaris_Core_fadd_Lf8
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => lgx_reg_288,
        din1 => lgy_reg_294,
        ce => grp_fu_123_ce,
        dout => grp_fu_123_p2);

    Haaris_Core_fsub_Mgi_U252 : component Haaris_Core_fsub_Mgi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_60_i_reg_306,
        din1 => tmp_61_i_reg_311,
        ce => grp_fu_127_ce,
        dout => grp_fu_127_p2);

    Haaris_Core_fsub_Mgi_U253 : component Haaris_Core_fsub_Mgi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => det_reg_322_pp0_iter13_reg,
        din1 => tmp_63_i_reg_332,
        ce => grp_fu_131_ce,
        dout => grp_fu_131_p2);

    Haaris_Core_fmul_Ngs_U254 : component Haaris_Core_fmul_Ngs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i_i_reg_273,
        din1 => ap_const_lv32_30A7AC80,
        ce => grp_fu_136_ce,
        dout => grp_fu_136_p2);

    Haaris_Core_fmul_Ngs_U255 : component Haaris_Core_fmul_Ngs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i22_i_reg_278,
        din1 => ap_const_lv32_30A7AC80,
        ce => grp_fu_141_ce,
        dout => grp_fu_141_p2);

    Haaris_Core_fmul_Ngs_U256 : component Haaris_Core_fmul_Ngs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i23_i_reg_283,
        din1 => ap_const_lv32_30A7AC80,
        ce => grp_fu_146_ce,
        dout => grp_fu_146_p2);

    Haaris_Core_fmul_Ngs_U257 : component Haaris_Core_fmul_Ngs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => lgx_reg_288,
        din1 => lgy_reg_294,
        ce => grp_fu_151_ce,
        dout => grp_fu_151_p2);

    Haaris_Core_fmul_Ngs_U258 : component Haaris_Core_fmul_Ngs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => lgxy_reg_300,
        din1 => lgxy_reg_300,
        ce => grp_fu_155_ce,
        dout => grp_fu_155_p2);

    Haaris_Core_fmul_Ngs_U259 : component Haaris_Core_fmul_Ngs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trac_reg_316,
        din1 => k_read_reg_210,
        ce => grp_fu_159_ce,
        dout => grp_fu_159_p2);

    Haaris_Core_fmul_Ngs_U260 : component Haaris_Core_fmul_Ngs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_62_i_reg_327,
        din1 => trac_reg_316_pp0_iter11_reg,
        ce => grp_fu_163_ce,
        dout => grp_fu_163_p2);

    Haaris_Core_sitofOgC_U261 : component Haaris_Core_sitofOgC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_167_p0,
        ce => grp_fu_167_ce,
        dout => grp_fu_167_p1);

    Haaris_Core_sitofOgC_U262 : component Haaris_Core_sitofOgC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_170_p0,
        ce => grp_fu_170_ce,
        dout => grp_fu_170_p1);

    Haaris_Core_sitofOgC_U263 : component Haaris_Core_sitofOgC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_173_p0,
        ce => grp_fu_173_ce,
        dout => grp_fu_173_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_i_fu_176_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((exitcond8_i_fu_176_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                elsif (((exitcond8_i_fu_176_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    t_V_17_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                t_V_17_reg_112 <= j_V_fu_192_p2;
            elsif (((exitcond8_i_fu_176_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_V_17_reg_112 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    t_V_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                t_V_reg_101 <= i_V_reg_229;
            elsif ((not(((ap_start = ap_const_logic_0) or (k_empty_n = ap_const_logic_0) or (p_grady_cols_V_empty_n = ap_const_logic_0) or (p_grady_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_reg_101 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (k_empty_n = ap_const_logic_0) or (p_grady_cols_V_empty_n = ap_const_logic_0) or (p_grady_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                cols_reg_220 <= p_grady_cols_V_dout;
                k_read_reg_210 <= k_dout;
                rows_reg_215 <= p_grady_rows_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_reg_234_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                det_reg_322 <= grp_fu_127_p2;
                tmp_62_i_reg_327 <= grp_fu_159_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                det_reg_322_pp0_iter12_reg <= det_reg_322;
                det_reg_322_pp0_iter13_reg <= det_reg_322_pp0_iter12_reg;
                exitcond_i_reg_234_pp0_iter10_reg <= exitcond_i_reg_234_pp0_iter9_reg;
                exitcond_i_reg_234_pp0_iter11_reg <= exitcond_i_reg_234_pp0_iter10_reg;
                exitcond_i_reg_234_pp0_iter12_reg <= exitcond_i_reg_234_pp0_iter11_reg;
                exitcond_i_reg_234_pp0_iter13_reg <= exitcond_i_reg_234_pp0_iter12_reg;
                exitcond_i_reg_234_pp0_iter14_reg <= exitcond_i_reg_234_pp0_iter13_reg;
                exitcond_i_reg_234_pp0_iter15_reg <= exitcond_i_reg_234_pp0_iter14_reg;
                exitcond_i_reg_234_pp0_iter16_reg <= exitcond_i_reg_234_pp0_iter15_reg;
                exitcond_i_reg_234_pp0_iter2_reg <= exitcond_i_reg_234_pp0_iter1_reg;
                exitcond_i_reg_234_pp0_iter3_reg <= exitcond_i_reg_234_pp0_iter2_reg;
                exitcond_i_reg_234_pp0_iter4_reg <= exitcond_i_reg_234_pp0_iter3_reg;
                exitcond_i_reg_234_pp0_iter5_reg <= exitcond_i_reg_234_pp0_iter4_reg;
                exitcond_i_reg_234_pp0_iter6_reg <= exitcond_i_reg_234_pp0_iter5_reg;
                exitcond_i_reg_234_pp0_iter7_reg <= exitcond_i_reg_234_pp0_iter6_reg;
                exitcond_i_reg_234_pp0_iter8_reg <= exitcond_i_reg_234_pp0_iter7_reg;
                exitcond_i_reg_234_pp0_iter9_reg <= exitcond_i_reg_234_pp0_iter8_reg;
                trac_reg_316_pp0_iter10_reg <= trac_reg_316;
                trac_reg_316_pp0_iter11_reg <= trac_reg_316_pp0_iter10_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_i_reg_234 <= exitcond_i_fu_187_p2;
                exitcond_i_reg_234_pp0_iter1_reg <= exitcond_i_reg_234;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_reg_229 <= i_V_fu_181_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_reg_234_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                lgx_reg_288 <= grp_fu_136_p2;
                lgxy_reg_300 <= grp_fu_146_p2;
                lgy_reg_294 <= grp_fu_141_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_reg_234_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_60_i_reg_306 <= grp_fu_151_p2;
                tmp_61_i_reg_311 <= grp_fu_155_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_reg_234_pp0_iter12_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_63_i_reg_332 <= grp_fu_163_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_reg_234 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_V_10_reg_248 <= p_grady_data_stream_V_V_dout;
                tmp_V_11_reg_253 <= p_gradxy_data_stream_V_V_dout;
                tmp_V_reg_243 <= p_gradx_data_stream_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_reg_234_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_i_i22_i_reg_278 <= grp_fu_170_p1;
                tmp_i_i23_i_reg_283 <= grp_fu_173_p1;
                tmp_i_i_i_reg_273 <= grp_fu_167_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_reg_234_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trac_reg_316 <= grp_fu_123_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_grady_rows_V_empty_n, p_grady_cols_V_empty_n, k_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter17, exitcond8_i_fu_176_p2, ap_CS_fsm_state2, exitcond_i_fu_187_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter16)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (k_empty_n = ap_const_logic_0) or (p_grady_cols_V_empty_n = ap_const_logic_0) or (p_grady_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_i_fu_176_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_i_fu_187_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_i_fu_187_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(p_gradx_data_stream_V_V_empty_n, p_grady_data_stream_V_V_empty_n, p_gradxy_data_stream_V_V_empty_n, p_dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, exitcond_i_reg_234, ap_enable_reg_pp0_iter17, exitcond_i_reg_234_pp0_iter16_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((exitcond_i_reg_234_pp0_iter16_reg = ap_const_lv1_0) and (p_dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_i_reg_234 = ap_const_lv1_0) and (p_gradxy_data_stream_V_V_empty_n = ap_const_logic_0)) or ((exitcond_i_reg_234 = ap_const_lv1_0) and (p_grady_data_stream_V_V_empty_n = ap_const_logic_0)) or ((exitcond_i_reg_234 = ap_const_lv1_0) and (p_gradx_data_stream_V_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(p_gradx_data_stream_V_V_empty_n, p_grady_data_stream_V_V_empty_n, p_gradxy_data_stream_V_V_empty_n, p_dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, exitcond_i_reg_234, ap_enable_reg_pp0_iter17, exitcond_i_reg_234_pp0_iter16_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((exitcond_i_reg_234_pp0_iter16_reg = ap_const_lv1_0) and (p_dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_i_reg_234 = ap_const_lv1_0) and (p_gradxy_data_stream_V_V_empty_n = ap_const_logic_0)) or ((exitcond_i_reg_234 = ap_const_lv1_0) and (p_grady_data_stream_V_V_empty_n = ap_const_logic_0)) or ((exitcond_i_reg_234 = ap_const_lv1_0) and (p_gradx_data_stream_V_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(p_gradx_data_stream_V_V_empty_n, p_grady_data_stream_V_V_empty_n, p_gradxy_data_stream_V_V_empty_n, p_dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, exitcond_i_reg_234, ap_enable_reg_pp0_iter17, exitcond_i_reg_234_pp0_iter16_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((exitcond_i_reg_234_pp0_iter16_reg = ap_const_lv1_0) and (p_dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_i_reg_234 = ap_const_lv1_0) and (p_gradxy_data_stream_V_V_empty_n = ap_const_logic_0)) or ((exitcond_i_reg_234 = ap_const_lv1_0) and (p_grady_data_stream_V_V_empty_n = ap_const_logic_0)) or ((exitcond_i_reg_234 = ap_const_lv1_0) and (p_gradx_data_stream_V_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, p_grady_rows_V_empty_n, p_grady_cols_V_empty_n, k_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (k_empty_n = ap_const_logic_0) or (p_grady_cols_V_empty_n = ap_const_logic_0) or (p_grady_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state20_pp0_stage0_iter17_assign_proc : process(p_dst_data_stream_V_full_n, exitcond_i_reg_234_pp0_iter16_reg)
    begin
                ap_block_state20_pp0_stage0_iter17 <= ((exitcond_i_reg_234_pp0_iter16_reg = ap_const_lv1_0) and (p_dst_data_stream_V_full_n = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(p_gradx_data_stream_V_V_empty_n, p_grady_data_stream_V_V_empty_n, p_gradxy_data_stream_V_V_empty_n, exitcond_i_reg_234)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((exitcond_i_reg_234 = ap_const_lv1_0) and (p_gradxy_data_stream_V_V_empty_n = ap_const_logic_0)) or ((exitcond_i_reg_234 = ap_const_lv1_0) and (p_grady_data_stream_V_V_empty_n = ap_const_logic_0)) or ((exitcond_i_reg_234 = ap_const_lv1_0) and (p_gradx_data_stream_V_V_empty_n = ap_const_logic_0)));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_i_fu_187_p2)
    begin
        if ((exitcond_i_fu_187_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, exitcond8_i_fu_176_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_i_fu_176_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(exitcond8_i_fu_176_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_i_fu_176_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond8_i_fu_176_p2 <= "1" when (t_V_reg_101 = rows_reg_215) else "0";
    exitcond_i_fu_187_p2 <= "1" when (t_V_17_reg_112 = cols_reg_220) else "0";

    grp_fu_123_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_123_ce <= ap_const_logic_1;
        else 
            grp_fu_123_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_127_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_127_ce <= ap_const_logic_1;
        else 
            grp_fu_127_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_131_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_131_ce <= ap_const_logic_1;
        else 
            grp_fu_131_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_136_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_136_ce <= ap_const_logic_1;
        else 
            grp_fu_136_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_141_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_141_ce <= ap_const_logic_1;
        else 
            grp_fu_141_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_146_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_146_ce <= ap_const_logic_1;
        else 
            grp_fu_146_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_151_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_151_ce <= ap_const_logic_1;
        else 
            grp_fu_151_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_155_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_155_ce <= ap_const_logic_1;
        else 
            grp_fu_155_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_159_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_159_ce <= ap_const_logic_1;
        else 
            grp_fu_159_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_163_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_163_ce <= ap_const_logic_1;
        else 
            grp_fu_163_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_167_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_167_ce <= ap_const_logic_1;
        else 
            grp_fu_167_ce <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_167_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_reg_243),64));


    grp_fu_170_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_170_ce <= ap_const_logic_1;
        else 
            grp_fu_170_ce <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_170_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_10_reg_248),64));


    grp_fu_173_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_173_ce <= ap_const_logic_1;
        else 
            grp_fu_173_ce <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_173_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_11_reg_253),64));

    i_V_fu_181_p2 <= std_logic_vector(unsigned(t_V_reg_101) + unsigned(ap_const_lv32_1));
    j_V_fu_192_p2 <= std_logic_vector(unsigned(t_V_17_reg_112) + unsigned(ap_const_lv32_1));

    k_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, k_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            k_blk_n <= k_empty_n;
        else 
            k_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    k_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_grady_rows_V_empty_n, p_grady_cols_V_empty_n, k_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (k_empty_n = ap_const_logic_0) or (p_grady_cols_V_empty_n = ap_const_logic_0) or (p_grady_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            k_read <= ap_const_logic_1;
        else 
            k_read <= ap_const_logic_0;
        end if; 
    end process;


    p_dst_data_stream_V_blk_n_assign_proc : process(p_dst_data_stream_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter17, exitcond_i_reg_234_pp0_iter16_reg)
    begin
        if (((exitcond_i_reg_234_pp0_iter16_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1))) then 
            p_dst_data_stream_V_blk_n <= p_dst_data_stream_V_full_n;
        else 
            p_dst_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_dst_data_stream_V_din <= grp_fu_131_p2;

    p_dst_data_stream_V_write_assign_proc : process(ap_enable_reg_pp0_iter17, exitcond_i_reg_234_pp0_iter16_reg, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_i_reg_234_pp0_iter16_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_dst_data_stream_V_write <= ap_const_logic_1;
        else 
            p_dst_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;


    p_gradx_data_stream_V_V_blk_n_assign_proc : process(p_gradx_data_stream_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_i_reg_234)
    begin
        if (((exitcond_i_reg_234 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_gradx_data_stream_V_V_blk_n <= p_gradx_data_stream_V_V_empty_n;
        else 
            p_gradx_data_stream_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_gradx_data_stream_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_234, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_i_reg_234 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_gradx_data_stream_V_V_read <= ap_const_logic_1;
        else 
            p_gradx_data_stream_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    p_gradxy_data_stream_V_V_blk_n_assign_proc : process(p_gradxy_data_stream_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_i_reg_234)
    begin
        if (((exitcond_i_reg_234 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_gradxy_data_stream_V_V_blk_n <= p_gradxy_data_stream_V_V_empty_n;
        else 
            p_gradxy_data_stream_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_gradxy_data_stream_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_234, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_i_reg_234 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_gradxy_data_stream_V_V_read <= ap_const_logic_1;
        else 
            p_gradxy_data_stream_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    p_grady_cols_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_grady_cols_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_grady_cols_V_blk_n <= p_grady_cols_V_empty_n;
        else 
            p_grady_cols_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_grady_cols_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_grady_rows_V_empty_n, p_grady_cols_V_empty_n, k_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (k_empty_n = ap_const_logic_0) or (p_grady_cols_V_empty_n = ap_const_logic_0) or (p_grady_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_grady_cols_V_read <= ap_const_logic_1;
        else 
            p_grady_cols_V_read <= ap_const_logic_0;
        end if; 
    end process;


    p_grady_data_stream_V_V_blk_n_assign_proc : process(p_grady_data_stream_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_i_reg_234)
    begin
        if (((exitcond_i_reg_234 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_grady_data_stream_V_V_blk_n <= p_grady_data_stream_V_V_empty_n;
        else 
            p_grady_data_stream_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_grady_data_stream_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_234, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_i_reg_234 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_grady_data_stream_V_V_read <= ap_const_logic_1;
        else 
            p_grady_data_stream_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    p_grady_rows_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_grady_rows_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_grady_rows_V_blk_n <= p_grady_rows_V_empty_n;
        else 
            p_grady_rows_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_grady_rows_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_grady_rows_V_empty_n, p_grady_cols_V_empty_n, k_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (k_empty_n = ap_const_logic_0) or (p_grady_cols_V_empty_n = ap_const_logic_0) or (p_grady_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_grady_rows_V_read <= ap_const_logic_1;
        else 
            p_grady_rows_V_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
