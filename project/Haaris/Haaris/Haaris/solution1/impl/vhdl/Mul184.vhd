-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Mul184 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src1_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    src1_rows_V_empty_n : IN STD_LOGIC;
    src1_rows_V_read : OUT STD_LOGIC;
    src1_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    src1_cols_V_empty_n : IN STD_LOGIC;
    src1_cols_V_read : OUT STD_LOGIC;
    src1_data_stream_V_V_dout : IN STD_LOGIC_VECTOR (14 downto 0);
    src1_data_stream_V_V_empty_n : IN STD_LOGIC;
    src1_data_stream_V_V_read : OUT STD_LOGIC;
    src2_data_stream_V_V_dout : IN STD_LOGIC_VECTOR (14 downto 0);
    src2_data_stream_V_V_empty_n : IN STD_LOGIC;
    src2_data_stream_V_V_read : OUT STD_LOGIC;
    dst_data_stream_V_V_din : OUT STD_LOGIC_VECTOR (34 downto 0);
    dst_data_stream_V_V_full_n : IN STD_LOGIC;
    dst_data_stream_V_V_write : OUT STD_LOGIC );
end;


architecture behav of Mul184 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal src1_rows_V_blk_n : STD_LOGIC;
    signal src1_cols_V_blk_n : STD_LOGIC;
    signal src1_data_stream_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_i_i_reg_167 : STD_LOGIC_VECTOR (0 downto 0);
    signal src2_data_stream_V_V_blk_n : STD_LOGIC;
    signal dst_data_stream_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal exitcond_i_i_reg_167_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_6_reg_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal rows_V_reg_148 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal cols_V_reg_153 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond7_i_i_fu_109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_V_fu_114_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_V_reg_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_i_i_fu_120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_V_fu_125_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_V_7_reg_176 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_V_reg_181 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal t_V_reg_87 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal r_V_fu_141_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component Haaris_Core_mul_mxdS IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;



begin
    Haaris_Core_mul_mxdS_U173 : component Haaris_Core_mul_mxdS
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => tmp_V_reg_181,
        din1 => tmp_V_7_reg_176,
        dout => r_V_fu_141_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((exitcond7_i_i_fu_109_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((exitcond7_i_i_fu_109_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((exitcond7_i_i_fu_109_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    t_V_6_reg_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_i_fu_120_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                t_V_6_reg_98 <= j_V_fu_125_p2;
            elsif (((exitcond7_i_i_fu_109_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_V_6_reg_98 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    t_V_reg_87_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                t_V_reg_87 <= i_V_reg_162;
            elsif ((not(((ap_start = ap_const_logic_0) or (src1_cols_V_empty_n = ap_const_logic_0) or (src1_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_reg_87 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (src1_cols_V_empty_n = ap_const_logic_0) or (src1_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                cols_V_reg_153 <= src1_cols_V_dout;
                rows_V_reg_148 <= src1_rows_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_i_i_reg_167 <= exitcond_i_i_fu_120_p2;
                exitcond_i_i_reg_167_pp0_iter1_reg <= exitcond_i_i_reg_167;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_reg_162 <= i_V_fu_114_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_i_reg_167 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_V_7_reg_176 <= src1_data_stream_V_V_dout;
                tmp_V_reg_181 <= src2_data_stream_V_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, src1_rows_V_empty_n, src1_cols_V_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, exitcond7_i_i_fu_109_p2, ap_CS_fsm_state2, exitcond_i_i_fu_120_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (src1_cols_V_empty_n = ap_const_logic_0) or (src1_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond7_i_i_fu_109_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_i_i_fu_120_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_i_i_fu_120_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(src1_data_stream_V_V_empty_n, src2_data_stream_V_V_empty_n, dst_data_stream_V_V_full_n, ap_enable_reg_pp0_iter1, exitcond_i_i_reg_167, ap_enable_reg_pp0_iter2, exitcond_i_i_reg_167_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((exitcond_i_i_reg_167_pp0_iter1_reg = ap_const_lv1_0) and (dst_data_stream_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_i_i_reg_167 = ap_const_lv1_0) and (src2_data_stream_V_V_empty_n = ap_const_logic_0)) or ((exitcond_i_i_reg_167 = ap_const_lv1_0) and (src1_data_stream_V_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(src1_data_stream_V_V_empty_n, src2_data_stream_V_V_empty_n, dst_data_stream_V_V_full_n, ap_enable_reg_pp0_iter1, exitcond_i_i_reg_167, ap_enable_reg_pp0_iter2, exitcond_i_i_reg_167_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((exitcond_i_i_reg_167_pp0_iter1_reg = ap_const_lv1_0) and (dst_data_stream_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_i_i_reg_167 = ap_const_lv1_0) and (src2_data_stream_V_V_empty_n = ap_const_logic_0)) or ((exitcond_i_i_reg_167 = ap_const_lv1_0) and (src1_data_stream_V_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(src1_data_stream_V_V_empty_n, src2_data_stream_V_V_empty_n, dst_data_stream_V_V_full_n, ap_enable_reg_pp0_iter1, exitcond_i_i_reg_167, ap_enable_reg_pp0_iter2, exitcond_i_i_reg_167_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((exitcond_i_i_reg_167_pp0_iter1_reg = ap_const_lv1_0) and (dst_data_stream_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_i_i_reg_167 = ap_const_lv1_0) and (src2_data_stream_V_V_empty_n = ap_const_logic_0)) or ((exitcond_i_i_reg_167 = ap_const_lv1_0) and (src1_data_stream_V_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, src1_rows_V_empty_n, src1_cols_V_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (src1_cols_V_empty_n = ap_const_logic_0) or (src1_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(src1_data_stream_V_V_empty_n, src2_data_stream_V_V_empty_n, exitcond_i_i_reg_167)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((exitcond_i_i_reg_167 = ap_const_lv1_0) and (src2_data_stream_V_V_empty_n = ap_const_logic_0)) or ((exitcond_i_i_reg_167 = ap_const_lv1_0) and (src1_data_stream_V_V_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state5_pp0_stage0_iter2_assign_proc : process(dst_data_stream_V_V_full_n, exitcond_i_i_reg_167_pp0_iter1_reg)
    begin
                ap_block_state5_pp0_stage0_iter2 <= ((exitcond_i_i_reg_167_pp0_iter1_reg = ap_const_lv1_0) and (dst_data_stream_V_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_i_i_fu_120_p2)
    begin
        if ((exitcond_i_i_fu_120_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, exitcond7_i_i_fu_109_p2, ap_CS_fsm_state2)
    begin
        if (((exitcond7_i_i_fu_109_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(exitcond7_i_i_fu_109_p2, ap_CS_fsm_state2)
    begin
        if (((exitcond7_i_i_fu_109_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    dst_data_stream_V_V_blk_n_assign_proc : process(dst_data_stream_V_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, exitcond_i_i_reg_167_pp0_iter1_reg)
    begin
        if (((exitcond_i_i_reg_167_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            dst_data_stream_V_V_blk_n <= dst_data_stream_V_V_full_n;
        else 
            dst_data_stream_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        dst_data_stream_V_V_din <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_fu_141_p2),35));


    dst_data_stream_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, exitcond_i_i_reg_167_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_i_i_reg_167_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst_data_stream_V_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    exitcond7_i_i_fu_109_p2 <= "1" when (t_V_reg_87 = rows_V_reg_148) else "0";
    exitcond_i_i_fu_120_p2 <= "1" when (t_V_6_reg_98 = cols_V_reg_153) else "0";
    i_V_fu_114_p2 <= std_logic_vector(unsigned(t_V_reg_87) + unsigned(ap_const_lv32_1));
    j_V_fu_125_p2 <= std_logic_vector(unsigned(t_V_6_reg_98) + unsigned(ap_const_lv32_1));

    src1_cols_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src1_cols_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            src1_cols_V_blk_n <= src1_cols_V_empty_n;
        else 
            src1_cols_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src1_cols_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src1_rows_V_empty_n, src1_cols_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (src1_cols_V_empty_n = ap_const_logic_0) or (src1_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            src1_cols_V_read <= ap_const_logic_1;
        else 
            src1_cols_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src1_data_stream_V_V_blk_n_assign_proc : process(src1_data_stream_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_i_i_reg_167)
    begin
        if (((exitcond_i_i_reg_167 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src1_data_stream_V_V_blk_n <= src1_data_stream_V_V_empty_n;
        else 
            src1_data_stream_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src1_data_stream_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_i_reg_167, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_i_i_reg_167 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src1_data_stream_V_V_read <= ap_const_logic_1;
        else 
            src1_data_stream_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src1_rows_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src1_rows_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            src1_rows_V_blk_n <= src1_rows_V_empty_n;
        else 
            src1_rows_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src1_rows_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src1_rows_V_empty_n, src1_cols_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (src1_cols_V_empty_n = ap_const_logic_0) or (src1_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            src1_rows_V_read <= ap_const_logic_1;
        else 
            src1_rows_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src2_data_stream_V_V_blk_n_assign_proc : process(src2_data_stream_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_i_i_reg_167)
    begin
        if (((exitcond_i_i_reg_167 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src2_data_stream_V_V_blk_n <= src2_data_stream_V_V_empty_n;
        else 
            src2_data_stream_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src2_data_stream_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_i_reg_167, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_i_i_reg_167 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src2_data_stream_V_V_read <= ap_const_logic_1;
        else 
            src2_data_stream_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
