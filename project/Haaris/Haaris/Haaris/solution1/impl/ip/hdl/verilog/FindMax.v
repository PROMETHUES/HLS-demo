// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module FindMax (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_src_rows_V_dout,
        p_src_rows_V_empty_n,
        p_src_rows_V_read,
        p_src_cols_V_dout,
        p_src_cols_V_empty_n,
        p_src_cols_V_read,
        p_src_data_stream_V_dout,
        p_src_data_stream_V_empty_n,
        p_src_data_stream_V_read,
        p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n,
        p_dst_data_stream_V_write,
        threshold_dout,
        threshold_empty_n,
        threshold_read
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_pp0_stage0 = 7'd32;
parameter    ap_ST_fsm_state9 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] p_src_rows_V_dout;
input   p_src_rows_V_empty_n;
output   p_src_rows_V_read;
input  [31:0] p_src_cols_V_dout;
input   p_src_cols_V_empty_n;
output   p_src_cols_V_read;
input  [31:0] p_src_data_stream_V_dout;
input   p_src_data_stream_V_empty_n;
output   p_src_data_stream_V_read;
output  [7:0] p_dst_data_stream_V_din;
input   p_dst_data_stream_V_full_n;
output   p_dst_data_stream_V_write;
input  [31:0] threshold_dout;
input   threshold_empty_n;
output   threshold_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_src_rows_V_read;
reg p_src_cols_V_read;
reg p_src_data_stream_V_read;
reg p_dst_data_stream_V_write;
reg threshold_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_src_rows_V_blk_n;
reg    p_src_cols_V_blk_n;
reg    p_src_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond2_i_i_reg_1070;
reg   [0:0] or_cond_i_i_reg_1085;
reg    p_dst_data_stream_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] or_cond4_i_i_reg_1111;
reg   [0:0] or_cond4_i_i_reg_1111_pp0_iter1_reg;
reg    threshold_blk_n;
reg   [31:0] t_V_10_reg_186;
reg   [31:0] threshold_read_reg_1003;
reg    ap_block_state1;
reg   [31:0] rows_reg_1008;
reg   [31:0] cols_reg_1014;
wire   [31:0] grp_fu_197_p1;
reg   [31:0] threshold_assign_reg_1020;
wire    ap_CS_fsm_state3;
wire   [31:0] tmp_i_i_fu_236_p2;
reg   [31:0] tmp_i_i_reg_1026;
wire    ap_CS_fsm_state4;
wire   [31:0] tmp_i_i_135_fu_241_p2;
reg   [31:0] tmp_i_i_135_reg_1031;
wire   [31:0] threshold_assign_to_s_fu_246_p1;
reg   [31:0] threshold_assign_to_s_reg_1036;
wire   [0:0] notrhs1_fu_253_p2;
reg   [0:0] notrhs1_reg_1041;
wire   [0:0] exitcond_i_i_fu_259_p2;
wire    ap_CS_fsm_state5;
wire   [31:0] i_V_fu_264_p2;
reg   [31:0] i_V_reg_1050;
wire   [0:0] tmp_17_i_i_fu_270_p2;
reg   [0:0] tmp_17_i_i_reg_1055;
wire   [0:0] tmp_18_i_i_fu_275_p2;
reg   [0:0] tmp_18_i_i_reg_1060;
wire   [0:0] icmp_fu_291_p2;
reg   [0:0] icmp_reg_1065;
wire   [0:0] exitcond2_i_i_fu_297_p2;
wire    ap_block_state6_pp0_stage0_iter0;
reg    ap_predicate_op83_read_state7;
reg    ap_block_state7_pp0_stage0_iter1;
reg    ap_block_state8_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond2_i_i_reg_1070_pp0_iter1_reg;
wire   [31:0] j_V_fu_302_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_20_i_i_fu_308_p2;
reg   [0:0] tmp_20_i_i_reg_1079;
wire   [0:0] or_cond_i_i_fu_313_p2;
reg   [7:0] k_buf_val_0_addr_reg_1089;
reg   [7:0] k_buf_val_1_addr_reg_1095;
wire   [0:0] notlhs1_fu_333_p2;
reg   [0:0] notlhs1_reg_1101;
reg   [0:0] notlhs1_reg_1101_pp0_iter1_reg;
wire   [0:0] tmp_26_i_i_fu_339_p2;
reg   [0:0] tmp_26_i_i_reg_1106;
reg   [0:0] tmp_26_i_i_reg_1106_pp0_iter1_reg;
wire   [0:0] or_cond4_i_i_fu_361_p2;
reg   [31:0] win_val_1_1_1_reg_1115;
wire   [0:0] tmp_s_fu_459_p2;
reg   [0:0] tmp_s_reg_1124;
wire   [0:0] tmp_4_fu_200_p2;
reg   [0:0] tmp_4_reg_1134;
wire   [0:0] notlhs3_fu_579_p2;
reg   [0:0] notlhs3_reg_1139;
wire   [0:0] notrhs3_fu_585_p2;
reg   [0:0] notrhs3_reg_1144;
wire   [0:0] tmp_31_fu_212_p2;
reg   [0:0] tmp_31_reg_1149;
wire   [0:0] tmp_49_fu_633_p2;
reg   [0:0] tmp_49_reg_1154;
wire   [0:0] tmp9_demorgan_fu_639_p2;
reg   [0:0] tmp9_demorgan_reg_1159;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter1_state7;
wire   [7:0] k_buf_val_0_address0;
reg    k_buf_val_0_ce0;
wire   [31:0] k_buf_val_0_q0;
reg    k_buf_val_0_ce1;
reg    k_buf_val_0_we1;
wire   [7:0] k_buf_val_1_address0;
reg    k_buf_val_1_ce0;
wire   [31:0] k_buf_val_1_q0;
reg    k_buf_val_1_ce1;
reg    k_buf_val_1_we1;
reg   [31:0] t_V_reg_175;
wire    ap_CS_fsm_state9;
wire   [63:0] tmp_21_i_i_fu_318_p1;
reg    ap_block_pp0_stage0_01001;
reg   [31:0] win_val_0_0_fu_78;
reg   [31:0] win_val_0_1_fu_82;
reg   [31:0] win_val_2_1_fu_86;
wire   [31:0] win_val_2_2_1_i_i_fu_389_p3;
reg   [31:0] win_val_1_0_fu_90;
reg   [31:0] win_val_1_1_fu_94;
wire   [31:0] win_val_1_2_1_i_i_fu_382_p3;
reg   [31:0] win_val_2_0_fu_98;
wire    ap_CS_fsm_state2;
wire   [22:0] tmp_fu_249_p1;
wire   [30:0] tmp_34_fu_281_p4;
wire   [7:0] tmp_9_fu_324_p4;
wire   [30:0] tmp_69_fu_345_p4;
wire   [0:0] icmp1_fu_355_p2;
wire   [31:0] win_val_1_1_to_int_fu_429_p1;
wire   [7:0] tmp_7_fu_433_p4;
wire   [22:0] tmp_46_fu_443_p1;
wire   [0:0] notrhs_fu_453_p2;
wire   [0:0] notlhs_fu_447_p2;
wire   [31:0] win_val_0_1_to_int_fu_465_p1;
wire   [7:0] tmp_6_fu_469_p4;
wire   [22:0] tmp_52_fu_479_p1;
wire   [0:0] notrhs2_fu_489_p2;
wire   [0:0] notlhs2_fu_483_p2;
wire   [0:0] tmp_8_fu_495_p2;
wire   [0:0] tmp_10_fu_501_p2;
wire   [0:0] tmp_11_fu_204_p2;
wire   [31:0] win_val_0_0_to_int_fu_513_p1;
wire   [7:0] tmp_13_fu_517_p4;
wire   [22:0] tmp_58_fu_527_p1;
wire   [0:0] notrhs4_fu_537_p2;
wire   [0:0] notlhs4_fu_531_p2;
wire   [0:0] tmp_14_fu_543_p2;
wire   [0:0] tmp_15_fu_549_p2;
wire   [0:0] tmp_16_fu_208_p2;
wire   [31:0] win_val_2_0_to_int_fu_561_p1;
wire   [7:0] tmp_28_fu_565_p4;
wire   [22:0] tmp_65_fu_575_p1;
wire   [31:0] win_val_2_1_to_int_fu_591_p1;
wire   [7:0] tmp_44_fu_595_p4;
wire   [22:0] tmp_68_fu_605_p1;
wire   [0:0] notrhs9_fu_615_p2;
wire   [0:0] notlhs9_fu_609_p2;
wire   [0:0] tmp_45_fu_621_p2;
wire   [0:0] tmp_47_fu_627_p2;
wire   [0:0] tmp_48_fu_216_p2;
wire   [0:0] tmp_12_fu_507_p2;
wire   [0:0] tmp_17_fu_555_p2;
wire   [0:0] tmp_1_fu_671_p2;
wire   [0:0] tmp_3_fu_675_p2;
wire   [31:0] win_val_1_0_to_int_fu_685_p1;
wire   [7:0] tmp_18_fu_689_p4;
wire   [22:0] tmp_63_fu_699_p1;
wire   [0:0] notrhs6_fu_709_p2;
wire   [0:0] notlhs6_fu_703_p2;
wire   [0:0] tmp_19_fu_715_p2;
wire   [0:0] tmp_20_fu_721_p2;
wire   [0:0] tmp_21_fu_220_p2;
wire   [31:0] win_val_0_2_2_i_i_to_fu_732_p1;
wire   [7:0] tmp_23_fu_736_p4;
wire   [22:0] tmp_64_fu_746_p1;
wire   [0:0] notrhs8_fu_756_p2;
wire   [0:0] notlhs8_fu_750_p2;
wire   [0:0] tmp_24_fu_762_p2;
wire   [0:0] tmp_25_fu_768_p2;
wire   [0:0] tmp_26_fu_224_p2;
wire   [0:0] tmp_29_fu_779_p2;
wire   [0:0] tmp_30_fu_783_p2;
wire   [31:0] win_val_1_2_2_i_i_to_fu_793_p1;
wire   [7:0] tmp_33_fu_797_p4;
wire   [22:0] tmp_66_fu_807_p1;
wire   [0:0] notrhs5_fu_817_p2;
wire   [0:0] notlhs5_fu_811_p2;
wire   [0:0] tmp_35_fu_823_p2;
wire   [0:0] tmp_36_fu_829_p2;
wire   [0:0] tmp_37_fu_228_p2;
wire   [31:0] win_val_2_2_2_i_i_to_fu_840_p1;
wire   [7:0] tmp_39_fu_844_p4;
wire   [22:0] tmp_67_fu_854_p1;
wire   [0:0] notrhs7_fu_864_p2;
wire   [0:0] notlhs7_fu_858_p2;
wire   [0:0] tmp_40_fu_870_p2;
wire   [0:0] tmp_41_fu_876_p2;
wire   [0:0] tmp_42_fu_232_p2;
wire   [0:0] tmp_5_fu_680_p2;
wire   [0:0] tmp_43_fu_881_p2;
wire   [0:0] tmp4_demorgan_fu_892_p2;
wire   [0:0] tmp4_fu_897_p2;
wire   [0:0] tmp3_fu_903_p2;
wire   [0:0] tmp2_fu_887_p2;
wire   [0:0] tmp_38_fu_834_p2;
wire   [0:0] tmp_22_fu_726_p2;
wire   [0:0] tmp7_demorgan_fu_914_p2;
wire   [0:0] tmp_32_fu_788_p2;
wire   [0:0] tmp_27_fu_773_p2;
wire   [0:0] tmp8_demorgan_fu_926_p2;
wire   [0:0] tmp6_demorgan_fu_920_p2;
wire   [0:0] tmp5_demorgan_fu_931_p2;
wire   [0:0] tmp1_fu_908_p2;
wire   [0:0] tmp5_fu_937_p2;
wire   [0:0] tmp_2_fu_943_p2;
reg    ap_block_pp0_stage0_00001;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_252;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

FindMax_k_buf_val_0 #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
k_buf_val_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(k_buf_val_0_address0),
    .ce0(k_buf_val_0_ce0),
    .q0(k_buf_val_0_q0),
    .address1(k_buf_val_0_addr_reg_1089),
    .ce1(k_buf_val_0_ce1),
    .we1(k_buf_val_0_we1),
    .d1(k_buf_val_1_q0)
);

FindMax_k_buf_val_0 #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
k_buf_val_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(k_buf_val_1_address0),
    .ce0(k_buf_val_1_ce0),
    .q0(k_buf_val_1_q0),
    .address1(k_buf_val_1_addr_reg_1095),
    .ce1(k_buf_val_1_ce1),
    .we1(k_buf_val_1_we1),
    .d1(p_src_data_stream_V_dout)
);

Haaris_Core_sitofPgM #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Haaris_Core_sitofPgM_U275(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(threshold_read_reg_1003),
    .ce(1'b1),
    .dout(grp_fu_197_p1)
);

Haaris_Core_fcmp_QgW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
Haaris_Core_fcmp_QgW_U276(
    .din0(win_val_1_1_fu_94),
    .din1(threshold_assign_reg_1020),
    .opcode(5'd3),
    .dout(tmp_4_fu_200_p2)
);

Haaris_Core_fcmp_QgW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
Haaris_Core_fcmp_QgW_U277(
    .din0(win_val_0_1_fu_82),
    .din1(win_val_1_1_fu_94),
    .opcode(5'd2),
    .dout(tmp_11_fu_204_p2)
);

Haaris_Core_fcmp_QgW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
Haaris_Core_fcmp_QgW_U278(
    .din0(win_val_0_0_fu_78),
    .din1(win_val_1_1_fu_94),
    .opcode(5'd2),
    .dout(tmp_16_fu_208_p2)
);

Haaris_Core_fcmp_QgW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
Haaris_Core_fcmp_QgW_U279(
    .din0(win_val_2_0_fu_98),
    .din1(win_val_1_1_fu_94),
    .opcode(5'd2),
    .dout(tmp_31_fu_212_p2)
);

Haaris_Core_fcmp_QgW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
Haaris_Core_fcmp_QgW_U280(
    .din0(win_val_2_1_fu_86),
    .din1(win_val_1_1_fu_94),
    .opcode(5'd2),
    .dout(tmp_48_fu_216_p2)
);

Haaris_Core_fcmp_QgW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
Haaris_Core_fcmp_QgW_U281(
    .din0(win_val_1_0_fu_90),
    .din1(win_val_1_1_1_reg_1115),
    .opcode(5'd2),
    .dout(tmp_21_fu_220_p2)
);

Haaris_Core_fcmp_QgW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
Haaris_Core_fcmp_QgW_U282(
    .din0(win_val_0_1_fu_82),
    .din1(win_val_1_1_1_reg_1115),
    .opcode(5'd2),
    .dout(tmp_26_fu_224_p2)
);

Haaris_Core_fcmp_QgW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
Haaris_Core_fcmp_QgW_U283(
    .din0(win_val_1_1_fu_94),
    .din1(win_val_1_1_1_reg_1115),
    .opcode(5'd2),
    .dout(tmp_37_fu_228_p2)
);

Haaris_Core_fcmp_QgW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
Haaris_Core_fcmp_QgW_U284(
    .din0(win_val_2_1_fu_86),
    .din1(win_val_1_1_1_reg_1115),
    .opcode(5'd2),
    .dout(tmp_42_fu_232_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond_i_i_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((exitcond2_i_i_fu_297_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond_i_i_fu_259_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state7)) | ((exitcond_i_i_fu_259_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state7))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((exitcond_i_i_fu_259_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_i_i_fu_297_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_V_10_reg_186 <= j_V_fu_302_p2;
    end else if (((exitcond_i_i_fu_259_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        t_V_10_reg_186 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        t_V_reg_175 <= i_V_reg_1050;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        t_V_reg_175 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_252)) begin
        if ((ap_predicate_op83_read_state7 == 1'b1)) begin
            win_val_1_1_fu_94 <= k_buf_val_1_q0;
        end else if (((or_cond_i_i_reg_1085 == 1'd0) & (exitcond2_i_i_reg_1070 == 1'd0))) begin
            win_val_1_1_fu_94 <= win_val_1_2_1_i_i_fu_382_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_252)) begin
        if ((ap_predicate_op83_read_state7 == 1'b1)) begin
            win_val_2_1_fu_86 <= p_src_data_stream_V_dout;
        end else if (((or_cond_i_i_reg_1085 == 1'd0) & (exitcond2_i_i_reg_1070 == 1'd0))) begin
            win_val_2_1_fu_86 <= win_val_2_2_1_i_i_fu_389_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((threshold_empty_n == 1'b0) | (p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_reg_1014 <= p_src_cols_V_dout;
        rows_reg_1008 <= p_src_rows_V_dout;
        threshold_read_reg_1003 <= threshold_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond2_i_i_reg_1070 <= exitcond2_i_i_fu_297_p2;
        exitcond2_i_i_reg_1070_pp0_iter1_reg <= exitcond2_i_i_reg_1070;
        notlhs1_reg_1101_pp0_iter1_reg <= notlhs1_reg_1101;
        or_cond4_i_i_reg_1111_pp0_iter1_reg <= or_cond4_i_i_reg_1111;
        tmp_26_i_i_reg_1106_pp0_iter1_reg <= tmp_26_i_i_reg_1106;
        win_val_1_1_1_reg_1115 <= win_val_1_1_fu_94;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_V_reg_1050 <= i_V_fu_264_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_i_fu_259_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        icmp_reg_1065 <= icmp_fu_291_p2;
        tmp_17_i_i_reg_1055 <= tmp_17_i_i_fu_270_p2;
        tmp_18_i_i_reg_1060 <= tmp_18_i_i_fu_275_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_i_i_fu_313_p2 == 1'd1) & (exitcond2_i_i_fu_297_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_val_0_addr_reg_1089 <= tmp_21_i_i_fu_318_p1;
        k_buf_val_1_addr_reg_1095 <= tmp_21_i_i_fu_318_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_i_i_fu_297_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        notlhs1_reg_1101 <= notlhs1_fu_333_p2;
        or_cond4_i_i_reg_1111 <= or_cond4_i_i_fu_361_p2;
        or_cond_i_i_reg_1085 <= or_cond_i_i_fu_313_p2;
        tmp_20_i_i_reg_1079 <= tmp_20_i_i_fu_308_p2;
        tmp_26_i_i_reg_1106 <= tmp_26_i_i_fu_339_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_i_i_reg_1070 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        notlhs3_reg_1139 <= notlhs3_fu_579_p2;
        notrhs3_reg_1144 <= notrhs3_fu_585_p2;
        tmp9_demorgan_reg_1159 <= tmp9_demorgan_fu_639_p2;
        tmp_31_reg_1149 <= tmp_31_fu_212_p2;
        tmp_49_reg_1154 <= tmp_49_fu_633_p2;
        tmp_4_reg_1134 <= tmp_4_fu_200_p2;
        tmp_s_reg_1124 <= tmp_s_fu_459_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        notrhs1_reg_1041 <= notrhs1_fu_253_p2;
        threshold_assign_to_s_reg_1036 <= threshold_assign_to_s_fu_246_p1;
        tmp_i_i_135_reg_1031 <= tmp_i_i_135_fu_241_p2;
        tmp_i_i_reg_1026 <= tmp_i_i_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        threshold_assign_reg_1020 <= grp_fu_197_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_i_i_reg_1070 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        win_val_0_0_fu_78 <= win_val_0_1_fu_82;
        win_val_2_0_fu_98 <= win_val_2_1_fu_86;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_predicate_op83_read_state7 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        win_val_0_1_fu_82 <= k_buf_val_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_i_i_reg_1070_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        win_val_1_0_fu_90 <= win_val_1_1_1_reg_1115;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state7 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state7 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_i_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_i_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_val_0_ce0 = 1'b1;
    end else begin
        k_buf_val_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_val_0_ce1 = 1'b1;
    end else begin
        k_buf_val_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op83_read_state7 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_val_0_we1 = 1'b1;
    end else begin
        k_buf_val_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_val_1_ce0 = 1'b1;
    end else begin
        k_buf_val_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_val_1_ce1 = 1'b1;
    end else begin
        k_buf_val_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op83_read_state7 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_val_1_we1 = 1'b1;
    end else begin
        k_buf_val_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((or_cond4_i_i_reg_1111_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_dst_data_stream_V_blk_n = p_dst_data_stream_V_full_n;
    end else begin
        p_dst_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((or_cond4_i_i_reg_1111_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_dst_data_stream_V_write = 1'b1;
    end else begin
        p_dst_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_cols_V_blk_n = p_src_cols_V_empty_n;
    end else begin
        p_src_cols_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((threshold_empty_n == 1'b0) | (p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_cols_V_read = 1'b1;
    end else begin
        p_src_cols_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((or_cond_i_i_reg_1085 == 1'd1) & (exitcond2_i_i_reg_1070 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_src_data_stream_V_blk_n = p_src_data_stream_V_empty_n;
    end else begin
        p_src_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op83_read_state7 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_src_data_stream_V_read = 1'b1;
    end else begin
        p_src_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_rows_V_blk_n = p_src_rows_V_empty_n;
    end else begin
        p_src_rows_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((threshold_empty_n == 1'b0) | (p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_rows_V_read = 1'b1;
    end else begin
        p_src_rows_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        threshold_blk_n = threshold_empty_n;
    end else begin
        threshold_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((threshold_empty_n == 1'b0) | (p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        threshold_read = 1'b1;
    end else begin
        threshold_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((threshold_empty_n == 1'b0) | (p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond_i_i_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_00001 = (((or_cond4_i_i_reg_1111_pp0_iter1_reg == 1'd1) & (p_dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((p_src_data_stream_V_empty_n == 1'b0) & (ap_predicate_op83_read_state7 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((or_cond4_i_i_reg_1111_pp0_iter1_reg == 1'd1) & (p_dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((p_src_data_stream_V_empty_n == 1'b0) & (ap_predicate_op83_read_state7 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((or_cond4_i_i_reg_1111_pp0_iter1_reg == 1'd1) & (p_dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((p_src_data_stream_V_empty_n == 1'b0) & (ap_predicate_op83_read_state7 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((or_cond4_i_i_reg_1111_pp0_iter1_reg == 1'd1) & (p_dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((p_src_data_stream_V_empty_n == 1'b0) & (ap_predicate_op83_read_state7 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((threshold_empty_n == 1'b0) | (p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state6_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter1 = ((p_src_data_stream_V_empty_n == 1'b0) & (ap_predicate_op83_read_state7 == 1'b1));
end

always @ (*) begin
    ap_block_state8_pp0_stage0_iter2 = ((or_cond4_i_i_reg_1111_pp0_iter1_reg == 1'd1) & (p_dst_data_stream_V_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_252 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op83_read_state7 = ((or_cond_i_i_reg_1085 == 1'd1) & (exitcond2_i_i_reg_1070 == 1'd0));
end

assign exitcond2_i_i_fu_297_p2 = ((t_V_10_reg_186 == tmp_i_i_reg_1026) ? 1'b1 : 1'b0);

assign exitcond_i_i_fu_259_p2 = ((t_V_reg_175 == tmp_i_i_135_reg_1031) ? 1'b1 : 1'b0);

assign i_V_fu_264_p2 = (t_V_reg_175 + 32'd1);

assign icmp1_fu_355_p2 = ((tmp_69_fu_345_p4 != 31'd0) ? 1'b1 : 1'b0);

assign icmp_fu_291_p2 = ((tmp_34_fu_281_p4 != 31'd0) ? 1'b1 : 1'b0);

assign j_V_fu_302_p2 = (t_V_10_reg_186 + 32'd1);

assign k_buf_val_0_address0 = tmp_21_i_i_fu_318_p1;

assign k_buf_val_1_address0 = tmp_21_i_i_fu_318_p1;

assign notlhs1_fu_333_p2 = ((tmp_9_fu_324_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs2_fu_483_p2 = ((tmp_6_fu_469_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs3_fu_579_p2 = ((tmp_28_fu_565_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs4_fu_531_p2 = ((tmp_13_fu_517_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs5_fu_811_p2 = ((tmp_33_fu_797_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs6_fu_703_p2 = ((tmp_18_fu_689_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs7_fu_858_p2 = ((tmp_39_fu_844_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs8_fu_750_p2 = ((tmp_23_fu_736_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs9_fu_609_p2 = ((tmp_44_fu_595_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_447_p2 = ((tmp_7_fu_433_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs1_fu_253_p2 = ((tmp_fu_249_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs2_fu_489_p2 = ((tmp_52_fu_479_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs3_fu_585_p2 = ((tmp_65_fu_575_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs4_fu_537_p2 = ((tmp_58_fu_527_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs5_fu_817_p2 = ((tmp_66_fu_807_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs6_fu_709_p2 = ((tmp_63_fu_699_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs7_fu_864_p2 = ((tmp_67_fu_854_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs8_fu_756_p2 = ((tmp_64_fu_746_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs9_fu_615_p2 = ((tmp_68_fu_605_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_453_p2 = ((tmp_46_fu_443_p1 == 23'd0) ? 1'b1 : 1'b0);

assign or_cond4_i_i_fu_361_p2 = (icmp_reg_1065 & icmp1_fu_355_p2);

assign or_cond_i_i_fu_313_p2 = (tmp_20_i_i_fu_308_p2 & tmp_17_i_i_reg_1055);

assign p_dst_data_stream_V_din = ((tmp_2_fu_943_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign threshold_assign_to_s_fu_246_p1 = threshold_assign_reg_1020;

assign tmp1_fu_908_p2 = (tmp3_fu_903_p2 & tmp2_fu_887_p2);

assign tmp2_fu_887_p2 = (tmp_5_fu_680_p2 & tmp_18_i_i_reg_1060);

assign tmp3_fu_903_p2 = (tmp_26_i_i_reg_1106_pp0_iter1_reg & tmp4_fu_897_p2);

assign tmp4_demorgan_fu_892_p2 = (tmp_49_reg_1154 | tmp_43_fu_881_p2);

assign tmp4_fu_897_p2 = (tmp4_demorgan_fu_892_p2 ^ 1'd1);

assign tmp5_demorgan_fu_931_p2 = (tmp8_demorgan_fu_926_p2 | tmp6_demorgan_fu_920_p2);

assign tmp5_fu_937_p2 = (tmp5_demorgan_fu_931_p2 ^ 1'd1);

assign tmp6_demorgan_fu_920_p2 = (tmp_32_fu_788_p2 | tmp7_demorgan_fu_914_p2);

assign tmp7_demorgan_fu_914_p2 = (tmp_38_fu_834_p2 | tmp_22_fu_726_p2);

assign tmp8_demorgan_fu_926_p2 = (tmp_27_fu_773_p2 | tmp9_demorgan_reg_1159);

assign tmp9_demorgan_fu_639_p2 = (tmp_17_fu_555_p2 | tmp_12_fu_507_p2);

assign tmp_10_fu_501_p2 = (tmp_s_fu_459_p2 & tmp_8_fu_495_p2);

assign tmp_12_fu_507_p2 = (tmp_11_fu_204_p2 & tmp_10_fu_501_p2);

assign tmp_13_fu_517_p4 = {{win_val_0_0_to_int_fu_513_p1[30:23]}};

assign tmp_14_fu_543_p2 = (notrhs4_fu_537_p2 | notlhs4_fu_531_p2);

assign tmp_15_fu_549_p2 = (tmp_s_fu_459_p2 & tmp_14_fu_543_p2);

assign tmp_17_fu_555_p2 = (tmp_16_fu_208_p2 & tmp_15_fu_549_p2);

assign tmp_17_i_i_fu_270_p2 = ((t_V_reg_175 < rows_reg_1008) ? 1'b1 : 1'b0);

assign tmp_18_fu_689_p4 = {{win_val_1_0_to_int_fu_685_p1[30:23]}};

assign tmp_18_i_i_fu_275_p2 = ((t_V_reg_175 > 32'd2) ? 1'b1 : 1'b0);

assign tmp_19_fu_715_p2 = (notrhs6_fu_709_p2 | notlhs6_fu_703_p2);

assign tmp_1_fu_671_p2 = (notrhs1_reg_1041 | notlhs1_reg_1101_pp0_iter1_reg);

assign tmp_20_fu_721_p2 = (tmp_s_reg_1124 & tmp_19_fu_715_p2);

assign tmp_20_i_i_fu_308_p2 = ((t_V_10_reg_186 < cols_reg_1014) ? 1'b1 : 1'b0);

assign tmp_21_i_i_fu_318_p1 = t_V_10_reg_186;

assign tmp_22_fu_726_p2 = (tmp_21_fu_220_p2 & tmp_20_fu_721_p2);

assign tmp_23_fu_736_p4 = {{win_val_0_2_2_i_i_to_fu_732_p1[30:23]}};

assign tmp_24_fu_762_p2 = (notrhs8_fu_756_p2 | notlhs8_fu_750_p2);

assign tmp_25_fu_768_p2 = (tmp_s_reg_1124 & tmp_24_fu_762_p2);

assign tmp_26_i_i_fu_339_p2 = ((t_V_10_reg_186 > 32'd2) ? 1'b1 : 1'b0);

assign tmp_27_fu_773_p2 = (tmp_26_fu_224_p2 & tmp_25_fu_768_p2);

assign tmp_28_fu_565_p4 = {{win_val_2_0_to_int_fu_561_p1[30:23]}};

assign tmp_29_fu_779_p2 = (notrhs3_reg_1144 | notlhs3_reg_1139);

assign tmp_2_fu_943_p2 = (tmp5_fu_937_p2 & tmp1_fu_908_p2);

assign tmp_30_fu_783_p2 = (tmp_s_reg_1124 & tmp_29_fu_779_p2);

assign tmp_32_fu_788_p2 = (tmp_31_reg_1149 & tmp_30_fu_783_p2);

assign tmp_33_fu_797_p4 = {{win_val_1_2_2_i_i_to_fu_793_p1[30:23]}};

assign tmp_34_fu_281_p4 = {{t_V_reg_175[31:1]}};

assign tmp_35_fu_823_p2 = (notrhs5_fu_817_p2 | notlhs5_fu_811_p2);

assign tmp_36_fu_829_p2 = (tmp_s_reg_1124 & tmp_35_fu_823_p2);

assign tmp_38_fu_834_p2 = (tmp_37_fu_228_p2 & tmp_36_fu_829_p2);

assign tmp_39_fu_844_p4 = {{win_val_2_2_2_i_i_to_fu_840_p1[30:23]}};

assign tmp_3_fu_675_p2 = (tmp_s_reg_1124 & tmp_1_fu_671_p2);

assign tmp_40_fu_870_p2 = (notrhs7_fu_864_p2 | notlhs7_fu_858_p2);

assign tmp_41_fu_876_p2 = (tmp_s_reg_1124 & tmp_40_fu_870_p2);

assign tmp_43_fu_881_p2 = (tmp_42_fu_232_p2 & tmp_41_fu_876_p2);

assign tmp_44_fu_595_p4 = {{win_val_2_1_to_int_fu_591_p1[30:23]}};

assign tmp_45_fu_621_p2 = (notrhs9_fu_615_p2 | notlhs9_fu_609_p2);

assign tmp_46_fu_443_p1 = win_val_1_1_to_int_fu_429_p1[22:0];

assign tmp_47_fu_627_p2 = (tmp_s_fu_459_p2 & tmp_45_fu_621_p2);

assign tmp_49_fu_633_p2 = (tmp_48_fu_216_p2 & tmp_47_fu_627_p2);

assign tmp_52_fu_479_p1 = win_val_0_1_to_int_fu_465_p1[22:0];

assign tmp_58_fu_527_p1 = win_val_0_0_to_int_fu_513_p1[22:0];

assign tmp_5_fu_680_p2 = (tmp_4_reg_1134 & tmp_3_fu_675_p2);

assign tmp_63_fu_699_p1 = win_val_1_0_to_int_fu_685_p1[22:0];

assign tmp_64_fu_746_p1 = win_val_0_2_2_i_i_to_fu_732_p1[22:0];

assign tmp_65_fu_575_p1 = win_val_2_0_to_int_fu_561_p1[22:0];

assign tmp_66_fu_807_p1 = win_val_1_2_2_i_i_to_fu_793_p1[22:0];

assign tmp_67_fu_854_p1 = win_val_2_2_2_i_i_to_fu_840_p1[22:0];

assign tmp_68_fu_605_p1 = win_val_2_1_to_int_fu_591_p1[22:0];

assign tmp_69_fu_345_p4 = {{t_V_10_reg_186[31:1]}};

assign tmp_6_fu_469_p4 = {{win_val_0_1_to_int_fu_465_p1[30:23]}};

assign tmp_7_fu_433_p4 = {{win_val_1_1_to_int_fu_429_p1[30:23]}};

assign tmp_8_fu_495_p2 = (notrhs2_fu_489_p2 | notlhs2_fu_483_p2);

assign tmp_9_fu_324_p4 = {{threshold_assign_to_s_reg_1036[30:23]}};

assign tmp_fu_249_p1 = threshold_assign_to_s_fu_246_p1[22:0];

assign tmp_i_i_135_fu_241_p2 = (32'd2 + rows_reg_1008);

assign tmp_i_i_fu_236_p2 = (32'd2 + cols_reg_1014);

assign tmp_s_fu_459_p2 = (notrhs_fu_453_p2 | notlhs_fu_447_p2);

assign win_val_0_0_to_int_fu_513_p1 = win_val_0_0_fu_78;

assign win_val_0_1_to_int_fu_465_p1 = win_val_0_1_fu_82;

assign win_val_0_2_2_i_i_to_fu_732_p1 = win_val_0_1_fu_82;

assign win_val_1_0_to_int_fu_685_p1 = win_val_1_0_fu_90;

assign win_val_1_1_to_int_fu_429_p1 = win_val_1_1_fu_94;

assign win_val_1_2_1_i_i_fu_382_p3 = ((tmp_20_i_i_reg_1079[0:0] === 1'b1) ? win_val_1_1_fu_94 : 32'd0);

assign win_val_1_2_2_i_i_to_fu_793_p1 = win_val_1_1_fu_94;

assign win_val_2_0_to_int_fu_561_p1 = win_val_2_0_fu_98;

assign win_val_2_1_to_int_fu_591_p1 = win_val_2_1_fu_86;

assign win_val_2_2_1_i_i_fu_389_p3 = ((tmp_20_i_i_reg_1079[0:0] === 1'b1) ? win_val_2_1_fu_86 : 32'd0);

assign win_val_2_2_2_i_i_to_fu_840_p1 = win_val_2_1_fu_86;

endmodule //FindMax
