-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FindMax is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_src_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_src_rows_V_empty_n : IN STD_LOGIC;
    p_src_rows_V_read : OUT STD_LOGIC;
    p_src_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_src_cols_V_empty_n : IN STD_LOGIC;
    p_src_cols_V_read : OUT STD_LOGIC;
    p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_src_data_stream_V_empty_n : IN STD_LOGIC;
    p_src_data_stream_V_read : OUT STD_LOGIC;
    p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_dst_data_stream_V_full_n : IN STD_LOGIC;
    p_dst_data_stream_V_write : OUT STD_LOGIC;
    threshold_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    threshold_empty_n : IN STD_LOGIC;
    threshold_read : OUT STD_LOGIC );
end;


architecture behav of FindMax is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_src_rows_V_blk_n : STD_LOGIC;
    signal p_src_cols_V_blk_n : STD_LOGIC;
    signal p_src_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond2_i_i_reg_1070 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_i_reg_1085 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_dst_data_stream_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal or_cond4_i_i_reg_1111 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond4_i_i_reg_1111_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal threshold_blk_n : STD_LOGIC;
    signal t_V_10_reg_186 : STD_LOGIC_VECTOR (31 downto 0);
    signal threshold_read_reg_1003 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal rows_reg_1008 : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_reg_1014 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_197_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal threshold_assign_reg_1020 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_i_i_fu_236_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_reg_1026 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_i_i_135_fu_241_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_135_reg_1031 : STD_LOGIC_VECTOR (31 downto 0);
    signal threshold_assign_to_s_fu_246_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal threshold_assign_to_s_reg_1036 : STD_LOGIC_VECTOR (31 downto 0);
    signal notrhs1_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs1_reg_1041 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_i_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_V_fu_264_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_V_reg_1050 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_i_i_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_i_i_reg_1055 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_i_i_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_i_i_reg_1060 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_1065 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_i_i_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op83_read_state7 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond2_i_i_reg_1070_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_fu_302_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_20_i_i_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_i_i_reg_1079 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_i_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_buf_val_0_addr_reg_1089 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_buf_val_1_addr_reg_1095 : STD_LOGIC_VECTOR (7 downto 0);
    signal notlhs1_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_reg_1101 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_reg_1101_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_i_i_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_i_i_reg_1106 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_i_i_reg_1106_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond4_i_i_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal win_val_1_1_1_reg_1115 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_1124 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_1134 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs3_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs3_reg_1139 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs3_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs3_reg_1144 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_reg_1149 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_reg_1154 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp9_demorgan_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp9_demorgan_reg_1159 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter1_state7 : STD_LOGIC;
    signal k_buf_val_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_buf_val_0_ce0 : STD_LOGIC;
    signal k_buf_val_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_buf_val_0_ce1 : STD_LOGIC;
    signal k_buf_val_0_we1 : STD_LOGIC;
    signal k_buf_val_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_buf_val_1_ce0 : STD_LOGIC;
    signal k_buf_val_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_buf_val_1_ce1 : STD_LOGIC;
    signal k_buf_val_1_we1 : STD_LOGIC;
    signal t_V_reg_175 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_21_i_i_fu_318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal win_val_0_0_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal win_val_0_1_fu_82 : STD_LOGIC_VECTOR (31 downto 0);
    signal win_val_2_1_fu_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal win_val_2_2_1_i_i_fu_389_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal win_val_1_0_fu_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal win_val_1_1_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal win_val_1_2_1_i_i_fu_382_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal win_val_2_0_fu_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_249_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_34_fu_281_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_9_fu_324_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_69_fu_345_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp1_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal win_val_1_1_to_int_fu_429_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_433_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_46_fu_443_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal win_val_0_1_to_int_fu_465_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_469_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_52_fu_479_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs2_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal win_val_0_0_to_int_fu_513_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_517_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_58_fu_527_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs4_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs4_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal win_val_2_0_to_int_fu_561_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_565_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_65_fu_575_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal win_val_2_1_to_int_fu_591_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_fu_595_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_68_fu_605_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs9_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs9_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal win_val_1_0_to_int_fu_685_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_689_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_63_fu_699_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs6_fu_709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs6_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal win_val_0_2_2_i_i_to_fu_732_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_736_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_64_fu_746_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs8_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs8_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal win_val_1_2_2_i_i_to_fu_793_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_797_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_66_fu_807_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs5_fu_817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs5_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal win_val_2_2_2_i_i_to_fu_840_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_fu_844_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_67_fu_854_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs7_fu_864_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs7_fu_858_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_870_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_876_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_881_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_demorgan_fu_892_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_897_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_903_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_887_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_834_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp7_demorgan_fu_914_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_788_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_773_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp8_demorgan_fu_926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_demorgan_fu_920_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_demorgan_fu_931_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_908_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_937_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_943_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_252 : BOOLEAN;

    component Haaris_Core_sitofPgM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Haaris_Core_fcmp_QgW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component FindMax_k_buf_val_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    k_buf_val_0_U : component FindMax_k_buf_val_0
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => k_buf_val_0_address0,
        ce0 => k_buf_val_0_ce0,
        q0 => k_buf_val_0_q0,
        address1 => k_buf_val_0_addr_reg_1089,
        ce1 => k_buf_val_0_ce1,
        we1 => k_buf_val_0_we1,
        d1 => k_buf_val_1_q0);

    k_buf_val_1_U : component FindMax_k_buf_val_0
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => k_buf_val_1_address0,
        ce0 => k_buf_val_1_ce0,
        q0 => k_buf_val_1_q0,
        address1 => k_buf_val_1_addr_reg_1095,
        ce1 => k_buf_val_1_ce1,
        we1 => k_buf_val_1_we1,
        d1 => p_src_data_stream_V_dout);

    Haaris_Core_sitofPgM_U275 : component Haaris_Core_sitofPgM
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => threshold_read_reg_1003,
        ce => ap_const_logic_1,
        dout => grp_fu_197_p1);

    Haaris_Core_fcmp_QgW_U276 : component Haaris_Core_fcmp_QgW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => win_val_1_1_fu_94,
        din1 => threshold_assign_reg_1020,
        opcode => ap_const_lv5_3,
        dout => tmp_4_fu_200_p2);

    Haaris_Core_fcmp_QgW_U277 : component Haaris_Core_fcmp_QgW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => win_val_0_1_fu_82,
        din1 => win_val_1_1_fu_94,
        opcode => ap_const_lv5_2,
        dout => tmp_11_fu_204_p2);

    Haaris_Core_fcmp_QgW_U278 : component Haaris_Core_fcmp_QgW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => win_val_0_0_fu_78,
        din1 => win_val_1_1_fu_94,
        opcode => ap_const_lv5_2,
        dout => tmp_16_fu_208_p2);

    Haaris_Core_fcmp_QgW_U279 : component Haaris_Core_fcmp_QgW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => win_val_2_0_fu_98,
        din1 => win_val_1_1_fu_94,
        opcode => ap_const_lv5_2,
        dout => tmp_31_fu_212_p2);

    Haaris_Core_fcmp_QgW_U280 : component Haaris_Core_fcmp_QgW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => win_val_2_1_fu_86,
        din1 => win_val_1_1_fu_94,
        opcode => ap_const_lv5_2,
        dout => tmp_48_fu_216_p2);

    Haaris_Core_fcmp_QgW_U281 : component Haaris_Core_fcmp_QgW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => win_val_1_0_fu_90,
        din1 => win_val_1_1_1_reg_1115,
        opcode => ap_const_lv5_2,
        dout => tmp_21_fu_220_p2);

    Haaris_Core_fcmp_QgW_U282 : component Haaris_Core_fcmp_QgW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => win_val_0_1_fu_82,
        din1 => win_val_1_1_1_reg_1115,
        opcode => ap_const_lv5_2,
        dout => tmp_26_fu_224_p2);

    Haaris_Core_fcmp_QgW_U283 : component Haaris_Core_fcmp_QgW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => win_val_1_1_fu_94,
        din1 => win_val_1_1_1_reg_1115,
        opcode => ap_const_lv5_2,
        dout => tmp_37_fu_228_p2);

    Haaris_Core_fcmp_QgW_U284 : component Haaris_Core_fcmp_QgW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => win_val_2_1_fu_86,
        din1 => win_val_1_1_1_reg_1115,
        opcode => ap_const_lv5_2,
        dout => tmp_42_fu_232_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((exitcond_i_i_fu_259_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((exitcond2_i_i_fu_297_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((exitcond_i_i_fu_259_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter1_state7)) or ((exitcond_i_i_fu_259_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter1_state7))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((exitcond_i_i_fu_259_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    t_V_10_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_i_i_fu_297_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                t_V_10_reg_186 <= j_V_fu_302_p2;
            elsif (((exitcond_i_i_fu_259_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                t_V_10_reg_186 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    t_V_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                t_V_reg_175 <= i_V_reg_1050;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                t_V_reg_175 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    win_val_1_1_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_252)) then
                if ((ap_predicate_op83_read_state7 = ap_const_boolean_1)) then 
                    win_val_1_1_fu_94 <= k_buf_val_1_q0;
                elsif (((or_cond_i_i_reg_1085 = ap_const_lv1_0) and (exitcond2_i_i_reg_1070 = ap_const_lv1_0))) then 
                    win_val_1_1_fu_94 <= win_val_1_2_1_i_i_fu_382_p3;
                end if;
            end if; 
        end if;
    end process;

    win_val_2_1_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_252)) then
                if ((ap_predicate_op83_read_state7 = ap_const_boolean_1)) then 
                    win_val_2_1_fu_86 <= p_src_data_stream_V_dout;
                elsif (((or_cond_i_i_reg_1085 = ap_const_lv1_0) and (exitcond2_i_i_reg_1070 = ap_const_lv1_0))) then 
                    win_val_2_1_fu_86 <= win_val_2_2_1_i_i_fu_389_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((threshold_empty_n = ap_const_logic_0) or (p_src_cols_V_empty_n = ap_const_logic_0) or (p_src_rows_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                cols_reg_1014 <= p_src_cols_V_dout;
                rows_reg_1008 <= p_src_rows_V_dout;
                threshold_read_reg_1003 <= threshold_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond2_i_i_reg_1070 <= exitcond2_i_i_fu_297_p2;
                exitcond2_i_i_reg_1070_pp0_iter1_reg <= exitcond2_i_i_reg_1070;
                notlhs1_reg_1101_pp0_iter1_reg <= notlhs1_reg_1101;
                or_cond4_i_i_reg_1111_pp0_iter1_reg <= or_cond4_i_i_reg_1111;
                tmp_26_i_i_reg_1106_pp0_iter1_reg <= tmp_26_i_i_reg_1106;
                win_val_1_1_1_reg_1115 <= win_val_1_1_fu_94;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_V_reg_1050 <= i_V_fu_264_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_i_fu_259_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                icmp_reg_1065 <= icmp_fu_291_p2;
                tmp_17_i_i_reg_1055 <= tmp_17_i_i_fu_270_p2;
                tmp_18_i_i_reg_1060 <= tmp_18_i_i_fu_275_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_i_i_fu_313_p2 = ap_const_lv1_1) and (exitcond2_i_i_fu_297_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                k_buf_val_0_addr_reg_1089 <= tmp_21_i_i_fu_318_p1(8 - 1 downto 0);
                k_buf_val_1_addr_reg_1095 <= tmp_21_i_i_fu_318_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_i_i_fu_297_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                notlhs1_reg_1101 <= notlhs1_fu_333_p2;
                or_cond4_i_i_reg_1111 <= or_cond4_i_i_fu_361_p2;
                or_cond_i_i_reg_1085 <= or_cond_i_i_fu_313_p2;
                tmp_20_i_i_reg_1079 <= tmp_20_i_i_fu_308_p2;
                tmp_26_i_i_reg_1106 <= tmp_26_i_i_fu_339_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_i_i_reg_1070 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                notlhs3_reg_1139 <= notlhs3_fu_579_p2;
                notrhs3_reg_1144 <= notrhs3_fu_585_p2;
                tmp9_demorgan_reg_1159 <= tmp9_demorgan_fu_639_p2;
                tmp_31_reg_1149 <= tmp_31_fu_212_p2;
                tmp_49_reg_1154 <= tmp_49_fu_633_p2;
                tmp_4_reg_1134 <= tmp_4_fu_200_p2;
                tmp_s_reg_1124 <= tmp_s_fu_459_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                notrhs1_reg_1041 <= notrhs1_fu_253_p2;
                threshold_assign_to_s_reg_1036 <= threshold_assign_to_s_fu_246_p1;
                tmp_i_i_135_reg_1031 <= tmp_i_i_135_fu_241_p2;
                tmp_i_i_reg_1026 <= tmp_i_i_fu_236_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                threshold_assign_reg_1020 <= grp_fu_197_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_i_i_reg_1070 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                win_val_0_0_fu_78 <= win_val_0_1_fu_82;
                win_val_2_0_fu_98 <= win_val_2_1_fu_86;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_predicate_op83_read_state7 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                win_val_0_1_fu_82 <= k_buf_val_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_i_i_reg_1070_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                win_val_1_0_fu_90 <= win_val_1_1_1_reg_1115;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_src_rows_V_empty_n, p_src_cols_V_empty_n, threshold_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_i_fu_259_p2, ap_CS_fsm_state5, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((threshold_empty_n = ap_const_logic_0) or (p_src_cols_V_empty_n = ap_const_logic_0) or (p_src_rows_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((exitcond_i_i_fu_259_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state9 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_00001_assign_proc : process(p_src_data_stream_V_empty_n, p_dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, or_cond4_i_i_reg_1111_pp0_iter1_reg, ap_predicate_op83_read_state7)
    begin
                ap_block_pp0_stage0_00001 <= (((or_cond4_i_i_reg_1111_pp0_iter1_reg = ap_const_lv1_1) and (p_dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_predicate_op83_read_state7 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_01001_assign_proc : process(p_src_data_stream_V_empty_n, p_dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, or_cond4_i_i_reg_1111_pp0_iter1_reg, ap_predicate_op83_read_state7)
    begin
                ap_block_pp0_stage0_01001 <= (((or_cond4_i_i_reg_1111_pp0_iter1_reg = ap_const_lv1_1) and (p_dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_predicate_op83_read_state7 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(p_src_data_stream_V_empty_n, p_dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, or_cond4_i_i_reg_1111_pp0_iter1_reg, ap_predicate_op83_read_state7)
    begin
                ap_block_pp0_stage0_11001 <= (((or_cond4_i_i_reg_1111_pp0_iter1_reg = ap_const_lv1_1) and (p_dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_predicate_op83_read_state7 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(p_src_data_stream_V_empty_n, p_dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, or_cond4_i_i_reg_1111_pp0_iter1_reg, ap_predicate_op83_read_state7)
    begin
                ap_block_pp0_stage0_subdone <= (((or_cond4_i_i_reg_1111_pp0_iter1_reg = ap_const_lv1_1) and (p_dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_predicate_op83_read_state7 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, p_src_rows_V_empty_n, p_src_cols_V_empty_n, threshold_empty_n)
    begin
                ap_block_state1 <= ((threshold_empty_n = ap_const_logic_0) or (p_src_cols_V_empty_n = ap_const_logic_0) or (p_src_rows_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state6_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter1_assign_proc : process(p_src_data_stream_V_empty_n, ap_predicate_op83_read_state7)
    begin
                ap_block_state7_pp0_stage0_iter1 <= ((p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_predicate_op83_read_state7 = ap_const_boolean_1));
    end process;


    ap_block_state8_pp0_stage0_iter2_assign_proc : process(p_dst_data_stream_V_full_n, or_cond4_i_i_reg_1111_pp0_iter1_reg)
    begin
                ap_block_state8_pp0_stage0_iter2 <= ((or_cond4_i_i_reg_1111_pp0_iter1_reg = ap_const_lv1_1) and (p_dst_data_stream_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_252_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_252 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_pp0_exit_iter1_state7_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter1_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, exitcond_i_i_fu_259_p2, ap_CS_fsm_state5)
    begin
        if (((exitcond_i_i_fu_259_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op83_read_state7_assign_proc : process(exitcond2_i_i_reg_1070, or_cond_i_i_reg_1085)
    begin
                ap_predicate_op83_read_state7 <= ((or_cond_i_i_reg_1085 = ap_const_lv1_1) and (exitcond2_i_i_reg_1070 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(exitcond_i_i_fu_259_p2, ap_CS_fsm_state5)
    begin
        if (((exitcond_i_i_fu_259_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_i_i_fu_297_p2 <= "1" when (t_V_10_reg_186 = tmp_i_i_reg_1026) else "0";
    exitcond_i_i_fu_259_p2 <= "1" when (t_V_reg_175 = tmp_i_i_135_reg_1031) else "0";
    i_V_fu_264_p2 <= std_logic_vector(unsigned(t_V_reg_175) + unsigned(ap_const_lv32_1));
    icmp1_fu_355_p2 <= "0" when (tmp_69_fu_345_p4 = ap_const_lv31_0) else "1";
    icmp_fu_291_p2 <= "0" when (tmp_34_fu_281_p4 = ap_const_lv31_0) else "1";
    j_V_fu_302_p2 <= std_logic_vector(unsigned(t_V_10_reg_186) + unsigned(ap_const_lv32_1));
    k_buf_val_0_address0 <= tmp_21_i_i_fu_318_p1(8 - 1 downto 0);

    k_buf_val_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k_buf_val_0_ce0 <= ap_const_logic_1;
        else 
            k_buf_val_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k_buf_val_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k_buf_val_0_ce1 <= ap_const_logic_1;
        else 
            k_buf_val_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    k_buf_val_0_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op83_read_state7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op83_read_state7 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k_buf_val_0_we1 <= ap_const_logic_1;
        else 
            k_buf_val_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    k_buf_val_1_address0 <= tmp_21_i_i_fu_318_p1(8 - 1 downto 0);

    k_buf_val_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k_buf_val_1_ce0 <= ap_const_logic_1;
        else 
            k_buf_val_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k_buf_val_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k_buf_val_1_ce1 <= ap_const_logic_1;
        else 
            k_buf_val_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    k_buf_val_1_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op83_read_state7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op83_read_state7 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k_buf_val_1_we1 <= ap_const_logic_1;
        else 
            k_buf_val_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    notlhs1_fu_333_p2 <= "0" when (tmp_9_fu_324_p4 = ap_const_lv8_FF) else "1";
    notlhs2_fu_483_p2 <= "0" when (tmp_6_fu_469_p4 = ap_const_lv8_FF) else "1";
    notlhs3_fu_579_p2 <= "0" when (tmp_28_fu_565_p4 = ap_const_lv8_FF) else "1";
    notlhs4_fu_531_p2 <= "0" when (tmp_13_fu_517_p4 = ap_const_lv8_FF) else "1";
    notlhs5_fu_811_p2 <= "0" when (tmp_33_fu_797_p4 = ap_const_lv8_FF) else "1";
    notlhs6_fu_703_p2 <= "0" when (tmp_18_fu_689_p4 = ap_const_lv8_FF) else "1";
    notlhs7_fu_858_p2 <= "0" when (tmp_39_fu_844_p4 = ap_const_lv8_FF) else "1";
    notlhs8_fu_750_p2 <= "0" when (tmp_23_fu_736_p4 = ap_const_lv8_FF) else "1";
    notlhs9_fu_609_p2 <= "0" when (tmp_44_fu_595_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_447_p2 <= "0" when (tmp_7_fu_433_p4 = ap_const_lv8_FF) else "1";
    notrhs1_fu_253_p2 <= "1" when (tmp_fu_249_p1 = ap_const_lv23_0) else "0";
    notrhs2_fu_489_p2 <= "1" when (tmp_52_fu_479_p1 = ap_const_lv23_0) else "0";
    notrhs3_fu_585_p2 <= "1" when (tmp_65_fu_575_p1 = ap_const_lv23_0) else "0";
    notrhs4_fu_537_p2 <= "1" when (tmp_58_fu_527_p1 = ap_const_lv23_0) else "0";
    notrhs5_fu_817_p2 <= "1" when (tmp_66_fu_807_p1 = ap_const_lv23_0) else "0";
    notrhs6_fu_709_p2 <= "1" when (tmp_63_fu_699_p1 = ap_const_lv23_0) else "0";
    notrhs7_fu_864_p2 <= "1" when (tmp_67_fu_854_p1 = ap_const_lv23_0) else "0";
    notrhs8_fu_756_p2 <= "1" when (tmp_64_fu_746_p1 = ap_const_lv23_0) else "0";
    notrhs9_fu_615_p2 <= "1" when (tmp_68_fu_605_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_453_p2 <= "1" when (tmp_46_fu_443_p1 = ap_const_lv23_0) else "0";
    or_cond4_i_i_fu_361_p2 <= (icmp_reg_1065 and icmp1_fu_355_p2);
    or_cond_i_i_fu_313_p2 <= (tmp_20_i_i_fu_308_p2 and tmp_17_i_i_reg_1055);

    p_dst_data_stream_V_blk_n_assign_proc : process(p_dst_data_stream_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, or_cond4_i_i_reg_1111_pp0_iter1_reg)
    begin
        if (((or_cond4_i_i_reg_1111_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_dst_data_stream_V_blk_n <= p_dst_data_stream_V_full_n;
        else 
            p_dst_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_dst_data_stream_V_din <= 
        ap_const_lv8_FF when (tmp_2_fu_943_p2(0) = '1') else 
        ap_const_lv8_0;

    p_dst_data_stream_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, or_cond4_i_i_reg_1111_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((or_cond4_i_i_reg_1111_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_dst_data_stream_V_write <= ap_const_logic_1;
        else 
            p_dst_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;


    p_src_cols_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_cols_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_cols_V_blk_n <= p_src_cols_V_empty_n;
        else 
            p_src_cols_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_cols_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_rows_V_empty_n, p_src_cols_V_empty_n, threshold_empty_n)
    begin
        if ((not(((threshold_empty_n = ap_const_logic_0) or (p_src_cols_V_empty_n = ap_const_logic_0) or (p_src_rows_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_cols_V_read <= ap_const_logic_1;
        else 
            p_src_cols_V_read <= ap_const_logic_0;
        end if; 
    end process;


    p_src_data_stream_V_blk_n_assign_proc : process(p_src_data_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond2_i_i_reg_1070, or_cond_i_i_reg_1085)
    begin
        if (((or_cond_i_i_reg_1085 = ap_const_lv1_1) and (exitcond2_i_i_reg_1070 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_src_data_stream_V_blk_n <= p_src_data_stream_V_empty_n;
        else 
            p_src_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_data_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op83_read_state7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op83_read_state7 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_src_data_stream_V_read <= ap_const_logic_1;
        else 
            p_src_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;


    p_src_rows_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_rows_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_rows_V_blk_n <= p_src_rows_V_empty_n;
        else 
            p_src_rows_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_rows_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_rows_V_empty_n, p_src_cols_V_empty_n, threshold_empty_n)
    begin
        if ((not(((threshold_empty_n = ap_const_logic_0) or (p_src_cols_V_empty_n = ap_const_logic_0) or (p_src_rows_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_rows_V_read <= ap_const_logic_1;
        else 
            p_src_rows_V_read <= ap_const_logic_0;
        end if; 
    end process;

    threshold_assign_to_s_fu_246_p1 <= threshold_assign_reg_1020;

    threshold_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, threshold_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            threshold_blk_n <= threshold_empty_n;
        else 
            threshold_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    threshold_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_rows_V_empty_n, p_src_cols_V_empty_n, threshold_empty_n)
    begin
        if ((not(((threshold_empty_n = ap_const_logic_0) or (p_src_cols_V_empty_n = ap_const_logic_0) or (p_src_rows_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            threshold_read <= ap_const_logic_1;
        else 
            threshold_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_908_p2 <= (tmp3_fu_903_p2 and tmp2_fu_887_p2);
    tmp2_fu_887_p2 <= (tmp_5_fu_680_p2 and tmp_18_i_i_reg_1060);
    tmp3_fu_903_p2 <= (tmp_26_i_i_reg_1106_pp0_iter1_reg and tmp4_fu_897_p2);
    tmp4_demorgan_fu_892_p2 <= (tmp_49_reg_1154 or tmp_43_fu_881_p2);
    tmp4_fu_897_p2 <= (tmp4_demorgan_fu_892_p2 xor ap_const_lv1_1);
    tmp5_demorgan_fu_931_p2 <= (tmp8_demorgan_fu_926_p2 or tmp6_demorgan_fu_920_p2);
    tmp5_fu_937_p2 <= (tmp5_demorgan_fu_931_p2 xor ap_const_lv1_1);
    tmp6_demorgan_fu_920_p2 <= (tmp_32_fu_788_p2 or tmp7_demorgan_fu_914_p2);
    tmp7_demorgan_fu_914_p2 <= (tmp_38_fu_834_p2 or tmp_22_fu_726_p2);
    tmp8_demorgan_fu_926_p2 <= (tmp_27_fu_773_p2 or tmp9_demorgan_reg_1159);
    tmp9_demorgan_fu_639_p2 <= (tmp_17_fu_555_p2 or tmp_12_fu_507_p2);
    tmp_10_fu_501_p2 <= (tmp_s_fu_459_p2 and tmp_8_fu_495_p2);
    tmp_12_fu_507_p2 <= (tmp_11_fu_204_p2 and tmp_10_fu_501_p2);
    tmp_13_fu_517_p4 <= win_val_0_0_to_int_fu_513_p1(30 downto 23);
    tmp_14_fu_543_p2 <= (notrhs4_fu_537_p2 or notlhs4_fu_531_p2);
    tmp_15_fu_549_p2 <= (tmp_s_fu_459_p2 and tmp_14_fu_543_p2);
    tmp_17_fu_555_p2 <= (tmp_16_fu_208_p2 and tmp_15_fu_549_p2);
    tmp_17_i_i_fu_270_p2 <= "1" when (unsigned(t_V_reg_175) < unsigned(rows_reg_1008)) else "0";
    tmp_18_fu_689_p4 <= win_val_1_0_to_int_fu_685_p1(30 downto 23);
    tmp_18_i_i_fu_275_p2 <= "1" when (unsigned(t_V_reg_175) > unsigned(ap_const_lv32_2)) else "0";
    tmp_19_fu_715_p2 <= (notrhs6_fu_709_p2 or notlhs6_fu_703_p2);
    tmp_1_fu_671_p2 <= (notrhs1_reg_1041 or notlhs1_reg_1101_pp0_iter1_reg);
    tmp_20_fu_721_p2 <= (tmp_s_reg_1124 and tmp_19_fu_715_p2);
    tmp_20_i_i_fu_308_p2 <= "1" when (unsigned(t_V_10_reg_186) < unsigned(cols_reg_1014)) else "0";
    tmp_21_i_i_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_10_reg_186),64));
    tmp_22_fu_726_p2 <= (tmp_21_fu_220_p2 and tmp_20_fu_721_p2);
    tmp_23_fu_736_p4 <= win_val_0_2_2_i_i_to_fu_732_p1(30 downto 23);
    tmp_24_fu_762_p2 <= (notrhs8_fu_756_p2 or notlhs8_fu_750_p2);
    tmp_25_fu_768_p2 <= (tmp_s_reg_1124 and tmp_24_fu_762_p2);
    tmp_26_i_i_fu_339_p2 <= "1" when (unsigned(t_V_10_reg_186) > unsigned(ap_const_lv32_2)) else "0";
    tmp_27_fu_773_p2 <= (tmp_26_fu_224_p2 and tmp_25_fu_768_p2);
    tmp_28_fu_565_p4 <= win_val_2_0_to_int_fu_561_p1(30 downto 23);
    tmp_29_fu_779_p2 <= (notrhs3_reg_1144 or notlhs3_reg_1139);
    tmp_2_fu_943_p2 <= (tmp5_fu_937_p2 and tmp1_fu_908_p2);
    tmp_30_fu_783_p2 <= (tmp_s_reg_1124 and tmp_29_fu_779_p2);
    tmp_32_fu_788_p2 <= (tmp_31_reg_1149 and tmp_30_fu_783_p2);
    tmp_33_fu_797_p4 <= win_val_1_2_2_i_i_to_fu_793_p1(30 downto 23);
    tmp_34_fu_281_p4 <= t_V_reg_175(31 downto 1);
    tmp_35_fu_823_p2 <= (notrhs5_fu_817_p2 or notlhs5_fu_811_p2);
    tmp_36_fu_829_p2 <= (tmp_s_reg_1124 and tmp_35_fu_823_p2);
    tmp_38_fu_834_p2 <= (tmp_37_fu_228_p2 and tmp_36_fu_829_p2);
    tmp_39_fu_844_p4 <= win_val_2_2_2_i_i_to_fu_840_p1(30 downto 23);
    tmp_3_fu_675_p2 <= (tmp_s_reg_1124 and tmp_1_fu_671_p2);
    tmp_40_fu_870_p2 <= (notrhs7_fu_864_p2 or notlhs7_fu_858_p2);
    tmp_41_fu_876_p2 <= (tmp_s_reg_1124 and tmp_40_fu_870_p2);
    tmp_43_fu_881_p2 <= (tmp_42_fu_232_p2 and tmp_41_fu_876_p2);
    tmp_44_fu_595_p4 <= win_val_2_1_to_int_fu_591_p1(30 downto 23);
    tmp_45_fu_621_p2 <= (notrhs9_fu_615_p2 or notlhs9_fu_609_p2);
    tmp_46_fu_443_p1 <= win_val_1_1_to_int_fu_429_p1(23 - 1 downto 0);
    tmp_47_fu_627_p2 <= (tmp_s_fu_459_p2 and tmp_45_fu_621_p2);
    tmp_49_fu_633_p2 <= (tmp_48_fu_216_p2 and tmp_47_fu_627_p2);
    tmp_52_fu_479_p1 <= win_val_0_1_to_int_fu_465_p1(23 - 1 downto 0);
    tmp_58_fu_527_p1 <= win_val_0_0_to_int_fu_513_p1(23 - 1 downto 0);
    tmp_5_fu_680_p2 <= (tmp_4_reg_1134 and tmp_3_fu_675_p2);
    tmp_63_fu_699_p1 <= win_val_1_0_to_int_fu_685_p1(23 - 1 downto 0);
    tmp_64_fu_746_p1 <= win_val_0_2_2_i_i_to_fu_732_p1(23 - 1 downto 0);
    tmp_65_fu_575_p1 <= win_val_2_0_to_int_fu_561_p1(23 - 1 downto 0);
    tmp_66_fu_807_p1 <= win_val_1_2_2_i_i_to_fu_793_p1(23 - 1 downto 0);
    tmp_67_fu_854_p1 <= win_val_2_2_2_i_i_to_fu_840_p1(23 - 1 downto 0);
    tmp_68_fu_605_p1 <= win_val_2_1_to_int_fu_591_p1(23 - 1 downto 0);
    tmp_69_fu_345_p4 <= t_V_10_reg_186(31 downto 1);
    tmp_6_fu_469_p4 <= win_val_0_1_to_int_fu_465_p1(30 downto 23);
    tmp_7_fu_433_p4 <= win_val_1_1_to_int_fu_429_p1(30 downto 23);
    tmp_8_fu_495_p2 <= (notrhs2_fu_489_p2 or notlhs2_fu_483_p2);
    tmp_9_fu_324_p4 <= threshold_assign_to_s_reg_1036(30 downto 23);
    tmp_fu_249_p1 <= threshold_assign_to_s_fu_246_p1(23 - 1 downto 0);
    tmp_i_i_135_fu_241_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) + unsigned(rows_reg_1008));
    tmp_i_i_fu_236_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) + unsigned(cols_reg_1014));
    tmp_s_fu_459_p2 <= (notrhs_fu_453_p2 or notlhs_fu_447_p2);
    win_val_0_0_to_int_fu_513_p1 <= win_val_0_0_fu_78;
    win_val_0_1_to_int_fu_465_p1 <= win_val_0_1_fu_82;
    win_val_0_2_2_i_i_to_fu_732_p1 <= win_val_0_1_fu_82;
    win_val_1_0_to_int_fu_685_p1 <= win_val_1_0_fu_90;
    win_val_1_1_to_int_fu_429_p1 <= win_val_1_1_fu_94;
    win_val_1_2_1_i_i_fu_382_p3 <= 
        win_val_1_1_fu_94 when (tmp_20_i_i_reg_1079(0) = '1') else 
        ap_const_lv32_0;
    win_val_1_2_2_i_i_to_fu_793_p1 <= win_val_1_1_fu_94;
    win_val_2_0_to_int_fu_561_p1 <= win_val_2_0_fu_98;
    win_val_2_1_to_int_fu_591_p1 <= win_val_2_1_fu_86;
    win_val_2_2_1_i_i_fu_389_p3 <= 
        win_val_2_1_fu_86 when (tmp_20_i_i_reg_1079(0) = '1') else 
        ap_const_lv32_0;
    win_val_2_2_2_i_i_to_fu_840_p1 <= win_val_2_1_fu_86;
end behav;
