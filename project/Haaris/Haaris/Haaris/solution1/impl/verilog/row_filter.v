// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module row_filter (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_src_V_V_dout,
        p_src_V_V_empty_n,
        p_src_V_V_read,
        p_dst_data_stream_V_V_din,
        p_dst_data_stream_V_V_full_n,
        p_dst_data_stream_V_V_write,
        p_anchor_x_dout,
        p_anchor_x_empty_n,
        p_anchor_x_read,
        rows_dout,
        rows_empty_n,
        rows_read,
        cols_dout,
        cols_empty_n,
        cols_read
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state9 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [39:0] p_src_V_V_dout;
input   p_src_V_V_empty_n;
output   p_src_V_V_read;
output  [34:0] p_dst_data_stream_V_V_din;
input   p_dst_data_stream_V_V_full_n;
output   p_dst_data_stream_V_V_write;
input  [0:0] p_anchor_x_dout;
input   p_anchor_x_empty_n;
output   p_anchor_x_read;
input  [31:0] rows_dout;
input   rows_empty_n;
output   rows_read;
input  [31:0] cols_dout;
input   cols_empty_n;
output   cols_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_src_V_V_read;
reg p_dst_data_stream_V_V_write;
reg p_anchor_x_read;
reg rows_read;
reg cols_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_src_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_4_i_reg_979;
reg    p_dst_data_stream_V_V_blk_n;
reg    ap_enable_reg_pp0_iter5;
reg   [0:0] tmp_9_i_reg_1007;
reg   [0:0] tmp_9_i_reg_1007_pp0_iter4_reg;
reg    p_anchor_x_blk_n;
reg    rows_blk_n;
reg    cols_blk_n;
reg   [31:0] t_V_1_reg_235;
reg   [31:0] heightloop_reg_909;
reg    ap_block_state1;
reg   [31:0] cols_read_reg_914;
reg   [0:0] index_reg_920;
wire   [31:0] index_cast_i1_cast_fu_246_p3;
reg   [31:0] index_cast_i1_cast_reg_928;
wire   [31:0] right_border_fu_254_p2;
reg   [31:0] right_border_reg_933;
wire   [31:0] stop_fu_260_p2;
reg   [31:0] stop_reg_941;
wire   [31:0] tmp_1_i_fu_266_p2;
reg   [31:0] tmp_1_i_reg_946;
wire   [31:0] tmp_2_cast_i_cast_fu_272_p3;
reg   [31:0] tmp_2_cast_i_cast_reg_951;
wire   [0:0] exitcond1_i_fu_280_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] i_V_fu_285_p2;
reg   [31:0] i_V_reg_965;
wire   [0:0] exitcond2_i_fu_291_p2;
reg   [0:0] exitcond2_i_reg_970;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
reg    ap_block_state8_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond2_i_reg_970_pp0_iter1_reg;
reg   [0:0] exitcond2_i_reg_970_pp0_iter2_reg;
reg   [0:0] exitcond2_i_reg_970_pp0_iter3_reg;
wire   [31:0] j_V_fu_296_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_4_i_fu_307_p2;
wire   [0:0] tmp_5_i_fu_312_p2;
reg   [0:0] tmp_5_i_reg_983;
reg   [0:0] tmp_5_i_reg_983_pp0_iter1_reg;
wire   [0:0] or_cond_i_fu_329_p2;
reg   [0:0] or_cond_i_reg_987;
reg   [0:0] or_cond_i_reg_987_pp0_iter1_reg;
wire   [31:0] col_assign_fu_335_p2;
reg   [31:0] col_assign_reg_991;
reg   [31:0] col_assign_reg_991_pp0_iter1_reg;
wire   [0:0] or_cond1_i_fu_345_p2;
reg   [0:0] or_cond1_i_reg_996;
reg   [0:0] or_cond1_i_reg_996_pp0_iter1_reg;
reg   [0:0] or_cond1_i_reg_996_pp0_iter2_reg;
reg   [0:0] or_cond1_i_reg_996_pp0_iter3_reg;
wire   [0:0] tmp_8_i_fu_351_p2;
reg   [0:0] tmp_8_i_reg_1002;
reg   [0:0] tmp_8_i_reg_1002_pp0_iter1_reg;
reg   [0:0] tmp_8_i_reg_1002_pp0_iter2_reg;
reg   [0:0] tmp_8_i_reg_1002_pp0_iter3_reg;
wire   [0:0] tmp_9_i_fu_356_p2;
reg   [0:0] tmp_9_i_reg_1007_pp0_iter1_reg;
reg   [0:0] tmp_9_i_reg_1007_pp0_iter2_reg;
reg   [0:0] tmp_9_i_reg_1007_pp0_iter3_reg;
wire   [31:0] x_i_fu_402_p3;
reg   [31:0] x_i_reg_1011;
reg   [31:0] x_i_reg_1011_pp0_iter1_reg;
reg   [31:0] x_i_reg_1011_pp0_iter2_reg;
wire   [39:0] row_buf_0_val_0_V_12_fu_460_p3;
reg   [39:0] row_buf_0_val_0_V_12_reg_1017;
reg   [39:0] row_buf_0_val_0_V_12_reg_1017_pp0_iter3_reg;
wire   [34:0] tmp_V_1_fu_779_p3;
reg   [34:0] tmp_V_1_reg_1032;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
wire   [2:0] l_border_buf_0_val_s_address0;
reg    l_border_buf_0_val_s_ce0;
reg    l_border_buf_0_val_s_we0;
wire   [2:0] l_border_buf_0_val_s_address1;
reg    l_border_buf_0_val_s_ce1;
wire   [39:0] l_border_buf_0_val_s_q1;
wire   [2:0] r_border_buf_0_val_s_address0;
reg    r_border_buf_0_val_s_ce0;
reg    r_border_buf_0_val_s_we0;
wire   [2:0] r_border_buf_0_val_s_address1;
reg    r_border_buf_0_val_s_ce1;
wire   [39:0] r_border_buf_0_val_s_q1;
reg   [31:0] t_V_reg_224;
wire    ap_CS_fsm_state9;
wire   [63:0] tmp_45_i_fu_423_p1;
wire   [63:0] tmp_50_i_fu_482_p1;
wire   [63:0] tmp_51_i_fu_490_p1;
reg    ap_block_pp0_stage0_01001;
reg   [39:0] row_buf_0_val_0_V_s_fu_94;
reg   [39:0] src_kernel_winX_temp_fu_98;
wire  signed [39:0] src_kernel_winX_temp_11_fu_509_p3;
reg   [39:0] src_kernel_winX_temp_1_fu_102;
reg   [39:0] src_kernel_winX_temp_2_fu_106;
reg   [39:0] src_kernel_winX_temp_3_fu_110;
reg   [39:0] src_kernel_winX_temp_4_fu_114;
reg   [39:0] src_kernel_winX_temp_5_fu_118;
reg   [39:0] row_buf_0_val_0_V_1_fu_122;
reg   [39:0] row_buf_0_val_0_V_2_fu_126;
wire   [39:0] row_buf_val_V_0_0_2_1_fu_439_p3;
reg   [39:0] row_buf_0_val_0_V_3_fu_130;
wire   [39:0] row_buf_0_val_0_V_10_fu_446_p3;
reg   [39:0] row_buf_0_val_0_V_4_fu_134;
wire   [39:0] row_buf_0_val_0_V_11_fu_453_p3;
wire   [0:0] ult_fu_318_p2;
wire   [0:0] rev_fu_323_p2;
wire   [0:0] tmp_7_i_fu_340_p2;
wire   [31:0] p_assign_fu_302_p2;
wire   [0:0] tmp_1_fu_362_p3;
wire   [0:0] tmp_38_i_fu_376_p2;
wire   [0:0] rev1_fu_370_p2;
wire   [0:0] tmp_2_fu_387_p3;
wire   [0:0] or_cond_i_i_fu_381_p2;
wire   [31:0] p_assign_1_i_fu_395_p3;
wire   [31:0] col_assign_2_i_fu_486_p2;
wire   [0:0] sel_tmp4_fu_505_p2;
wire   [39:0] sel_tmp3_fu_498_p3;
wire  signed [39:0] OP1_V_1_0_0_i_fu_535_p0;
wire  signed [39:0] OP1_V_1_0_0_1_i_fu_539_p0;
wire  signed [39:0] tmp_7_fu_543_p0;
wire  signed [39:0] tmp_7_fu_543_p1;
wire  signed [40:0] OP1_V_1_0_0_i_fu_535_p1;
wire  signed [40:0] OP1_V_1_0_0_1_i_fu_539_p1;
wire   [40:0] addconv_i_fu_549_p2;
wire  signed [39:0] tmp_73_0_0_2_cast_i_s_fu_559_p0;
wire  signed [39:0] tmp_73_0_0_3_cast_i_s_fu_563_p0;
wire  signed [39:0] tmp_8_fu_567_p0;
wire  signed [39:0] tmp_8_fu_567_p1;
wire  signed [40:0] tmp_73_0_0_2_cast_i_s_fu_559_p1;
wire  signed [40:0] tmp_73_0_0_3_cast_i_s_fu_563_p1;
wire   [40:0] tmp_fu_573_p2;
wire   [39:0] tmp_7_fu_543_p2;
wire   [39:0] tmp_8_fu_567_p2;
wire  signed [41:0] tmp_cast_fu_579_p1;
wire  signed [41:0] p_Val2_11_0_0_1_ca_fu_555_p1;
wire   [41:0] p_Val2_11_0_0_3_i_fu_591_p2;
wire  signed [39:0] tmp_73_0_0_4_cast_i_fu_601_p0;
wire  signed [39:0] tmp_6_fu_605_p0;
wire   [34:0] tmp_3_fu_583_p1;
wire   [34:0] tmp_5_fu_587_p1;
wire  signed [39:0] tmp_73_0_0_5_cast_i_s_fu_615_p0;
wire  signed [39:0] tmp_9_fu_619_p0;
wire  signed [42:0] p_Val2_11_0_0_3_ca_fu_597_p1;
wire  signed [42:0] tmp_73_0_0_4_cast_i_fu_601_p1;
wire  signed [40:0] tmp_73_0_0_5_cast_i_s_fu_615_p1;
wire  signed [40:0] tmp_73_0_0_6_cast_i_s_fu_623_p1;
wire   [40:0] tmp8_fu_637_p2;
wire  signed [42:0] tmp112_cast_fu_643_p1;
wire   [42:0] tmp7_fu_631_p2;
wire   [42:0] p_Val2_11_0_0_6_i_fu_647_p2;
wire   [34:0] tmp_4_fu_609_p2;
wire   [34:0] tmp_9_fu_619_p1;
wire   [34:0] tmp_6_fu_605_p1;
wire   [34:0] tmp_10_fu_627_p1;
wire   [34:0] tmp10_fu_667_p2;
wire   [34:0] tmp9_fu_661_p2;
wire   [7:0] tmp_s_fu_687_p4;
wire   [0:0] newsignbit_fu_679_p3;
wire   [0:0] p_not_i_i_i_i_fu_697_p2;
wire   [0:0] isneg_fu_653_p3;
wire   [0:0] brmerge_i_i_i_i_fu_703_p2;
wire   [0:0] tmp_1_i_i_i_fu_709_p2;
wire   [0:0] p_not38_i_i_i_i_fu_727_p2;
wire   [0:0] newsignbit_0_not_i_i_fu_721_p2;
wire   [0:0] brmerge39_i_i_i_i_fu_733_p2;
wire   [0:0] underflow_fu_739_p2;
wire   [0:0] overflow_fu_715_p2;
wire   [0:0] underflow_not_i_i_i_fu_751_p2;
wire   [0:0] brmerge_i_i_i_i_i_fu_745_p2;
wire   [34:0] p_Val2_s_fu_673_p2;
wire   [0:0] brmerge_i_i_i_fu_757_p2;
wire   [34:0] p_Val2_2_fu_763_p3;
wire   [34:0] p_Val2_4_i_i_i_fu_771_p3;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

row_filter_l_bordGfk #(
    .DataWidth( 40 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
l_border_buf_0_val_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(l_border_buf_0_val_s_address0),
    .ce0(l_border_buf_0_val_s_ce0),
    .we0(l_border_buf_0_val_s_we0),
    .d0(row_buf_0_val_0_V_s_fu_94),
    .address1(l_border_buf_0_val_s_address1),
    .ce1(l_border_buf_0_val_s_ce1),
    .q1(l_border_buf_0_val_s_q1)
);

row_filter_l_bordGfk #(
    .DataWidth( 40 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
r_border_buf_0_val_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(r_border_buf_0_val_s_address0),
    .ce0(r_border_buf_0_val_s_ce0),
    .we0(r_border_buf_0_val_s_we0),
    .d0(row_buf_0_val_0_V_s_fu_94),
    .address1(r_border_buf_0_val_s_address1),
    .ce1(r_border_buf_0_val_s_ce1),
    .q1(r_border_buf_0_val_s_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond1_i_fu_280_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_i_fu_280_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_i_fu_280_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond2_i_fu_291_p2 == 1'd0))) begin
        t_V_1_reg_235 <= j_V_fu_296_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_i_fu_280_p2 == 1'd0))) begin
        t_V_1_reg_235 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        t_V_reg_224 <= i_V_reg_965;
    end else if ((~((ap_start == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (p_anchor_x_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_224 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond2_i_fu_291_p2 == 1'd0))) begin
        col_assign_reg_991 <= col_assign_fu_335_p2;
        or_cond1_i_reg_996 <= or_cond1_i_fu_345_p2;
        or_cond_i_reg_987 <= or_cond_i_fu_329_p2;
        tmp_4_i_reg_979 <= tmp_4_i_fu_307_p2;
        tmp_5_i_reg_983 <= tmp_5_i_fu_312_p2;
        tmp_8_i_reg_1002 <= tmp_8_i_fu_351_p2;
        tmp_9_i_reg_1007 <= tmp_9_i_fu_356_p2;
        x_i_reg_1011 <= x_i_fu_402_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        col_assign_reg_991_pp0_iter1_reg <= col_assign_reg_991;
        exitcond2_i_reg_970 <= exitcond2_i_fu_291_p2;
        exitcond2_i_reg_970_pp0_iter1_reg <= exitcond2_i_reg_970;
        or_cond1_i_reg_996_pp0_iter1_reg <= or_cond1_i_reg_996;
        or_cond_i_reg_987_pp0_iter1_reg <= or_cond_i_reg_987;
        tmp_5_i_reg_983_pp0_iter1_reg <= tmp_5_i_reg_983;
        tmp_8_i_reg_1002_pp0_iter1_reg <= tmp_8_i_reg_1002;
        tmp_9_i_reg_1007_pp0_iter1_reg <= tmp_9_i_reg_1007;
        x_i_reg_1011_pp0_iter1_reg <= x_i_reg_1011;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (p_anchor_x_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_read_reg_914 <= cols_dout;
        heightloop_reg_909 <= rows_dout;
        index_cast_i1_cast_reg_928[1 : 0] <= index_cast_i1_cast_fu_246_p3[1 : 0];
        index_reg_920 <= p_anchor_x_dout;
        right_border_reg_933 <= right_border_fu_254_p2;
        stop_reg_941 <= stop_fu_260_p2;
        tmp_1_i_reg_946 <= tmp_1_i_fu_266_p2;
        tmp_2_cast_i_cast_reg_951[1 : 0] <= tmp_2_cast_i_cast_fu_272_p3[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond2_i_reg_970_pp0_iter2_reg <= exitcond2_i_reg_970_pp0_iter1_reg;
        exitcond2_i_reg_970_pp0_iter3_reg <= exitcond2_i_reg_970_pp0_iter2_reg;
        or_cond1_i_reg_996_pp0_iter2_reg <= or_cond1_i_reg_996_pp0_iter1_reg;
        or_cond1_i_reg_996_pp0_iter3_reg <= or_cond1_i_reg_996_pp0_iter2_reg;
        row_buf_0_val_0_V_12_reg_1017 <= row_buf_0_val_0_V_12_fu_460_p3;
        row_buf_0_val_0_V_12_reg_1017_pp0_iter3_reg <= row_buf_0_val_0_V_12_reg_1017;
        tmp_8_i_reg_1002_pp0_iter2_reg <= tmp_8_i_reg_1002_pp0_iter1_reg;
        tmp_8_i_reg_1002_pp0_iter3_reg <= tmp_8_i_reg_1002_pp0_iter2_reg;
        tmp_9_i_reg_1007_pp0_iter2_reg <= tmp_9_i_reg_1007_pp0_iter1_reg;
        tmp_9_i_reg_1007_pp0_iter3_reg <= tmp_9_i_reg_1007_pp0_iter2_reg;
        tmp_9_i_reg_1007_pp0_iter4_reg <= tmp_9_i_reg_1007_pp0_iter3_reg;
        x_i_reg_1011_pp0_iter2_reg <= x_i_reg_1011_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_965 <= i_V_fu_285_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (exitcond2_i_reg_970_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        row_buf_0_val_0_V_1_fu_122 <= row_buf_0_val_0_V_12_reg_1017_pp0_iter3_reg;
        src_kernel_winX_temp_1_fu_102 <= src_kernel_winX_temp_fu_98;
        src_kernel_winX_temp_2_fu_106 <= src_kernel_winX_temp_1_fu_102;
        src_kernel_winX_temp_3_fu_110 <= src_kernel_winX_temp_2_fu_106;
        src_kernel_winX_temp_4_fu_114 <= src_kernel_winX_temp_3_fu_110;
        src_kernel_winX_temp_5_fu_118 <= src_kernel_winX_temp_4_fu_114;
        src_kernel_winX_temp_fu_98 <= src_kernel_winX_temp_11_fu_509_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond2_i_reg_970_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        row_buf_0_val_0_V_2_fu_126 <= row_buf_val_V_0_0_2_1_fu_439_p3;
        row_buf_0_val_0_V_3_fu_130 <= row_buf_0_val_0_V_10_fu_446_p3;
        row_buf_0_val_0_V_4_fu_134 <= row_buf_0_val_0_V_11_fu_453_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_4_i_reg_979 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        row_buf_0_val_0_V_s_fu_94 <= p_src_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_9_i_reg_1007_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_V_1_reg_1032 <= tmp_V_1_fu_779_p3;
    end
end

always @ (*) begin
    if ((exitcond2_i_fu_291_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_i_fu_280_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_i_fu_280_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_blk_n = cols_empty_n;
    end else begin
        cols_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (p_anchor_x_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_read = 1'b1;
    end else begin
        cols_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        l_border_buf_0_val_s_ce0 = 1'b1;
    end else begin
        l_border_buf_0_val_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        l_border_buf_0_val_s_ce1 = 1'b1;
    end else begin
        l_border_buf_0_val_s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_5_i_reg_983_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        l_border_buf_0_val_s_we0 = 1'b1;
    end else begin
        l_border_buf_0_val_s_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_anchor_x_blk_n = p_anchor_x_empty_n;
    end else begin
        p_anchor_x_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (p_anchor_x_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_anchor_x_read = 1'b1;
    end else begin
        p_anchor_x_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_9_i_reg_1007_pp0_iter4_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        p_dst_data_stream_V_V_blk_n = p_dst_data_stream_V_V_full_n;
    end else begin
        p_dst_data_stream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_9_i_reg_1007_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_dst_data_stream_V_V_write = 1'b1;
    end else begin
        p_dst_data_stream_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_4_i_reg_979 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_src_V_V_blk_n = p_src_V_V_empty_n;
    end else begin
        p_src_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_4_i_reg_979 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_src_V_V_read = 1'b1;
    end else begin
        p_src_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        r_border_buf_0_val_s_ce0 = 1'b1;
    end else begin
        r_border_buf_0_val_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        r_border_buf_0_val_s_ce1 = 1'b1;
    end else begin
        r_border_buf_0_val_s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((or_cond_i_reg_987_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        r_border_buf_0_val_s_we0 = 1'b1;
    end else begin
        r_border_buf_0_val_s_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_blk_n = rows_empty_n;
    end else begin
        rows_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (p_anchor_x_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_read = 1'b1;
    end else begin
        rows_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (p_anchor_x_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_i_fu_280_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond2_i_fu_291_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((exitcond2_i_fu_291_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP1_V_1_0_0_1_i_fu_539_p0 = src_kernel_winX_temp_4_fu_114;

assign OP1_V_1_0_0_1_i_fu_539_p1 = OP1_V_1_0_0_1_i_fu_539_p0;

assign OP1_V_1_0_0_i_fu_535_p0 = src_kernel_winX_temp_5_fu_118;

assign OP1_V_1_0_0_i_fu_535_p1 = OP1_V_1_0_0_i_fu_535_p0;

assign addconv_i_fu_549_p2 = ($signed(OP1_V_1_0_0_i_fu_535_p1) + $signed(OP1_V_1_0_0_1_i_fu_539_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((tmp_9_i_reg_1007_pp0_iter4_reg == 1'd1) & (p_dst_data_stream_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((tmp_4_i_reg_979 == 1'd1) & (p_src_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((tmp_9_i_reg_1007_pp0_iter4_reg == 1'd1) & (p_dst_data_stream_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((tmp_4_i_reg_979 == 1'd1) & (p_src_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((tmp_9_i_reg_1007_pp0_iter4_reg == 1'd1) & (p_dst_data_stream_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((tmp_4_i_reg_979 == 1'd1) & (p_src_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (p_anchor_x_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((tmp_4_i_reg_979 == 1'd1) & (p_src_V_V_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp0_stage0_iter5 = ((tmp_9_i_reg_1007_pp0_iter4_reg == 1'd1) & (p_dst_data_stream_V_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign brmerge39_i_i_i_i_fu_733_p2 = (p_not38_i_i_i_i_fu_727_p2 | newsignbit_0_not_i_i_fu_721_p2);

assign brmerge_i_i_i_fu_757_p2 = (underflow_not_i_i_i_fu_751_p2 | overflow_fu_715_p2);

assign brmerge_i_i_i_i_fu_703_p2 = (p_not_i_i_i_i_fu_697_p2 | newsignbit_fu_679_p3);

assign brmerge_i_i_i_i_i_fu_745_p2 = (underflow_fu_739_p2 | overflow_fu_715_p2);

assign col_assign_2_i_fu_486_p2 = (right_border_reg_933 - x_i_reg_1011_pp0_iter2_reg);

assign col_assign_fu_335_p2 = (right_border_reg_933 - t_V_1_reg_235);

assign exitcond1_i_fu_280_p2 = ((t_V_reg_224 == heightloop_reg_909) ? 1'b1 : 1'b0);

assign exitcond2_i_fu_291_p2 = ((t_V_1_reg_235 == tmp_1_i_reg_946) ? 1'b1 : 1'b0);

assign i_V_fu_285_p2 = (t_V_reg_224 + 32'd1);

assign index_cast_i1_cast_fu_246_p3 = ((p_anchor_x_dout[0:0] === 1'b1) ? 32'd3 : 32'd0);

assign isneg_fu_653_p3 = p_Val2_11_0_0_6_i_fu_647_p2[32'd42];

assign j_V_fu_296_p2 = (t_V_1_reg_235 + 32'd1);

assign l_border_buf_0_val_s_address0 = 64'd0;

assign l_border_buf_0_val_s_address1 = tmp_50_i_fu_482_p1;

assign newsignbit_0_not_i_i_fu_721_p2 = (newsignbit_fu_679_p3 ^ 1'd1);

assign newsignbit_fu_679_p3 = p_Val2_11_0_0_6_i_fu_647_p2[32'd34];

assign or_cond1_i_fu_345_p2 = (tmp_7_i_fu_340_p2 | tmp_5_i_fu_312_p2);

assign or_cond_i_fu_329_p2 = (tmp_4_i_fu_307_p2 & rev_fu_323_p2);

assign or_cond_i_i_fu_381_p2 = (tmp_38_i_fu_376_p2 & rev1_fu_370_p2);

assign overflow_fu_715_p2 = (tmp_1_i_i_i_fu_709_p2 & brmerge_i_i_i_i_fu_703_p2);

assign p_Val2_11_0_0_1_ca_fu_555_p1 = $signed(addconv_i_fu_549_p2);

assign p_Val2_11_0_0_3_ca_fu_597_p1 = $signed(p_Val2_11_0_0_3_i_fu_591_p2);

assign p_Val2_11_0_0_3_i_fu_591_p2 = ($signed(tmp_cast_fu_579_p1) + $signed(p_Val2_11_0_0_1_ca_fu_555_p1));

assign p_Val2_11_0_0_6_i_fu_647_p2 = ($signed(tmp112_cast_fu_643_p1) + $signed(tmp7_fu_631_p2));

assign p_Val2_2_fu_763_p3 = ((brmerge_i_i_i_i_i_fu_745_p2[0:0] === 1'b1) ? 35'd17179869183 : p_Val2_s_fu_673_p2);

assign p_Val2_4_i_i_i_fu_771_p3 = ((underflow_fu_739_p2[0:0] === 1'b1) ? 35'd17179869184 : p_Val2_s_fu_673_p2);

assign p_Val2_s_fu_673_p2 = (tmp10_fu_667_p2 + tmp9_fu_661_p2);

assign p_assign_1_i_fu_395_p3 = ((tmp_2_fu_387_p3[0:0] === 1'b1) ? 32'd0 : right_border_reg_933);

assign p_assign_fu_302_p2 = (t_V_1_reg_235 + tmp_2_cast_i_cast_reg_951);

assign p_dst_data_stream_V_V_din = tmp_V_1_reg_1032;

assign p_not38_i_i_i_i_fu_727_p2 = ((tmp_s_fu_687_p4 != 8'd255) ? 1'b1 : 1'b0);

assign p_not_i_i_i_i_fu_697_p2 = ((tmp_s_fu_687_p4 != 8'd0) ? 1'b1 : 1'b0);

assign r_border_buf_0_val_s_address0 = tmp_45_i_fu_423_p1;

assign r_border_buf_0_val_s_address1 = tmp_51_i_fu_490_p1;

assign rev1_fu_370_p2 = (tmp_1_fu_362_p3 ^ 1'd1);

assign rev_fu_323_p2 = (ult_fu_318_p2 ^ 1'd1);

assign right_border_fu_254_p2 = ($signed(cols_dout) + $signed(32'd4294967295));

assign row_buf_0_val_0_V_10_fu_446_p3 = ((index_reg_920[0:0] === 1'b1) ? row_buf_0_val_0_V_4_fu_134 : row_buf_0_val_0_V_3_fu_130);

assign row_buf_0_val_0_V_11_fu_453_p3 = ((index_reg_920[0:0] === 1'b1) ? row_buf_0_val_0_V_s_fu_94 : row_buf_0_val_0_V_4_fu_134);

assign row_buf_0_val_0_V_12_fu_460_p3 = ((index_reg_920[0:0] === 1'b1) ? row_buf_0_val_0_V_2_fu_126 : row_buf_0_val_0_V_s_fu_94);

assign row_buf_val_V_0_0_2_1_fu_439_p3 = ((index_reg_920[0:0] === 1'b1) ? row_buf_0_val_0_V_3_fu_130 : row_buf_0_val_0_V_2_fu_126);

assign sel_tmp3_fu_498_p3 = ((or_cond1_i_reg_996_pp0_iter3_reg[0:0] === 1'b1) ? row_buf_0_val_0_V_1_fu_122 : l_border_buf_0_val_s_q1);

assign sel_tmp4_fu_505_p2 = (tmp_8_i_reg_1002_pp0_iter3_reg & or_cond1_i_reg_996_pp0_iter3_reg);

assign src_kernel_winX_temp_11_fu_509_p3 = ((sel_tmp4_fu_505_p2[0:0] === 1'b1) ? r_border_buf_0_val_s_q1 : sel_tmp3_fu_498_p3);

assign stop_fu_260_p2 = (cols_dout + index_cast_i1_cast_fu_246_p3);

assign tmp10_fu_667_p2 = (tmp_6_fu_605_p1 + tmp_10_fu_627_p1);

assign tmp112_cast_fu_643_p1 = $signed(tmp8_fu_637_p2);

assign tmp7_fu_631_p2 = ($signed(p_Val2_11_0_0_3_ca_fu_597_p1) + $signed(tmp_73_0_0_4_cast_i_fu_601_p1));

assign tmp8_fu_637_p2 = ($signed(tmp_73_0_0_5_cast_i_s_fu_615_p1) + $signed(tmp_73_0_0_6_cast_i_s_fu_623_p1));

assign tmp9_fu_661_p2 = (tmp_4_fu_609_p2 + tmp_9_fu_619_p1);

assign tmp_10_fu_627_p1 = src_kernel_winX_temp_11_fu_509_p3[34:0];

assign tmp_1_fu_362_p3 = p_assign_fu_302_p2[32'd31];

assign tmp_1_i_fu_266_p2 = (cols_dout + 32'd7);

assign tmp_1_i_i_i_fu_709_p2 = (isneg_fu_653_p3 ^ 1'd1);

assign tmp_2_cast_i_cast_fu_272_p3 = ((p_anchor_x_dout[0:0] === 1'b1) ? 32'd4294967292 : 32'd4294967295);

assign tmp_2_fu_387_p3 = p_assign_fu_302_p2[32'd31];

assign tmp_38_i_fu_376_p2 = (($signed(p_assign_fu_302_p2) < $signed(cols_read_reg_914)) ? 1'b1 : 1'b0);

assign tmp_3_fu_583_p1 = tmp_7_fu_543_p2[34:0];

assign tmp_45_i_fu_423_p1 = col_assign_reg_991_pp0_iter1_reg;

assign tmp_4_fu_609_p2 = (tmp_3_fu_583_p1 + tmp_5_fu_587_p1);

assign tmp_4_i_fu_307_p2 = ((t_V_1_reg_235 < cols_read_reg_914) ? 1'b1 : 1'b0);

assign tmp_50_i_fu_482_p1 = x_i_reg_1011_pp0_iter2_reg;

assign tmp_51_i_fu_490_p1 = col_assign_2_i_fu_486_p2;

assign tmp_5_fu_587_p1 = tmp_8_fu_567_p2[34:0];

assign tmp_5_i_fu_312_p2 = ((t_V_1_reg_235 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_6_fu_605_p0 = src_kernel_winX_temp_1_fu_102;

assign tmp_6_fu_605_p1 = tmp_6_fu_605_p0[34:0];

assign tmp_73_0_0_2_cast_i_s_fu_559_p0 = src_kernel_winX_temp_3_fu_110;

assign tmp_73_0_0_2_cast_i_s_fu_559_p1 = tmp_73_0_0_2_cast_i_s_fu_559_p0;

assign tmp_73_0_0_3_cast_i_s_fu_563_p0 = src_kernel_winX_temp_2_fu_106;

assign tmp_73_0_0_3_cast_i_s_fu_563_p1 = tmp_73_0_0_3_cast_i_s_fu_563_p0;

assign tmp_73_0_0_4_cast_i_fu_601_p0 = src_kernel_winX_temp_1_fu_102;

assign tmp_73_0_0_4_cast_i_fu_601_p1 = tmp_73_0_0_4_cast_i_fu_601_p0;

assign tmp_73_0_0_5_cast_i_s_fu_615_p0 = src_kernel_winX_temp_fu_98;

assign tmp_73_0_0_5_cast_i_s_fu_615_p1 = tmp_73_0_0_5_cast_i_s_fu_615_p0;

assign tmp_73_0_0_6_cast_i_s_fu_623_p1 = src_kernel_winX_temp_11_fu_509_p3;

assign tmp_7_fu_543_p0 = src_kernel_winX_temp_4_fu_114;

assign tmp_7_fu_543_p1 = src_kernel_winX_temp_5_fu_118;

assign tmp_7_fu_543_p2 = ($signed(tmp_7_fu_543_p0) + $signed(tmp_7_fu_543_p1));

assign tmp_7_i_fu_340_p2 = ((t_V_1_reg_235 > index_cast_i1_cast_reg_928) ? 1'b1 : 1'b0);

assign tmp_8_fu_567_p0 = src_kernel_winX_temp_2_fu_106;

assign tmp_8_fu_567_p1 = src_kernel_winX_temp_3_fu_110;

assign tmp_8_fu_567_p2 = ($signed(tmp_8_fu_567_p0) + $signed(tmp_8_fu_567_p1));

assign tmp_8_i_fu_351_p2 = ((t_V_1_reg_235 > stop_reg_941) ? 1'b1 : 1'b0);

assign tmp_9_fu_619_p0 = src_kernel_winX_temp_fu_98;

assign tmp_9_fu_619_p1 = tmp_9_fu_619_p0[34:0];

assign tmp_9_i_fu_356_p2 = ((t_V_1_reg_235 > 32'd6) ? 1'b1 : 1'b0);

assign tmp_V_1_fu_779_p3 = ((brmerge_i_i_i_fu_757_p2[0:0] === 1'b1) ? p_Val2_2_fu_763_p3 : p_Val2_4_i_i_i_fu_771_p3);

assign tmp_cast_fu_579_p1 = $signed(tmp_fu_573_p2);

assign tmp_fu_573_p2 = ($signed(tmp_73_0_0_2_cast_i_s_fu_559_p1) + $signed(tmp_73_0_0_3_cast_i_s_fu_563_p1));

assign tmp_s_fu_687_p4 = {{p_Val2_11_0_0_6_i_fu_647_p2[42:35]}};

assign ult_fu_318_p2 = ((t_V_1_reg_235 < right_border_reg_933) ? 1'b1 : 1'b0);

assign underflow_fu_739_p2 = (isneg_fu_653_p3 & brmerge39_i_i_i_i_fu_733_p2);

assign underflow_not_i_i_i_fu_751_p2 = (underflow_fu_739_p2 ^ 1'd1);

assign x_i_fu_402_p3 = ((or_cond_i_i_fu_381_p2[0:0] === 1'b1) ? p_assign_fu_302_p2 : p_assign_1_i_fu_395_p3);

always @ (posedge ap_clk) begin
    index_cast_i1_cast_reg_928[31:2] <= 30'b000000000000000000000000000000;
    tmp_2_cast_i_cast_reg_951[31:2] <= 30'b111111111111111111111111111111;
end

endmodule //row_filter
