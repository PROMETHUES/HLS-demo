-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity buildDoGPyramid is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    gauss_pyr_0_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    gauss_pyr_0_val_V_ce0 : OUT STD_LOGIC;
    gauss_pyr_0_val_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    gauss_pyr_1_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    gauss_pyr_1_val_V_ce0 : OUT STD_LOGIC;
    gauss_pyr_1_val_V_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
    gauss_pyr_2_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    gauss_pyr_2_val_V_ce0 : OUT STD_LOGIC;
    gauss_pyr_2_val_V_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
    gauss_pyr_3_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    gauss_pyr_3_val_V_ce0 : OUT STD_LOGIC;
    gauss_pyr_3_val_V_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
    gauss_pyr_4_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    gauss_pyr_4_val_V_ce0 : OUT STD_LOGIC;
    gauss_pyr_4_val_V_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
    gauss_pyr_5_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    gauss_pyr_5_val_V_ce0 : OUT STD_LOGIC;
    gauss_pyr_5_val_V_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
    gauss_pyr_1_rows_read : IN STD_LOGIC_VECTOR (31 downto 0);
    gauss_pyr_2_rows_read : IN STD_LOGIC_VECTOR (31 downto 0);
    gauss_pyr_3_rows_read : IN STD_LOGIC_VECTOR (31 downto 0);
    gauss_pyr_4_rows_read : IN STD_LOGIC_VECTOR (31 downto 0);
    gauss_pyr_5_rows_read : IN STD_LOGIC_VECTOR (31 downto 0);
    gauss_pyr_1_cols_read : IN STD_LOGIC_VECTOR (31 downto 0);
    gauss_pyr_2_cols_read : IN STD_LOGIC_VECTOR (31 downto 0);
    gauss_pyr_3_cols_read : IN STD_LOGIC_VECTOR (31 downto 0);
    gauss_pyr_4_cols_read : IN STD_LOGIC_VECTOR (31 downto 0);
    gauss_pyr_5_cols_read : IN STD_LOGIC_VECTOR (31 downto 0);
    dog_pyr_0_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dog_pyr_0_val_V_ce0 : OUT STD_LOGIC;
    dog_pyr_0_val_V_we0 : OUT STD_LOGIC;
    dog_pyr_0_val_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dog_pyr_1_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dog_pyr_1_val_V_ce0 : OUT STD_LOGIC;
    dog_pyr_1_val_V_we0 : OUT STD_LOGIC;
    dog_pyr_1_val_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dog_pyr_2_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dog_pyr_2_val_V_ce0 : OUT STD_LOGIC;
    dog_pyr_2_val_V_we0 : OUT STD_LOGIC;
    dog_pyr_2_val_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dog_pyr_3_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dog_pyr_3_val_V_ce0 : OUT STD_LOGIC;
    dog_pyr_3_val_V_we0 : OUT STD_LOGIC;
    dog_pyr_3_val_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dog_pyr_4_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dog_pyr_4_val_V_ce0 : OUT STD_LOGIC;
    dog_pyr_4_val_V_we0 : OUT STD_LOGIC;
    dog_pyr_4_val_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dog_pyr_0_rows_read : IN STD_LOGIC_VECTOR (31 downto 0);
    dog_pyr_1_rows_read : IN STD_LOGIC_VECTOR (31 downto 0);
    dog_pyr_2_rows_read : IN STD_LOGIC_VECTOR (31 downto 0);
    dog_pyr_3_rows_read : IN STD_LOGIC_VECTOR (31 downto 0);
    dog_pyr_4_rows_read : IN STD_LOGIC_VECTOR (31 downto 0);
    dog_pyr_0_cols_read : IN STD_LOGIC_VECTOR (31 downto 0);
    dog_pyr_1_cols_read : IN STD_LOGIC_VECTOR (31 downto 0);
    dog_pyr_2_cols_read : IN STD_LOGIC_VECTOR (31 downto 0);
    dog_pyr_3_cols_read : IN STD_LOGIC_VECTOR (31 downto 0);
    dog_pyr_4_cols_read : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of buildDoGPyramid is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_19_fu_508_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_19_reg_1214 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal gauss_pyr_cols_addr9_fu_515_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal gauss_pyr_cols_addr9_reg_1220 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag_1_fu_530_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag_1_reg_1225 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag12_1_fu_552_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag12_1_reg_1230 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag15_1_fu_574_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag15_1_reg_1235 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag21_1_fu_596_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag21_1_reg_1240 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag18_1_fu_618_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag18_1_reg_1245 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag38_be_fu_640_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag38_be_reg_1250 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag35_be_fu_662_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag35_be_reg_1255 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag31_be_fu_684_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag31_be_reg_1260 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag27_be_fu_706_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag27_be_reg_1265 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag24_be_fu_728_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag24_be_reg_1270 : STD_LOGIC_VECTOR (0 downto 0);
    signal dog_pyr_rows_1_fu_884_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_SubArray2D_fu_470_ap_idle : STD_LOGIC;
    signal grp_SubArray2D_fu_470_ap_ready : STD_LOGIC;
    signal grp_SubArray2D_fu_470_ap_done : STD_LOGIC;
    signal dog_pyr_rows20_1_fu_906_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal dog_pyr_rows23_1_fu_928_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal dog_pyr_rows21_1_fu_950_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal dog_pyr_rows22_1_fu_972_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal dog_pyr_cols27_be_fu_998_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal dog_pyr_cols26_be_fu_1020_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal dog_pyr_cols2533_be_fu_1042_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal dog_pyr_cols24_be_fu_1064_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal dog_pyr_cols_be_fu_1086_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SubArray2D_fu_470_ap_start : STD_LOGIC;
    signal grp_SubArray2D_fu_470_src0_1_val_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_SubArray2D_fu_470_src0_1_val_V_ce0 : STD_LOGIC;
    signal grp_SubArray2D_fu_470_src0_2_val_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_SubArray2D_fu_470_src0_2_val_V_ce0 : STD_LOGIC;
    signal grp_SubArray2D_fu_470_src0_3_val_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_SubArray2D_fu_470_src0_3_val_V_ce0 : STD_LOGIC;
    signal grp_SubArray2D_fu_470_src0_4_val_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_SubArray2D_fu_470_src0_4_val_V_ce0 : STD_LOGIC;
    signal grp_SubArray2D_fu_470_src0_5_val_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_SubArray2D_fu_470_src0_5_val_V_ce0 : STD_LOGIC;
    signal grp_SubArray2D_fu_470_src1_0_val_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_SubArray2D_fu_470_src1_0_val_V_ce0 : STD_LOGIC;
    signal grp_SubArray2D_fu_470_dst_0_val_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_SubArray2D_fu_470_dst_0_val_V_ce0 : STD_LOGIC;
    signal grp_SubArray2D_fu_470_dst_0_val_V_we0 : STD_LOGIC;
    signal grp_SubArray2D_fu_470_dst_0_val_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SubArray2D_fu_470_dst_1_val_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_SubArray2D_fu_470_dst_1_val_V_ce0 : STD_LOGIC;
    signal grp_SubArray2D_fu_470_dst_1_val_V_we0 : STD_LOGIC;
    signal grp_SubArray2D_fu_470_dst_1_val_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SubArray2D_fu_470_dst_2_val_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_SubArray2D_fu_470_dst_2_val_V_ce0 : STD_LOGIC;
    signal grp_SubArray2D_fu_470_dst_2_val_V_we0 : STD_LOGIC;
    signal grp_SubArray2D_fu_470_dst_2_val_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SubArray2D_fu_470_dst_3_val_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_SubArray2D_fu_470_dst_3_val_V_ce0 : STD_LOGIC;
    signal grp_SubArray2D_fu_470_dst_3_val_V_we0 : STD_LOGIC;
    signal grp_SubArray2D_fu_470_dst_3_val_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SubArray2D_fu_470_dst_4_val_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_SubArray2D_fu_470_dst_4_val_V_ce0 : STD_LOGIC;
    signal grp_SubArray2D_fu_470_dst_4_val_V_we0 : STD_LOGIC;
    signal grp_SubArray2D_fu_470_dst_4_val_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SubArray2D_fu_470_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SubArray2D_fu_470_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag2_reg_212 : STD_LOGIC_VECTOR (0 downto 0);
    signal dog_pyr_rows22_s_reg_223 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag3_reg_235 : STD_LOGIC_VECTOR (0 downto 0);
    signal dog_pyr_rows21_s_reg_246 : STD_LOGIC_VECTOR (31 downto 0);
    signal dog_pyr_rows23_s_reg_258 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag4_reg_270 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag5_reg_281 : STD_LOGIC_VECTOR (0 downto 0);
    signal dog_pyr_cols_s_reg_292 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag6_reg_304 : STD_LOGIC_VECTOR (0 downto 0);
    signal dog_pyr_rows20_s_reg_315 : STD_LOGIC_VECTOR (31 downto 0);
    signal dog_pyr_cols24_s_reg_327 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag7_reg_339 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag8_reg_350 : STD_LOGIC_VECTOR (0 downto 0);
    signal dog_pyr_cols2533_s_reg_361 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag9_reg_373 : STD_LOGIC_VECTOR (0 downto 0);
    signal dog_pyr_rows_s_reg_384 : STD_LOGIC_VECTOR (31 downto 0);
    signal dog_pyr_cols26_s_reg_396 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag1_reg_408 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag_reg_419 : STD_LOGIC_VECTOR (0 downto 0);
    signal dog_pyr_cols27_s_reg_430 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i_phi_fu_446_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_442 : STD_LOGIC_VECTOR (2 downto 0);
    signal gauss_pyr_rows_addr6_reg_454 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SubArray2D_fu_470_ap_start_reg : STD_LOGIC := '0';
    signal gauss_pyr_cols_addr9_fu_515_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal dog_pyr_0_rows_writ_fu_750_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal dog_pyr_1_rows_writ_fu_757_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal dog_pyr_2_rows_writ_fu_764_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal dog_pyr_3_rows_writ_fu_771_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal dog_pyr_4_rows_writ_fu_778_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal dog_pyr_0_cols_writ_fu_785_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal dog_pyr_1_cols_writ_fu_792_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal dog_pyr_2_cols_writ_fu_799_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal dog_pyr_3_cols_writ_fu_806_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal dog_pyr_4_cols_writ_fu_813_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_6_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_7_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_8_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_9_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_condition_884 : BOOLEAN;

    component SubArray2D IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src0_1_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        src0_1_val_V_ce0 : OUT STD_LOGIC;
        src0_1_val_V_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
        src0_2_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        src0_2_val_V_ce0 : OUT STD_LOGIC;
        src0_2_val_V_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
        src0_3_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        src0_3_val_V_ce0 : OUT STD_LOGIC;
        src0_3_val_V_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
        src0_4_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        src0_4_val_V_ce0 : OUT STD_LOGIC;
        src0_4_val_V_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
        src0_5_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        src0_5_val_V_ce0 : OUT STD_LOGIC;
        src0_5_val_V_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
        src0_val_V_offset : IN STD_LOGIC_VECTOR (2 downto 0);
        src0_rows_read : IN STD_LOGIC_VECTOR (31 downto 0);
        src0_cols_read : IN STD_LOGIC_VECTOR (31 downto 0);
        src1_0_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        src1_0_val_V_ce0 : OUT STD_LOGIC;
        src1_0_val_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        src1_val_V_offset : IN STD_LOGIC_VECTOR (2 downto 0);
        dst_0_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst_0_val_V_ce0 : OUT STD_LOGIC;
        dst_0_val_V_we0 : OUT STD_LOGIC;
        dst_0_val_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dst_1_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst_1_val_V_ce0 : OUT STD_LOGIC;
        dst_1_val_V_we0 : OUT STD_LOGIC;
        dst_1_val_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dst_2_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst_2_val_V_ce0 : OUT STD_LOGIC;
        dst_2_val_V_we0 : OUT STD_LOGIC;
        dst_2_val_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dst_3_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst_3_val_V_ce0 : OUT STD_LOGIC;
        dst_3_val_V_we0 : OUT STD_LOGIC;
        dst_3_val_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dst_4_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst_4_val_V_ce0 : OUT STD_LOGIC;
        dst_4_val_V_we0 : OUT STD_LOGIC;
        dst_4_val_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component SIFT2_Core_mux_83Yie IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component SIFT2_Core_mux_83Zio_x IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    grp_SubArray2D_fu_470 : component SubArray2D
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_SubArray2D_fu_470_ap_start,
        ap_done => grp_SubArray2D_fu_470_ap_done,
        ap_idle => grp_SubArray2D_fu_470_ap_idle,
        ap_ready => grp_SubArray2D_fu_470_ap_ready,
        src0_1_val_V_address0 => grp_SubArray2D_fu_470_src0_1_val_V_address0,
        src0_1_val_V_ce0 => grp_SubArray2D_fu_470_src0_1_val_V_ce0,
        src0_1_val_V_q0 => gauss_pyr_1_val_V_q0,
        src0_2_val_V_address0 => grp_SubArray2D_fu_470_src0_2_val_V_address0,
        src0_2_val_V_ce0 => grp_SubArray2D_fu_470_src0_2_val_V_ce0,
        src0_2_val_V_q0 => gauss_pyr_2_val_V_q0,
        src0_3_val_V_address0 => grp_SubArray2D_fu_470_src0_3_val_V_address0,
        src0_3_val_V_ce0 => grp_SubArray2D_fu_470_src0_3_val_V_ce0,
        src0_3_val_V_q0 => gauss_pyr_3_val_V_q0,
        src0_4_val_V_address0 => grp_SubArray2D_fu_470_src0_4_val_V_address0,
        src0_4_val_V_ce0 => grp_SubArray2D_fu_470_src0_4_val_V_ce0,
        src0_4_val_V_q0 => gauss_pyr_4_val_V_q0,
        src0_5_val_V_address0 => grp_SubArray2D_fu_470_src0_5_val_V_address0,
        src0_5_val_V_ce0 => grp_SubArray2D_fu_470_src0_5_val_V_ce0,
        src0_5_val_V_q0 => gauss_pyr_5_val_V_q0,
        src0_val_V_offset => i_19_reg_1214,
        src0_rows_read => gauss_pyr_rows_addr6_reg_454,
        src0_cols_read => gauss_pyr_cols_addr9_reg_1220,
        src1_0_val_V_address0 => grp_SubArray2D_fu_470_src1_0_val_V_address0,
        src1_0_val_V_ce0 => grp_SubArray2D_fu_470_src1_0_val_V_ce0,
        src1_0_val_V_q0 => gauss_pyr_0_val_V_q0,
        src1_val_V_offset => i_reg_442,
        dst_0_val_V_address0 => grp_SubArray2D_fu_470_dst_0_val_V_address0,
        dst_0_val_V_ce0 => grp_SubArray2D_fu_470_dst_0_val_V_ce0,
        dst_0_val_V_we0 => grp_SubArray2D_fu_470_dst_0_val_V_we0,
        dst_0_val_V_d0 => grp_SubArray2D_fu_470_dst_0_val_V_d0,
        dst_1_val_V_address0 => grp_SubArray2D_fu_470_dst_1_val_V_address0,
        dst_1_val_V_ce0 => grp_SubArray2D_fu_470_dst_1_val_V_ce0,
        dst_1_val_V_we0 => grp_SubArray2D_fu_470_dst_1_val_V_we0,
        dst_1_val_V_d0 => grp_SubArray2D_fu_470_dst_1_val_V_d0,
        dst_2_val_V_address0 => grp_SubArray2D_fu_470_dst_2_val_V_address0,
        dst_2_val_V_ce0 => grp_SubArray2D_fu_470_dst_2_val_V_ce0,
        dst_2_val_V_we0 => grp_SubArray2D_fu_470_dst_2_val_V_we0,
        dst_2_val_V_d0 => grp_SubArray2D_fu_470_dst_2_val_V_d0,
        dst_3_val_V_address0 => grp_SubArray2D_fu_470_dst_3_val_V_address0,
        dst_3_val_V_ce0 => grp_SubArray2D_fu_470_dst_3_val_V_ce0,
        dst_3_val_V_we0 => grp_SubArray2D_fu_470_dst_3_val_V_we0,
        dst_3_val_V_d0 => grp_SubArray2D_fu_470_dst_3_val_V_d0,
        dst_4_val_V_address0 => grp_SubArray2D_fu_470_dst_4_val_V_address0,
        dst_4_val_V_ce0 => grp_SubArray2D_fu_470_dst_4_val_V_ce0,
        dst_4_val_V_we0 => grp_SubArray2D_fu_470_dst_4_val_V_we0,
        dst_4_val_V_d0 => grp_SubArray2D_fu_470_dst_4_val_V_d0,
        ap_return_0 => grp_SubArray2D_fu_470_ap_return_0,
        ap_return_1 => grp_SubArray2D_fu_470_ap_return_1);

    SIFT2_Core_mux_83Yie_U773 : component SIFT2_Core_mux_83Yie
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => gauss_pyr_5_cols_read,
        din1 => gauss_pyr_1_cols_read,
        din2 => gauss_pyr_2_cols_read,
        din3 => gauss_pyr_3_cols_read,
        din4 => gauss_pyr_4_cols_read,
        din5 => gauss_pyr_5_cols_read,
        din6 => gauss_pyr_5_cols_read,
        din7 => gauss_pyr_5_cols_read,
        din8 => gauss_pyr_cols_addr9_fu_515_p9,
        dout => gauss_pyr_cols_addr9_fu_515_p10);

    SIFT2_Core_mux_83Zio_x_U774 : component SIFT2_Core_mux_83Zio_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_1,
        din1 => write_flag_reg_419,
        din2 => write_flag_reg_419,
        din3 => write_flag_reg_419,
        din4 => write_flag_reg_419,
        din5 => write_flag_reg_419,
        din6 => write_flag_reg_419,
        din7 => write_flag_reg_419,
        din8 => i_reg_442,
        dout => write_flag_1_fu_530_p10);

    SIFT2_Core_mux_83Zio_x_U775 : component SIFT2_Core_mux_83Zio_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag8_reg_350,
        din1 => ap_const_lv1_1,
        din2 => write_flag8_reg_350,
        din3 => write_flag8_reg_350,
        din4 => write_flag8_reg_350,
        din5 => write_flag8_reg_350,
        din6 => write_flag8_reg_350,
        din7 => write_flag8_reg_350,
        din8 => i_reg_442,
        dout => write_flag12_1_fu_552_p10);

    SIFT2_Core_mux_83Zio_x_U776 : component SIFT2_Core_mux_83Zio_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag5_reg_281,
        din1 => write_flag5_reg_281,
        din2 => ap_const_lv1_1,
        din3 => write_flag5_reg_281,
        din4 => write_flag5_reg_281,
        din5 => write_flag5_reg_281,
        din6 => write_flag5_reg_281,
        din7 => write_flag5_reg_281,
        din8 => i_reg_442,
        dout => write_flag15_1_fu_574_p10);

    SIFT2_Core_mux_83Zio_x_U777 : component SIFT2_Core_mux_83Zio_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag3_reg_235,
        din1 => write_flag3_reg_235,
        din2 => write_flag3_reg_235,
        din3 => write_flag3_reg_235,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_1,
        din8 => i_reg_442,
        dout => write_flag21_1_fu_596_p10);

    SIFT2_Core_mux_83Zio_x_U778 : component SIFT2_Core_mux_83Zio_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag2_reg_212,
        din1 => write_flag2_reg_212,
        din2 => write_flag2_reg_212,
        din3 => ap_const_lv1_1,
        din4 => write_flag2_reg_212,
        din5 => write_flag2_reg_212,
        din6 => write_flag2_reg_212,
        din7 => write_flag2_reg_212,
        din8 => i_reg_442,
        dout => write_flag18_1_fu_618_p10);

    SIFT2_Core_mux_83Zio_x_U779 : component SIFT2_Core_mux_83Zio_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag1_reg_408,
        din1 => write_flag1_reg_408,
        din2 => write_flag1_reg_408,
        din3 => write_flag1_reg_408,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_1,
        din8 => i_reg_442,
        dout => write_flag38_be_fu_640_p10);

    SIFT2_Core_mux_83Zio_x_U780 : component SIFT2_Core_mux_83Zio_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag9_reg_373,
        din1 => write_flag9_reg_373,
        din2 => write_flag9_reg_373,
        din3 => ap_const_lv1_1,
        din4 => write_flag9_reg_373,
        din5 => write_flag9_reg_373,
        din6 => write_flag9_reg_373,
        din7 => write_flag9_reg_373,
        din8 => i_reg_442,
        dout => write_flag35_be_fu_662_p10);

    SIFT2_Core_mux_83Zio_x_U781 : component SIFT2_Core_mux_83Zio_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag7_reg_339,
        din1 => write_flag7_reg_339,
        din2 => ap_const_lv1_1,
        din3 => write_flag7_reg_339,
        din4 => write_flag7_reg_339,
        din5 => write_flag7_reg_339,
        din6 => write_flag7_reg_339,
        din7 => write_flag7_reg_339,
        din8 => i_reg_442,
        dout => write_flag31_be_fu_684_p10);

    SIFT2_Core_mux_83Zio_x_U782 : component SIFT2_Core_mux_83Zio_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag6_reg_304,
        din1 => ap_const_lv1_1,
        din2 => write_flag6_reg_304,
        din3 => write_flag6_reg_304,
        din4 => write_flag6_reg_304,
        din5 => write_flag6_reg_304,
        din6 => write_flag6_reg_304,
        din7 => write_flag6_reg_304,
        din8 => i_reg_442,
        dout => write_flag27_be_fu_706_p10);

    SIFT2_Core_mux_83Zio_x_U783 : component SIFT2_Core_mux_83Zio_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_1,
        din1 => write_flag4_reg_270,
        din2 => write_flag4_reg_270,
        din3 => write_flag4_reg_270,
        din4 => write_flag4_reg_270,
        din5 => write_flag4_reg_270,
        din6 => write_flag4_reg_270,
        din7 => write_flag4_reg_270,
        din8 => i_reg_442,
        dout => write_flag24_be_fu_728_p10);

    SIFT2_Core_mux_83Yie_U784 : component SIFT2_Core_mux_83Yie
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => grp_SubArray2D_fu_470_ap_return_0,
        din1 => dog_pyr_rows_s_reg_384,
        din2 => dog_pyr_rows_s_reg_384,
        din3 => dog_pyr_rows_s_reg_384,
        din4 => dog_pyr_rows_s_reg_384,
        din5 => dog_pyr_rows_s_reg_384,
        din6 => dog_pyr_rows_s_reg_384,
        din7 => dog_pyr_rows_s_reg_384,
        din8 => i_reg_442,
        dout => dog_pyr_rows_1_fu_884_p10);

    SIFT2_Core_mux_83Yie_U785 : component SIFT2_Core_mux_83Yie
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => dog_pyr_rows20_s_reg_315,
        din1 => grp_SubArray2D_fu_470_ap_return_0,
        din2 => dog_pyr_rows20_s_reg_315,
        din3 => dog_pyr_rows20_s_reg_315,
        din4 => dog_pyr_rows20_s_reg_315,
        din5 => dog_pyr_rows20_s_reg_315,
        din6 => dog_pyr_rows20_s_reg_315,
        din7 => dog_pyr_rows20_s_reg_315,
        din8 => i_reg_442,
        dout => dog_pyr_rows20_1_fu_906_p10);

    SIFT2_Core_mux_83Yie_U786 : component SIFT2_Core_mux_83Yie
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => dog_pyr_rows23_s_reg_258,
        din1 => dog_pyr_rows23_s_reg_258,
        din2 => dog_pyr_rows23_s_reg_258,
        din3 => dog_pyr_rows23_s_reg_258,
        din4 => grp_SubArray2D_fu_470_ap_return_0,
        din5 => grp_SubArray2D_fu_470_ap_return_0,
        din6 => grp_SubArray2D_fu_470_ap_return_0,
        din7 => grp_SubArray2D_fu_470_ap_return_0,
        din8 => i_reg_442,
        dout => dog_pyr_rows23_1_fu_928_p10);

    SIFT2_Core_mux_83Yie_U787 : component SIFT2_Core_mux_83Yie
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => dog_pyr_rows21_s_reg_246,
        din1 => dog_pyr_rows21_s_reg_246,
        din2 => grp_SubArray2D_fu_470_ap_return_0,
        din3 => dog_pyr_rows21_s_reg_246,
        din4 => dog_pyr_rows21_s_reg_246,
        din5 => dog_pyr_rows21_s_reg_246,
        din6 => dog_pyr_rows21_s_reg_246,
        din7 => dog_pyr_rows21_s_reg_246,
        din8 => i_reg_442,
        dout => dog_pyr_rows21_1_fu_950_p10);

    SIFT2_Core_mux_83Yie_U788 : component SIFT2_Core_mux_83Yie
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => dog_pyr_rows22_s_reg_223,
        din1 => dog_pyr_rows22_s_reg_223,
        din2 => dog_pyr_rows22_s_reg_223,
        din3 => grp_SubArray2D_fu_470_ap_return_0,
        din4 => dog_pyr_rows22_s_reg_223,
        din5 => dog_pyr_rows22_s_reg_223,
        din6 => dog_pyr_rows22_s_reg_223,
        din7 => dog_pyr_rows22_s_reg_223,
        din8 => i_reg_442,
        dout => dog_pyr_rows22_1_fu_972_p10);

    SIFT2_Core_mux_83Yie_U789 : component SIFT2_Core_mux_83Yie
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => dog_pyr_cols27_s_reg_430,
        din1 => dog_pyr_cols27_s_reg_430,
        din2 => dog_pyr_cols27_s_reg_430,
        din3 => dog_pyr_cols27_s_reg_430,
        din4 => grp_SubArray2D_fu_470_ap_return_1,
        din5 => grp_SubArray2D_fu_470_ap_return_1,
        din6 => grp_SubArray2D_fu_470_ap_return_1,
        din7 => grp_SubArray2D_fu_470_ap_return_1,
        din8 => i_reg_442,
        dout => dog_pyr_cols27_be_fu_998_p10);

    SIFT2_Core_mux_83Yie_U790 : component SIFT2_Core_mux_83Yie
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => dog_pyr_cols26_s_reg_396,
        din1 => dog_pyr_cols26_s_reg_396,
        din2 => dog_pyr_cols26_s_reg_396,
        din3 => grp_SubArray2D_fu_470_ap_return_1,
        din4 => dog_pyr_cols26_s_reg_396,
        din5 => dog_pyr_cols26_s_reg_396,
        din6 => dog_pyr_cols26_s_reg_396,
        din7 => dog_pyr_cols26_s_reg_396,
        din8 => i_reg_442,
        dout => dog_pyr_cols26_be_fu_1020_p10);

    SIFT2_Core_mux_83Yie_U791 : component SIFT2_Core_mux_83Yie
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => dog_pyr_cols2533_s_reg_361,
        din1 => dog_pyr_cols2533_s_reg_361,
        din2 => grp_SubArray2D_fu_470_ap_return_1,
        din3 => dog_pyr_cols2533_s_reg_361,
        din4 => dog_pyr_cols2533_s_reg_361,
        din5 => dog_pyr_cols2533_s_reg_361,
        din6 => dog_pyr_cols2533_s_reg_361,
        din7 => dog_pyr_cols2533_s_reg_361,
        din8 => i_reg_442,
        dout => dog_pyr_cols2533_be_fu_1042_p10);

    SIFT2_Core_mux_83Yie_U792 : component SIFT2_Core_mux_83Yie
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => dog_pyr_cols24_s_reg_327,
        din1 => grp_SubArray2D_fu_470_ap_return_1,
        din2 => dog_pyr_cols24_s_reg_327,
        din3 => dog_pyr_cols24_s_reg_327,
        din4 => dog_pyr_cols24_s_reg_327,
        din5 => dog_pyr_cols24_s_reg_327,
        din6 => dog_pyr_cols24_s_reg_327,
        din7 => dog_pyr_cols24_s_reg_327,
        din8 => i_reg_442,
        dout => dog_pyr_cols24_be_fu_1064_p10);

    SIFT2_Core_mux_83Yie_U793 : component SIFT2_Core_mux_83Yie
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => grp_SubArray2D_fu_470_ap_return_1,
        din1 => dog_pyr_cols_s_reg_292,
        din2 => dog_pyr_cols_s_reg_292,
        din3 => dog_pyr_cols_s_reg_292,
        din4 => dog_pyr_cols_s_reg_292,
        din5 => dog_pyr_cols_s_reg_292,
        din6 => dog_pyr_cols_s_reg_292,
        din7 => dog_pyr_cols_s_reg_292,
        din8 => i_reg_442,
        dout => dog_pyr_cols_be_fu_1086_p10);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_502_p2 = ap_const_lv1_1))) then 
                    ap_return_0_preg <= dog_pyr_0_rows_writ_fu_750_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_502_p2 = ap_const_lv1_1))) then 
                    ap_return_1_preg <= dog_pyr_1_rows_writ_fu_757_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_502_p2 = ap_const_lv1_1))) then 
                    ap_return_2_preg <= dog_pyr_2_rows_writ_fu_764_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_502_p2 = ap_const_lv1_1))) then 
                    ap_return_3_preg <= dog_pyr_3_rows_writ_fu_771_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_502_p2 = ap_const_lv1_1))) then 
                    ap_return_4_preg <= dog_pyr_4_rows_writ_fu_778_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_502_p2 = ap_const_lv1_1))) then 
                    ap_return_5_preg <= dog_pyr_0_cols_writ_fu_785_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_6_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_502_p2 = ap_const_lv1_1))) then 
                    ap_return_6_preg <= dog_pyr_1_cols_writ_fu_792_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_7_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_502_p2 = ap_const_lv1_1))) then 
                    ap_return_7_preg <= dog_pyr_2_cols_writ_fu_799_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_8_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_8_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_502_p2 = ap_const_lv1_1))) then 
                    ap_return_8_preg <= dog_pyr_3_cols_writ_fu_806_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_9_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_9_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_502_p2 = ap_const_lv1_1))) then 
                    ap_return_9_preg <= dog_pyr_4_cols_writ_fu_813_p3;
                end if; 
            end if;
        end if;
    end process;


    grp_SubArray2D_fu_470_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_SubArray2D_fu_470_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_502_p2 = ap_const_lv1_0))) then 
                    grp_SubArray2D_fu_470_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_SubArray2D_fu_470_ap_ready = ap_const_logic_1)) then 
                    grp_SubArray2D_fu_470_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    gauss_pyr_rows_addr6_reg_454_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_502_p2 = ap_const_lv1_0))) then
                if ((ap_phi_mux_i_phi_fu_446_p4 = ap_const_lv3_0)) then 
                    gauss_pyr_rows_addr6_reg_454 <= gauss_pyr_1_rows_read;
                elsif ((ap_const_boolean_1 = ap_condition_884)) then 
                    gauss_pyr_rows_addr6_reg_454 <= gauss_pyr_5_rows_read;
                elsif ((ap_phi_mux_i_phi_fu_446_p4 = ap_const_lv3_3)) then 
                    gauss_pyr_rows_addr6_reg_454 <= gauss_pyr_4_rows_read;
                elsif ((ap_phi_mux_i_phi_fu_446_p4 = ap_const_lv3_2)) then 
                    gauss_pyr_rows_addr6_reg_454 <= gauss_pyr_3_rows_read;
                elsif ((ap_phi_mux_i_phi_fu_446_p4 = ap_const_lv3_1)) then 
                    gauss_pyr_rows_addr6_reg_454 <= gauss_pyr_2_rows_read;
                end if;
            end if; 
        end if;
    end process;

    i_reg_442_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_SubArray2D_fu_470_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_442 <= i_19_reg_1214;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_442 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    write_flag1_reg_408_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_SubArray2D_fu_470_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                write_flag1_reg_408 <= write_flag38_be_reg_1250;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag1_reg_408 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag2_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_SubArray2D_fu_470_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                write_flag2_reg_212 <= write_flag18_1_reg_1245;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag2_reg_212 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag3_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_SubArray2D_fu_470_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                write_flag3_reg_235 <= write_flag21_1_reg_1240;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag3_reg_235 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag4_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_SubArray2D_fu_470_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                write_flag4_reg_270 <= write_flag24_be_reg_1270;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag4_reg_270 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag5_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_SubArray2D_fu_470_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                write_flag5_reg_281 <= write_flag15_1_reg_1235;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag5_reg_281 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag6_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_SubArray2D_fu_470_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                write_flag6_reg_304 <= write_flag27_be_reg_1265;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag6_reg_304 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag7_reg_339_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_SubArray2D_fu_470_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                write_flag7_reg_339 <= write_flag31_be_reg_1260;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag7_reg_339 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag8_reg_350_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_SubArray2D_fu_470_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                write_flag8_reg_350 <= write_flag12_1_reg_1230;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag8_reg_350 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag9_reg_373_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_SubArray2D_fu_470_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                write_flag9_reg_373 <= write_flag35_be_reg_1255;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag9_reg_373 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag_reg_419_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_SubArray2D_fu_470_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                write_flag_reg_419 <= write_flag_1_reg_1225;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag_reg_419 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_SubArray2D_fu_470_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                dog_pyr_cols24_s_reg_327 <= dog_pyr_cols24_be_fu_1064_p10;
                dog_pyr_cols2533_s_reg_361 <= dog_pyr_cols2533_be_fu_1042_p10;
                dog_pyr_cols26_s_reg_396 <= dog_pyr_cols26_be_fu_1020_p10;
                dog_pyr_cols27_s_reg_430 <= dog_pyr_cols27_be_fu_998_p10;
                dog_pyr_cols_s_reg_292 <= dog_pyr_cols_be_fu_1086_p10;
                dog_pyr_rows20_s_reg_315 <= dog_pyr_rows20_1_fu_906_p10;
                dog_pyr_rows21_s_reg_246 <= dog_pyr_rows21_1_fu_950_p10;
                dog_pyr_rows22_s_reg_223 <= dog_pyr_rows22_1_fu_972_p10;
                dog_pyr_rows23_s_reg_258 <= dog_pyr_rows23_1_fu_928_p10;
                dog_pyr_rows_s_reg_384 <= dog_pyr_rows_1_fu_884_p10;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_502_p2 = ap_const_lv1_0))) then
                gauss_pyr_cols_addr9_reg_1220 <= gauss_pyr_cols_addr9_fu_515_p10;
                write_flag12_1_reg_1230 <= write_flag12_1_fu_552_p10;
                write_flag15_1_reg_1235 <= write_flag15_1_fu_574_p10;
                write_flag18_1_reg_1245 <= write_flag18_1_fu_618_p10;
                write_flag21_1_reg_1240 <= write_flag21_1_fu_596_p10;
                write_flag24_be_reg_1270 <= write_flag24_be_fu_728_p10;
                write_flag27_be_reg_1265 <= write_flag27_be_fu_706_p10;
                write_flag31_be_reg_1260 <= write_flag31_be_fu_684_p10;
                write_flag35_be_reg_1255 <= write_flag35_be_fu_662_p10;
                write_flag38_be_reg_1250 <= write_flag38_be_fu_640_p10;
                write_flag_1_reg_1225 <= write_flag_1_fu_530_p10;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_19_reg_1214 <= i_19_fu_508_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_502_p2, ap_CS_fsm_state3, grp_SubArray2D_fu_470_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_502_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_SubArray2D_fu_470_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_condition_884_assign_proc : process(ap_phi_mux_i_phi_fu_446_p4)
    begin
                ap_condition_884 <= (not((ap_phi_mux_i_phi_fu_446_p4 = ap_const_lv3_0)) and not((ap_phi_mux_i_phi_fu_446_p4 = ap_const_lv3_3)) and not((ap_phi_mux_i_phi_fu_446_p4 = ap_const_lv3_2)) and not((ap_phi_mux_i_phi_fu_446_p4 = ap_const_lv3_1)));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_502_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_502_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_i_phi_fu_446_p4 <= i_reg_442;

    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_502_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_502_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_502_p2, dog_pyr_0_rows_writ_fu_750_p3, ap_return_0_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_502_p2 = ap_const_lv1_1))) then 
            ap_return_0 <= dog_pyr_0_rows_writ_fu_750_p3;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_502_p2, dog_pyr_1_rows_writ_fu_757_p3, ap_return_1_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_502_p2 = ap_const_lv1_1))) then 
            ap_return_1 <= dog_pyr_1_rows_writ_fu_757_p3;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_502_p2, dog_pyr_2_rows_writ_fu_764_p3, ap_return_2_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_502_p2 = ap_const_lv1_1))) then 
            ap_return_2 <= dog_pyr_2_rows_writ_fu_764_p3;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_502_p2, dog_pyr_3_rows_writ_fu_771_p3, ap_return_3_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_502_p2 = ap_const_lv1_1))) then 
            ap_return_3 <= dog_pyr_3_rows_writ_fu_771_p3;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_502_p2, dog_pyr_4_rows_writ_fu_778_p3, ap_return_4_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_502_p2 = ap_const_lv1_1))) then 
            ap_return_4 <= dog_pyr_4_rows_writ_fu_778_p3;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_return_5_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_502_p2, dog_pyr_0_cols_writ_fu_785_p3, ap_return_5_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_502_p2 = ap_const_lv1_1))) then 
            ap_return_5 <= dog_pyr_0_cols_writ_fu_785_p3;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    ap_return_6_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_502_p2, dog_pyr_1_cols_writ_fu_792_p3, ap_return_6_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_502_p2 = ap_const_lv1_1))) then 
            ap_return_6 <= dog_pyr_1_cols_writ_fu_792_p3;
        else 
            ap_return_6 <= ap_return_6_preg;
        end if; 
    end process;


    ap_return_7_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_502_p2, dog_pyr_2_cols_writ_fu_799_p3, ap_return_7_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_502_p2 = ap_const_lv1_1))) then 
            ap_return_7 <= dog_pyr_2_cols_writ_fu_799_p3;
        else 
            ap_return_7 <= ap_return_7_preg;
        end if; 
    end process;


    ap_return_8_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_502_p2, dog_pyr_3_cols_writ_fu_806_p3, ap_return_8_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_502_p2 = ap_const_lv1_1))) then 
            ap_return_8 <= dog_pyr_3_cols_writ_fu_806_p3;
        else 
            ap_return_8 <= ap_return_8_preg;
        end if; 
    end process;


    ap_return_9_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_502_p2, dog_pyr_4_cols_writ_fu_813_p3, ap_return_9_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_502_p2 = ap_const_lv1_1))) then 
            ap_return_9 <= dog_pyr_4_cols_writ_fu_813_p3;
        else 
            ap_return_9 <= ap_return_9_preg;
        end if; 
    end process;

    dog_pyr_0_cols_writ_fu_785_p3 <= 
        dog_pyr_cols_s_reg_292 when (write_flag4_reg_270(0) = '1') else 
        dog_pyr_0_cols_read;
    dog_pyr_0_rows_writ_fu_750_p3 <= 
        dog_pyr_rows_s_reg_384 when (write_flag_reg_419(0) = '1') else 
        dog_pyr_0_rows_read;
    dog_pyr_0_val_V_address0 <= grp_SubArray2D_fu_470_dst_0_val_V_address0;
    dog_pyr_0_val_V_ce0 <= grp_SubArray2D_fu_470_dst_0_val_V_ce0;
    dog_pyr_0_val_V_d0 <= grp_SubArray2D_fu_470_dst_0_val_V_d0;
    dog_pyr_0_val_V_we0 <= grp_SubArray2D_fu_470_dst_0_val_V_we0;
    dog_pyr_1_cols_writ_fu_792_p3 <= 
        dog_pyr_cols24_s_reg_327 when (write_flag6_reg_304(0) = '1') else 
        dog_pyr_1_cols_read;
    dog_pyr_1_rows_writ_fu_757_p3 <= 
        dog_pyr_rows20_s_reg_315 when (write_flag8_reg_350(0) = '1') else 
        dog_pyr_1_rows_read;
    dog_pyr_1_val_V_address0 <= grp_SubArray2D_fu_470_dst_1_val_V_address0;
    dog_pyr_1_val_V_ce0 <= grp_SubArray2D_fu_470_dst_1_val_V_ce0;
    dog_pyr_1_val_V_d0 <= grp_SubArray2D_fu_470_dst_1_val_V_d0;
    dog_pyr_1_val_V_we0 <= grp_SubArray2D_fu_470_dst_1_val_V_we0;
    dog_pyr_2_cols_writ_fu_799_p3 <= 
        dog_pyr_cols2533_s_reg_361 when (write_flag7_reg_339(0) = '1') else 
        dog_pyr_2_cols_read;
    dog_pyr_2_rows_writ_fu_764_p3 <= 
        dog_pyr_rows21_s_reg_246 when (write_flag5_reg_281(0) = '1') else 
        dog_pyr_2_rows_read;
    dog_pyr_2_val_V_address0 <= grp_SubArray2D_fu_470_dst_2_val_V_address0;
    dog_pyr_2_val_V_ce0 <= grp_SubArray2D_fu_470_dst_2_val_V_ce0;
    dog_pyr_2_val_V_d0 <= grp_SubArray2D_fu_470_dst_2_val_V_d0;
    dog_pyr_2_val_V_we0 <= grp_SubArray2D_fu_470_dst_2_val_V_we0;
    dog_pyr_3_cols_writ_fu_806_p3 <= 
        dog_pyr_cols26_s_reg_396 when (write_flag9_reg_373(0) = '1') else 
        dog_pyr_3_cols_read;
    dog_pyr_3_rows_writ_fu_771_p3 <= 
        dog_pyr_rows22_s_reg_223 when (write_flag2_reg_212(0) = '1') else 
        dog_pyr_3_rows_read;
    dog_pyr_3_val_V_address0 <= grp_SubArray2D_fu_470_dst_3_val_V_address0;
    dog_pyr_3_val_V_ce0 <= grp_SubArray2D_fu_470_dst_3_val_V_ce0;
    dog_pyr_3_val_V_d0 <= grp_SubArray2D_fu_470_dst_3_val_V_d0;
    dog_pyr_3_val_V_we0 <= grp_SubArray2D_fu_470_dst_3_val_V_we0;
    dog_pyr_4_cols_writ_fu_813_p3 <= 
        dog_pyr_cols27_s_reg_430 when (write_flag1_reg_408(0) = '1') else 
        dog_pyr_4_cols_read;
    dog_pyr_4_rows_writ_fu_778_p3 <= 
        dog_pyr_rows23_s_reg_258 when (write_flag3_reg_235(0) = '1') else 
        dog_pyr_4_rows_read;
    dog_pyr_4_val_V_address0 <= grp_SubArray2D_fu_470_dst_4_val_V_address0;
    dog_pyr_4_val_V_ce0 <= grp_SubArray2D_fu_470_dst_4_val_V_ce0;
    dog_pyr_4_val_V_d0 <= grp_SubArray2D_fu_470_dst_4_val_V_d0;
    dog_pyr_4_val_V_we0 <= grp_SubArray2D_fu_470_dst_4_val_V_we0;
    exitcond_fu_502_p2 <= "1" when (i_reg_442 = ap_const_lv3_5) else "0";
    gauss_pyr_0_val_V_address0 <= grp_SubArray2D_fu_470_src1_0_val_V_address0;
    gauss_pyr_0_val_V_ce0 <= grp_SubArray2D_fu_470_src1_0_val_V_ce0;
    gauss_pyr_1_val_V_address0 <= grp_SubArray2D_fu_470_src0_1_val_V_address0;
    gauss_pyr_1_val_V_ce0 <= grp_SubArray2D_fu_470_src0_1_val_V_ce0;
    gauss_pyr_2_val_V_address0 <= grp_SubArray2D_fu_470_src0_2_val_V_address0;
    gauss_pyr_2_val_V_ce0 <= grp_SubArray2D_fu_470_src0_2_val_V_ce0;
    gauss_pyr_3_val_V_address0 <= grp_SubArray2D_fu_470_src0_3_val_V_address0;
    gauss_pyr_3_val_V_ce0 <= grp_SubArray2D_fu_470_src0_3_val_V_ce0;
    gauss_pyr_4_val_V_address0 <= grp_SubArray2D_fu_470_src0_4_val_V_address0;
    gauss_pyr_4_val_V_ce0 <= grp_SubArray2D_fu_470_src0_4_val_V_ce0;
    gauss_pyr_5_val_V_address0 <= grp_SubArray2D_fu_470_src0_5_val_V_address0;
    gauss_pyr_5_val_V_ce0 <= grp_SubArray2D_fu_470_src0_5_val_V_ce0;
    gauss_pyr_cols_addr9_fu_515_p9 <= std_logic_vector(unsigned(i_reg_442) + unsigned(ap_const_lv3_1));
    grp_SubArray2D_fu_470_ap_start <= grp_SubArray2D_fu_470_ap_start_reg;
    i_19_fu_508_p2 <= std_logic_vector(unsigned(i_reg_442) + unsigned(ap_const_lv3_1));
end behav;
