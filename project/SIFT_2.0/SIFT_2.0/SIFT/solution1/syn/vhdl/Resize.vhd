-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Resize is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    src_val_V_ce0 : OUT STD_LOGIC;
    src_val_V_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
    src_rows_read : IN STD_LOGIC_VECTOR (31 downto 0);
    src_cols_read : IN STD_LOGIC_VECTOR (31 downto 0);
    dst_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dst_val_V_ce0 : OUT STD_LOGIC;
    dst_val_V_we0 : OUT STD_LOGIC;
    dst_val_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Resize is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3F000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv23_7FFFFF : STD_LOGIC_VECTOR (22 downto 0) := "11111111111111111111111";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_8000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv18_3FFFF : STD_LOGIC_VECTOR (17 downto 0) := "111111111111111111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mask_table1687_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mask_table1687_ce0 : STD_LOGIC;
    signal mask_table1687_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal mask_table1687_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mask_table1687_ce1 : STD_LOGIC;
    signal mask_table1687_q1 : STD_LOGIC_VECTOR (22 downto 0);
    signal one_half_table2683_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal one_half_table2683_ce0 : STD_LOGIC;
    signal one_half_table2683_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal one_half_table2683_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal one_half_table2683_ce1 : STD_LOGIC;
    signal one_half_table2683_q1 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_op_assign_9_reg_209 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_1674_fu_238_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_1674_reg_1000 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_230_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1005 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_234_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1010 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_220_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_reg_1015 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_225_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_80_reg_1021 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_V_61_fu_242_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_V_61_reg_1027 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_i_i_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_reg_1033 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1685_i_i_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1685_i_i_reg_1039 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_64_fu_283_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_V_64_reg_1054 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i4_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i4_reg_1060 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1685_i_i6_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1685_i_i6_reg_1066 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_s_fu_403_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_s_reg_1081 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal x_assign_81_fu_489_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_81_reg_1086 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_318_fu_631_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_318_reg_1091 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal p_Val2_319_fu_774_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_319_reg_1097 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_819_fu_786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_fu_791_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_reg_1107 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_377_cast_fu_801_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_377_cast_reg_1112 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_fu_821_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_reg_1117 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_820_fu_841_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_820_reg_1123 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_fu_846_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_379_fu_856_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_379_reg_1132 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal i_op_assign_reg_198 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_1686_i_i_fu_277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1686_i_i8_fu_318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_384_cast_fu_973_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_379_cast_fu_978_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal loc_V_fu_245_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal index_V_fu_267_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal loc_V_52_fu_286_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal index_V_7_fu_308_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_s_fu_324_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal one_half_i_cast_i_fu_339_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_296_fu_343_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_49_fu_348_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_1688_i_i_fu_352_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_447_fu_364_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal xs_sig_V_fu_358_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_382_fu_331_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_383_fu_374_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp_v_i_fu_382_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp1_i_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_i_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_i_fu_389_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_371_fu_410_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal one_half_i_cast_i5_fu_425_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_308_fu_429_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_53_fu_434_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_1688_i_i5_fu_438_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_451_fu_450_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal xs_sig_V_5_fu_444_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_385_fu_417_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_386_fu_460_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp_v_i5_fu_468_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp1_i5_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_i5_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_i5_fu_475_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_298_fu_496_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_51_fu_517_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_1701_i_i_i_fu_521_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal loc_V_50_fu_507_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i_cast_fu_535_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_539_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1702_i_i_i_fu_553_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_545_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1702_i_i_i_cast_fu_559_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_s_fu_563_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_6_i_i_i_ca_fu_571_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_6_i_i_i_ca_8_fu_575_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_1701_i_i_i_cast6_fu_531_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_1703_i_i_i_fu_579_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_1704_i_i_i_fu_583_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_1667_fu_595_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1705_i_i_i_fu_589_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_369_fu_603_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_370_fu_607_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_300_fu_617_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_384_fu_499_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_i_i_i_fu_625_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_310_fu_639_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_55_fu_660_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_1701_i_i_i7_fu_664_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal loc_V_54_fu_650_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i8_cast_fu_678_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_9_fu_682_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1702_i_i_i4_fu_696_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_7_fu_688_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1702_i_i_i11_cas_fu_702_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_fu_706_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_6_i_i_i12_s_fu_714_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_6_i_i_i12_1_fu_718_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_1701_i_i_i7_cast_fu_674_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_1703_i_i_i4_fu_722_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_1704_i_i_i4_fu_726_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_1673_fu_738_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1705_i_i_i4_fu_732_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_373_fu_746_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_374_fu_750_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_312_fu_760_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_387_fu_642_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_i_i_i6_fu_768_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_cast_fu_782_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1675_fu_797_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1676_fu_809_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Val2_s_fu_813_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_11_cast_fu_837_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1677_fu_852_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_1678_fu_861_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_452_fu_873_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_316_fu_865_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_39_fu_886_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_453_fu_892_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal r0_fu_882_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt_fu_906_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c0_fu_902_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_821_fu_917_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1679_fu_922_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_1680_fu_926_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal rev6_fu_911_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1682_fu_939_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1683_fu_942_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1684_fu_951_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_383_cast_fu_959_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_1681_fu_931_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_384_fu_967_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component SIFT2_Core_fmul_3dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component SIFT2_Core_sitofpeOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Resize_mask_tablebkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component Resize_one_half_tcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;



begin
    mask_table1687_U : component Resize_mask_tablebkb
    generic map (
        DataWidth => 23,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mask_table1687_address0,
        ce0 => mask_table1687_ce0,
        q0 => mask_table1687_q0,
        address1 => mask_table1687_address1,
        ce1 => mask_table1687_ce1,
        q1 => mask_table1687_q1);

    one_half_table2683_U : component Resize_one_half_tcud
    generic map (
        DataWidth => 24,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => one_half_table2683_address0,
        ce0 => one_half_table2683_ce0,
        q0 => one_half_table2683_q0,
        address1 => one_half_table2683_address1,
        ce1 => one_half_table2683_ce1,
        q1 => one_half_table2683_q1);

    SIFT2_Core_fmul_3dEe_U50 : component SIFT2_Core_fmul_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_reg_1005,
        din1 => ap_const_lv32_3F000000,
        ce => ap_const_logic_1,
        dout => grp_fu_220_p2);

    SIFT2_Core_fmul_3dEe_U51 : component SIFT2_Core_fmul_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_s_reg_1010,
        din1 => ap_const_lv32_3F000000,
        ce => ap_const_logic_1,
        dout => grp_fu_225_p2);

    SIFT2_Core_sitofpeOg_U52 : component SIFT2_Core_sitofpeOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => src_rows_read,
        ce => ap_const_logic_1,
        dout => grp_fu_230_p1);

    SIFT2_Core_sitofpeOg_U53 : component SIFT2_Core_sitofpeOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => src_cols_read,
        ce => ap_const_logic_1,
        dout => grp_fu_234_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_819_fu_786_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_819_fu_786_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_op_assign_9_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_819_fu_786_p2 = ap_const_lv1_1))) then 
                i_op_assign_9_reg_209 <= ap_const_lv31_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_820_fu_841_p2 = ap_const_lv1_1))) then 
                i_op_assign_9_reg_209 <= j_fu_846_p2;
            end if; 
        end if;
    end process;

    i_op_assign_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_op_assign_reg_198 <= i_reg_1107;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_op_assign_reg_198 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_reg_1107 <= i_fu_791_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                p_Val2_318_reg_1091 <= p_Val2_318_fu_631_p3;
                p_Val2_319_reg_1097 <= p_Val2_319_fu_774_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_819_fu_786_p2 = ap_const_lv1_1))) then
                    r_V_reg_1117(31 downto 17) <= r_V_fu_821_p2(31 downto 17);
                    tmp_377_cast_reg_1112(17 downto 8) <= tmp_377_cast_fu_801_p3(17 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                t_V_61_reg_1027 <= t_V_61_fu_242_p1;
                t_V_64_reg_1054 <= t_V_64_fu_283_p1;
                tmp_1685_i_i6_reg_1066 <= tmp_1685_i_i6_fu_302_p2;
                tmp_1685_i_i_reg_1039 <= tmp_1685_i_i_fu_261_p2;
                tmp_i_i4_reg_1060 <= tmp_i_i4_fu_296_p2;
                tmp_i_i_reg_1033 <= tmp_i_i_fu_255_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                tmp_1674_reg_1000 <= tmp_1674_fu_238_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_820_fu_841_p2 = ap_const_lv1_1))) then
                tmp_379_reg_1132 <= tmp_379_fu_856_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_820_reg_1123 <= tmp_820_fu_841_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_reg_1005 <= grp_fu_230_p1;
                tmp_s_reg_1010 <= grp_fu_234_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                x_assign_80_reg_1021 <= grp_fu_225_p2;
                x_assign_reg_1015 <= grp_fu_220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                x_assign_81_reg_1086 <= x_assign_81_fu_489_p3;
                x_assign_s_reg_1081 <= x_assign_s_fu_403_p3;
            end if;
        end if;
    end process;
    tmp_377_cast_reg_1112(7 downto 0) <= "00000000";
    r_V_reg_1117(16 downto 0) <= "01000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_819_fu_786_p2, ap_CS_fsm_state8, tmp_820_fu_841_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_819_fu_786_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (tmp_820_fu_841_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (tmp_820_fu_841_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(tmp_820_fu_841_p2)
    begin
        if ((tmp_820_fu_841_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_819_fu_786_p2, ap_CS_fsm_state8)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_819_fu_786_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_819_fu_786_p2, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_819_fu_786_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= p_Val2_318_reg_1091;
    ap_return_1 <= p_Val2_319_reg_1097;
    c0_fu_902_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_453_fu_892_p4),32));
    dst_val_V_address0 <= tmp_379_cast_fu_978_p1(16 - 1 downto 0);

    dst_val_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst_val_V_ce0 <= ap_const_logic_1;
        else 
            dst_val_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        dst_val_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(signed(src_val_V_q0),32));


    dst_val_V_we0_assign_proc : process(tmp_820_reg_1123, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_820_reg_1123 = ap_const_lv1_1))) then 
            dst_val_V_we0 <= ap_const_logic_1;
        else 
            dst_val_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_791_p2 <= std_logic_vector(unsigned(i_op_assign_reg_198) + unsigned(ap_const_lv31_1));
    i_op_assign_11_cast_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_9_reg_209),32));
    i_op_assign_cast_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_reg_198),32));
    index_V_7_fu_308_p4 <= t_V_64_fu_283_p1(27 downto 23);
    index_V_fu_267_p4 <= t_V_61_fu_242_p1(27 downto 23);
    isNeg_7_fu_688_p3 <= sh_assign_9_fu_682_p2(8 downto 8);
    isNeg_fu_545_p3 <= sh_assign_fu_539_p2(8 downto 8);
    j_fu_846_p2 <= std_logic_vector(unsigned(i_op_assign_9_reg_209) + unsigned(ap_const_lv31_1));
    loc_V_49_fu_348_p1 <= p_Val2_296_fu_343_p2(23 - 1 downto 0);
    loc_V_50_fu_507_p4 <= p_Val2_298_fu_496_p1(30 downto 23);
    loc_V_51_fu_517_p1 <= p_Val2_298_fu_496_p1(23 - 1 downto 0);
    loc_V_52_fu_286_p4 <= t_V_64_fu_283_p1(30 downto 23);
    loc_V_53_fu_434_p1 <= p_Val2_308_fu_429_p2(23 - 1 downto 0);
    loc_V_54_fu_650_p4 <= p_Val2_310_fu_639_p1(30 downto 23);
    loc_V_55_fu_660_p1 <= p_Val2_310_fu_639_p1(23 - 1 downto 0);
    loc_V_fu_245_p4 <= t_V_61_fu_242_p1(30 downto 23);
    mask_table1687_address0 <= tmp_1686_i_i_fu_277_p1(5 - 1 downto 0);
    mask_table1687_address1 <= tmp_1686_i_i8_fu_318_p1(5 - 1 downto 0);

    mask_table1687_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mask_table1687_ce0 <= ap_const_logic_1;
        else 
            mask_table1687_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mask_table1687_ce1_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mask_table1687_ce1 <= ap_const_logic_1;
        else 
            mask_table1687_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    one_half_i_cast_i5_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(one_half_table2683_q1),32));
    one_half_i_cast_i_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(one_half_table2683_q0),32));
    one_half_table2683_address0 <= tmp_1686_i_i_fu_277_p1(5 - 1 downto 0);
    one_half_table2683_address1 <= tmp_1686_i_i8_fu_318_p1(5 - 1 downto 0);

    one_half_table2683_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            one_half_table2683_ce0 <= ap_const_logic_1;
        else 
            one_half_table2683_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    one_half_table2683_ce1_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            one_half_table2683_ce1 <= ap_const_logic_1;
        else 
            one_half_table2683_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_371_fu_410_p3 <= t_V_64_reg_1054(31 downto 31);
    p_Result_382_fu_331_p3 <= (p_Result_s_fu_324_p3 & ap_const_lv31_0);
    p_Result_383_fu_374_p3 <= (tmp_447_fu_364_p4 & xs_sig_V_fu_358_p2);
    p_Result_384_fu_499_p3 <= p_Val2_298_fu_496_p1(31 downto 31);
    p_Result_385_fu_417_p3 <= (p_Result_371_fu_410_p3 & ap_const_lv31_0);
    p_Result_386_fu_460_p3 <= (tmp_451_fu_450_p4 & xs_sig_V_5_fu_444_p2);
    p_Result_387_fu_642_p3 <= p_Val2_310_fu_639_p1(31 downto 31);
    p_Result_s_fu_324_p3 <= t_V_61_reg_1027(31 downto 31);
    p_Val2_296_fu_343_p2 <= std_logic_vector(unsigned(t_V_61_reg_1027) + unsigned(one_half_i_cast_i_fu_339_p1));
    p_Val2_298_fu_496_p1 <= x_assign_s_reg_1081;
    p_Val2_300_fu_617_p3 <= 
        tmp_369_fu_603_p1 when (isNeg_fu_545_p3(0) = '1') else 
        tmp_370_fu_607_p4;
    p_Val2_308_fu_429_p2 <= std_logic_vector(unsigned(t_V_64_reg_1054) + unsigned(one_half_i_cast_i5_fu_425_p1));
    p_Val2_310_fu_639_p1 <= x_assign_81_reg_1086;
    p_Val2_312_fu_760_p3 <= 
        tmp_373_fu_746_p1 when (isNeg_7_fu_688_p3(0) = '1') else 
        tmp_374_fu_750_p4;
    p_Val2_316_fu_865_p3 <= (tmp_1678_fu_861_p1 & ap_const_lv17_0);
    p_Val2_318_fu_631_p3 <= 
        p_Val2_i_i_i_fu_625_p2 when (p_Result_384_fu_499_p3(0) = '1') else 
        p_Val2_300_fu_617_p3;
    p_Val2_319_fu_774_p3 <= 
        p_Val2_i_i_i6_fu_768_p2 when (p_Result_387_fu_642_p3(0) = '1') else 
        p_Val2_312_fu_760_p3;
    p_Val2_i_i_i6_fu_768_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_312_fu_760_p3));
    p_Val2_i_i_i_fu_625_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_300_fu_617_p3));
    p_Val2_s_fu_813_p3 <= (tmp_1676_fu_809_p1 & ap_const_lv17_0);
    r0_fu_882_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_452_fu_873_p4),32));
    r_V_39_fu_886_p2 <= (p_Val2_316_fu_865_p3 or ap_const_lv32_8000);
    r_V_fu_821_p2 <= (p_Val2_s_fu_813_p3 or ap_const_lv32_8000);
    rev6_fu_911_p2 <= (slt_fu_906_p2 xor ap_const_lv1_1);
    sel_tmp1_i5_fu_479_p2 <= (tmp_i_i4_reg_1060 xor ap_const_lv1_1);
    sel_tmp1_i_fu_393_p2 <= (tmp_i_i_reg_1033 xor ap_const_lv1_1);
    sel_tmp2_i5_fu_484_p2 <= (tmp_1685_i_i6_reg_1066 and sel_tmp1_i5_fu_479_p2);
    sel_tmp2_i_fu_398_p2 <= (tmp_1685_i_i_reg_1039 and sel_tmp1_i_fu_393_p2);
    sel_tmp_i5_fu_475_p1 <= sel_tmp_v_i5_fu_468_p3;
    sel_tmp_i_fu_389_p1 <= sel_tmp_v_i_fu_382_p3;
    sel_tmp_v_i5_fu_468_p3 <= 
        p_Result_385_fu_417_p3 when (tmp_i_i4_reg_1060(0) = '1') else 
        p_Result_386_fu_460_p3;
    sel_tmp_v_i_fu_382_p3 <= 
        p_Result_382_fu_331_p3 when (tmp_i_i_reg_1033(0) = '1') else 
        p_Result_383_fu_374_p3;
    sh_assign_1_fu_706_p3 <= 
        tmp_1702_i_i_i11_cas_fu_702_p1 when (isNeg_7_fu_688_p3(0) = '1') else 
        sh_assign_9_fu_682_p2;
        sh_assign_6_i_i_i12_1_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_fu_706_p3),25));

        sh_assign_6_i_i_i12_s_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_fu_706_p3),32));

        sh_assign_6_i_i_i_ca_8_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_s_fu_563_p3),25));

        sh_assign_6_i_i_i_ca_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_s_fu_563_p3),32));

    sh_assign_9_fu_682_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i8_cast_fu_678_p1));
    sh_assign_fu_539_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i_cast_fu_535_p1));
    sh_assign_s_fu_563_p3 <= 
        tmp_1702_i_i_i_cast_fu_559_p1 when (isNeg_fu_545_p3(0) = '1') else 
        sh_assign_fu_539_p2;
    slt_fu_906_p2 <= "1" when (signed(r0_fu_882_p1) < signed(src_rows_read)) else "0";
    src_val_V_address0 <= tmp_384_cast_fu_973_p1(16 - 1 downto 0);

    src_val_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src_val_V_ce0 <= ap_const_logic_1;
        else 
            src_val_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    t_V_61_fu_242_p1 <= x_assign_reg_1015;
    t_V_64_fu_283_p1 <= x_assign_80_reg_1021;
    tmp_1667_fu_595_p3 <= tmp_1704_i_i_i_fu_583_p2(24 downto 24);
    tmp_1673_fu_738_p3 <= tmp_1704_i_i_i4_fu_726_p2(24 downto 24);
    tmp_1674_fu_238_p1 <= src_cols_read(18 - 1 downto 0);
    tmp_1675_fu_797_p1 <= i_op_assign_reg_198(10 - 1 downto 0);
    tmp_1676_fu_809_p1 <= i_op_assign_reg_198(15 - 1 downto 0);
    tmp_1677_fu_852_p1 <= i_op_assign_9_reg_209(18 - 1 downto 0);
    tmp_1678_fu_861_p1 <= i_op_assign_9_reg_209(15 - 1 downto 0);
    tmp_1679_fu_922_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_453_fu_892_p4),18));
    tmp_1680_fu_926_p2 <= std_logic_vector(signed(ap_const_lv18_3FFFF) + signed(tmp_1674_reg_1000));
    tmp_1681_fu_931_p3 <= 
        tmp_1679_fu_922_p1 when (tmp_821_fu_917_p2(0) = '1') else 
        tmp_1680_fu_926_p2;
    tmp_1682_fu_939_p1 <= src_rows_read(10 - 1 downto 0);
    tmp_1683_fu_942_p4 <= r_V_reg_1117(25 downto 16);
    tmp_1684_fu_951_p3 <= 
        tmp_1682_fu_939_p1 when (rev6_fu_911_p2(0) = '1') else 
        tmp_1683_fu_942_p4;
    tmp_1685_i_i6_fu_302_p2 <= "1" when (unsigned(loc_V_52_fu_286_p4) > unsigned(ap_const_lv8_96)) else "0";
    tmp_1685_i_i_fu_261_p2 <= "1" when (unsigned(loc_V_fu_245_p4) > unsigned(ap_const_lv8_96)) else "0";
    tmp_1686_i_i8_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_V_7_fu_308_p4),64));
    tmp_1686_i_i_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_V_fu_267_p4),64));
    tmp_1688_i_i5_fu_438_p2 <= (mask_table1687_q1 xor ap_const_lv23_7FFFFF);
    tmp_1688_i_i_fu_352_p2 <= (mask_table1687_q0 xor ap_const_lv23_7FFFFF);
    tmp_1701_i_i_i7_cast_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1701_i_i_i7_fu_664_p4),79));
    tmp_1701_i_i_i7_fu_664_p4 <= ((ap_const_lv1_1 & loc_V_55_fu_660_p1) & ap_const_lv1_0);
    tmp_1701_i_i_i_cast6_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1701_i_i_i_fu_521_p4),79));
    tmp_1701_i_i_i_fu_521_p4 <= ((ap_const_lv1_1 & loc_V_51_fu_517_p1) & ap_const_lv1_0);
        tmp_1702_i_i_i11_cas_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1702_i_i_i4_fu_696_p2),9));

    tmp_1702_i_i_i4_fu_696_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_54_fu_650_p4));
        tmp_1702_i_i_i_cast_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1702_i_i_i_fu_553_p2),9));

    tmp_1702_i_i_i_fu_553_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_50_fu_507_p4));
    tmp_1703_i_i_i4_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_6_i_i_i12_s_fu_714_p1),79));
    tmp_1703_i_i_i_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_6_i_i_i_ca_fu_571_p1),79));
    tmp_1704_i_i_i4_fu_726_p2 <= std_logic_vector(shift_right(unsigned(tmp_1701_i_i_i7_fu_664_p4),to_integer(unsigned('0' & sh_assign_6_i_i_i12_1_fu_718_p1(25-1 downto 0)))));
    tmp_1704_i_i_i_fu_583_p2 <= std_logic_vector(shift_right(unsigned(tmp_1701_i_i_i_fu_521_p4),to_integer(unsigned('0' & sh_assign_6_i_i_i_ca_8_fu_575_p1(25-1 downto 0)))));
    tmp_1705_i_i_i4_fu_732_p2 <= std_logic_vector(shift_left(unsigned(tmp_1701_i_i_i7_cast_fu_674_p1),to_integer(unsigned('0' & tmp_1703_i_i_i4_fu_722_p1(31-1 downto 0)))));
    tmp_1705_i_i_i_fu_589_p2 <= std_logic_vector(shift_left(unsigned(tmp_1701_i_i_i_cast6_fu_531_p1),to_integer(unsigned('0' & tmp_1703_i_i_i_fu_579_p1(31-1 downto 0)))));
    tmp_369_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1667_fu_595_p3),32));
    tmp_370_fu_607_p4 <= tmp_1705_i_i_i_fu_589_p2(55 downto 24);
    tmp_373_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1673_fu_738_p3),32));
    tmp_374_fu_750_p4 <= tmp_1705_i_i_i4_fu_732_p2(55 downto 24);
    tmp_377_cast_fu_801_p3 <= (tmp_1675_fu_797_p1 & ap_const_lv8_0);
    tmp_379_cast_fu_978_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_379_reg_1132),64));
    tmp_379_fu_856_p2 <= std_logic_vector(unsigned(tmp_377_cast_reg_1112) + unsigned(tmp_1677_fu_852_p1));
    tmp_383_cast_fu_959_p3 <= (tmp_1684_fu_951_p3 & ap_const_lv8_0);
        tmp_384_cast_fu_973_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_384_fu_967_p2),64));

    tmp_384_fu_967_p2 <= std_logic_vector(unsigned(tmp_383_cast_fu_959_p3) + unsigned(tmp_1681_fu_931_p3));
    tmp_447_fu_364_p4 <= p_Val2_296_fu_343_p2(31 downto 23);
    tmp_451_fu_450_p4 <= p_Val2_308_fu_429_p2(31 downto 23);
    tmp_452_fu_873_p4 <= r_V_reg_1117(31 downto 16);
    tmp_453_fu_892_p4 <= r_V_39_fu_886_p2(31 downto 16);
    tmp_819_fu_786_p2 <= "1" when (signed(i_op_assign_cast_fu_782_p1) < signed(p_Val2_318_reg_1091)) else "0";
    tmp_820_fu_841_p2 <= "1" when (signed(i_op_assign_11_cast_fu_837_p1) < signed(p_Val2_319_reg_1097)) else "0";
    tmp_821_fu_917_p2 <= "1" when (signed(c0_fu_902_p1) < signed(src_cols_read)) else "0";
    tmp_i_i4_fu_296_p2 <= "1" when (unsigned(loc_V_52_fu_286_p4) < unsigned(ap_const_lv8_7E)) else "0";
    tmp_i_i_fu_255_p2 <= "1" when (unsigned(loc_V_fu_245_p4) < unsigned(ap_const_lv8_7E)) else "0";
    tmp_i_i_i_i8_cast_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_54_fu_650_p4),9));
    tmp_i_i_i_i_cast_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_50_fu_507_p4),9));
    x_assign_81_fu_489_p3 <= 
        x_assign_80_reg_1021 when (sel_tmp2_i5_fu_484_p2(0) = '1') else 
        sel_tmp_i5_fu_475_p1;
    x_assign_s_fu_403_p3 <= 
        x_assign_reg_1015 when (sel_tmp2_i_fu_398_p2(0) = '1') else 
        sel_tmp_i_fu_389_p1;
    xs_sig_V_5_fu_444_p2 <= (tmp_1688_i_i5_fu_438_p2 and loc_V_53_fu_434_p1);
    xs_sig_V_fu_358_p2 <= (tmp_1688_i_i_fu_352_p2 and loc_V_49_fu_348_p1);
end behav;
