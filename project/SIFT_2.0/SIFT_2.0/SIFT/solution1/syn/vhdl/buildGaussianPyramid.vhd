-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity buildGaussianPyramid is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    src_val_V_ce0 : OUT STD_LOGIC;
    src_val_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    src_rows_read : IN STD_LOGIC_VECTOR (31 downto 0);
    src_cols_read : IN STD_LOGIC_VECTOR (31 downto 0);
    gauss_pyr_0_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    gauss_pyr_0_val_V_ce0 : OUT STD_LOGIC;
    gauss_pyr_0_val_V_we0 : OUT STD_LOGIC;
    gauss_pyr_0_val_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    gauss_pyr_0_val_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    gauss_pyr_1_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    gauss_pyr_1_val_V_ce0 : OUT STD_LOGIC;
    gauss_pyr_1_val_V_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
    gauss_pyr_1_val_V_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    gauss_pyr_1_val_V_ce1 : OUT STD_LOGIC;
    gauss_pyr_1_val_V_we1 : OUT STD_LOGIC;
    gauss_pyr_1_val_V_d1 : OUT STD_LOGIC_VECTOR (25 downto 0);
    gauss_pyr_2_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    gauss_pyr_2_val_V_ce0 : OUT STD_LOGIC;
    gauss_pyr_2_val_V_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
    gauss_pyr_2_val_V_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    gauss_pyr_2_val_V_ce1 : OUT STD_LOGIC;
    gauss_pyr_2_val_V_we1 : OUT STD_LOGIC;
    gauss_pyr_2_val_V_d1 : OUT STD_LOGIC_VECTOR (25 downto 0);
    gauss_pyr_3_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    gauss_pyr_3_val_V_ce0 : OUT STD_LOGIC;
    gauss_pyr_3_val_V_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
    gauss_pyr_3_val_V_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    gauss_pyr_3_val_V_ce1 : OUT STD_LOGIC;
    gauss_pyr_3_val_V_we1 : OUT STD_LOGIC;
    gauss_pyr_3_val_V_d1 : OUT STD_LOGIC_VECTOR (25 downto 0);
    gauss_pyr_4_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    gauss_pyr_4_val_V_ce0 : OUT STD_LOGIC;
    gauss_pyr_4_val_V_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
    gauss_pyr_4_val_V_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    gauss_pyr_4_val_V_ce1 : OUT STD_LOGIC;
    gauss_pyr_4_val_V_we1 : OUT STD_LOGIC;
    gauss_pyr_4_val_V_d1 : OUT STD_LOGIC_VECTOR (25 downto 0);
    gauss_pyr_5_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    gauss_pyr_5_val_V_ce0 : OUT STD_LOGIC;
    gauss_pyr_5_val_V_we0 : OUT STD_LOGIC;
    gauss_pyr_5_val_V_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
    gauss_pyr_0_rows_read : IN STD_LOGIC_VECTOR (31 downto 0);
    gauss_pyr_1_rows_read : IN STD_LOGIC_VECTOR (31 downto 0);
    gauss_pyr_2_rows_read : IN STD_LOGIC_VECTOR (31 downto 0);
    gauss_pyr_3_rows_read : IN STD_LOGIC_VECTOR (31 downto 0);
    gauss_pyr_4_rows_read : IN STD_LOGIC_VECTOR (31 downto 0);
    gauss_pyr_5_rows_read : IN STD_LOGIC_VECTOR (31 downto 0);
    gauss_pyr_0_cols_read : IN STD_LOGIC_VECTOR (31 downto 0);
    gauss_pyr_1_cols_read : IN STD_LOGIC_VECTOR (31 downto 0);
    gauss_pyr_2_cols_read : IN STD_LOGIC_VECTOR (31 downto 0);
    gauss_pyr_3_cols_read : IN STD_LOGIC_VECTOR (31 downto 0);
    gauss_pyr_4_cols_read : IN STD_LOGIC_VECTOR (31 downto 0);
    gauss_pyr_5_cols_read : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of buildGaussianPyramid is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (38 downto 0) := "000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (38 downto 0) := "000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (38 downto 0) := "000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (38 downto 0) := "000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (38 downto 0) := "000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (38 downto 0) := "000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (38 downto 0) := "000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (38 downto 0) := "000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (38 downto 0) := "000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (38 downto 0) := "001000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (38 downto 0) := "010000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (38 downto 0) := "100000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_3FA14500 : STD_LOGIC_VECTOR (31 downto 0) := "00111111101000010100010100000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv25_19999 : STD_LOGIC_VECTOR (24 downto 0) := "0000000011001100110011001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_10 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_const_lv12_FF0 : STD_LOGIC_VECTOR (11 downto 0) := "111111110000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv48_19999 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000011001100110011001";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv48_1428A : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000010100001010001010";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_9E : STD_LOGIC_VECTOR (7 downto 0) := "10011110";
    constant ap_const_lv8_8E : STD_LOGIC_VECTOR (7 downto 0) := "10001110";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal j_i_reg_435 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_s_fu_571_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_reg_1563 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond3_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_pow_generic_float_s_fu_474_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal v_assign_7_reg_1669 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal isneg_fu_639_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_reg_1674 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal man_V_30_fu_683_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_30_reg_1679 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_589_fu_691_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_589_reg_1684 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_590_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_590_reg_1690 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_fu_721_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_1696 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_593_fu_729_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_593_reg_1702 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1310_fu_735_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1310_reg_1708 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_fu_749_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_1714 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_598_reg_1719 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal OP1_V_34_cast_fu_916_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal OP1_V_34_cast_reg_1724 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_599_reg_1730 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_assign_s_reg_1735 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_sqrt_fixed_32_16_s_fu_469_ap_return : STD_LOGIC_VECTOR (23 downto 0);
    signal agg_result_V_i_reg_1740 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal i_16_fu_973_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal i_17_fu_985_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_17_reg_1753 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal tmp_601_fu_991_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_601_reg_1758 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_979_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_604_fu_1098_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_604_reg_1767 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal is_neg_fu_1104_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_neg_reg_1772 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp32_V_76_fu_1148_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_76_reg_1777 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1314_fu_1154_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1314_reg_1782 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp32_V_fu_1158_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_reg_1787 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal p_Result_s_218_reg_1792 : STD_LOGIC_VECTOR (7 downto 0);
    signal gauss_pyr_rows6_load_1_reg_1797 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal gauss_pyr_rows7_load_1_reg_1808 : STD_LOGIC_VECTOR (31 downto 0);
    signal gauss_pyr_rows9_load_1_reg_1819 : STD_LOGIC_VECTOR (31 downto 0);
    signal gauss_pyr_rows8_load_1_reg_1830 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_602_fu_1172_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_602_reg_1841 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_03_i_fu_1221_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_03_i_reg_1846 : STD_LOGIC_VECTOR (31 downto 0);
    signal gauss_pyr_rows_addr6_fu_1230_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal gauss_pyr_rows_addr6_reg_1852 : STD_LOGIC_VECTOR (31 downto 0);
    signal gauss_pyr_cols_addr1_fu_1253_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal gauss_pyr_cols_addr1_reg_1857 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_fu_1428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal i_18_fu_1433_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_18_reg_1866 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_277_cast_fu_1443_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_277_cast_reg_1871 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_1677_i_fu_1463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1677_i_reg_1876 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state38_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_fu_1468_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_278_cast_fu_1483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_278_cast_reg_1885 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state38 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal sig_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sig_V_ce0 : STD_LOGIC;
    signal sig_V_we0 : STD_LOGIC;
    signal sig_V_d0 : STD_LOGIC_VECTOR (24 downto 0);
    signal sig_V_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_GaussianBlur_fu_446_ap_start : STD_LOGIC;
    signal grp_GaussianBlur_fu_446_ap_done : STD_LOGIC;
    signal grp_GaussianBlur_fu_446_ap_idle : STD_LOGIC;
    signal grp_GaussianBlur_fu_446_ap_ready : STD_LOGIC;
    signal grp_GaussianBlur_fu_446_src_0_val_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_GaussianBlur_fu_446_src_0_val_V_ce0 : STD_LOGIC;
    signal grp_GaussianBlur_fu_446_src_1_val_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_GaussianBlur_fu_446_src_1_val_V_ce0 : STD_LOGIC;
    signal grp_GaussianBlur_fu_446_src_1_val_V_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_GaussianBlur_fu_446_src_1_val_V_ce1 : STD_LOGIC;
    signal grp_GaussianBlur_fu_446_src_1_val_V_we1 : STD_LOGIC;
    signal grp_GaussianBlur_fu_446_src_1_val_V_d1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_GaussianBlur_fu_446_src_2_val_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_GaussianBlur_fu_446_src_2_val_V_ce0 : STD_LOGIC;
    signal grp_GaussianBlur_fu_446_src_2_val_V_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_GaussianBlur_fu_446_src_2_val_V_ce1 : STD_LOGIC;
    signal grp_GaussianBlur_fu_446_src_2_val_V_we1 : STD_LOGIC;
    signal grp_GaussianBlur_fu_446_src_2_val_V_d1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_GaussianBlur_fu_446_src_3_val_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_GaussianBlur_fu_446_src_3_val_V_ce0 : STD_LOGIC;
    signal grp_GaussianBlur_fu_446_src_3_val_V_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_GaussianBlur_fu_446_src_3_val_V_ce1 : STD_LOGIC;
    signal grp_GaussianBlur_fu_446_src_3_val_V_we1 : STD_LOGIC;
    signal grp_GaussianBlur_fu_446_src_3_val_V_d1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_GaussianBlur_fu_446_src_4_val_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_GaussianBlur_fu_446_src_4_val_V_ce0 : STD_LOGIC;
    signal grp_GaussianBlur_fu_446_src_4_val_V_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_GaussianBlur_fu_446_src_4_val_V_ce1 : STD_LOGIC;
    signal grp_GaussianBlur_fu_446_src_4_val_V_we1 : STD_LOGIC;
    signal grp_GaussianBlur_fu_446_src_4_val_V_d1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_GaussianBlur_fu_446_dst_5_val_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_GaussianBlur_fu_446_dst_5_val_V_ce0 : STD_LOGIC;
    signal grp_GaussianBlur_fu_446_dst_5_val_V_we0 : STD_LOGIC;
    signal grp_GaussianBlur_fu_446_dst_5_val_V_d0 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_GaussianBlur_fu_446_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GaussianBlur_fu_446_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pow_generic_float_s_fu_474_ap_start : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_474_ap_done : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_474_ap_idle : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_474_ap_ready : STD_LOGIC;
    signal i_reg_400 : STD_LOGIC_VECTOR (2 downto 0);
    signal i1_reg_412 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_block_state36_on_subcall_done : BOOLEAN;
    signal i_i_reg_424 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal grp_GaussianBlur_fu_446_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_pow_generic_float_s_fu_474_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_NS_fsm_state4 : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_498_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_600_fu_964_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_603_fu_997_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gauss_pyr_cols_fu_204 : STD_LOGIC_VECTOR (31 downto 0);
    signal gauss_pyr_rows_fu_208 : STD_LOGIC_VECTOR (31 downto 0);
    signal gauss_pyr_cols15_s_fu_212 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag1_fu_216 : STD_LOGIC_VECTOR (0 downto 0);
    signal gauss_pyr_cols4_fu_220 : STD_LOGIC_VECTOR (31 downto 0);
    signal gauss_pyr_cols3_fu_224 : STD_LOGIC_VECTOR (31 downto 0);
    signal gauss_pyr_cols2_fu_228 : STD_LOGIC_VECTOR (31 downto 0);
    signal gauss_pyr_cols1_fu_232 : STD_LOGIC_VECTOR (31 downto 0);
    signal gauss_pyr_rows6_fu_236 : STD_LOGIC_VECTOR (31 downto 0);
    signal gauss_pyr_rows6_1_fu_1280_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal gauss_pyr_rows10_s_fu_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal gauss_pyr_rows10_1_fu_1296_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal gauss_pyr_rows7_fu_244 : STD_LOGIC_VECTOR (31 downto 0);
    signal gauss_pyr_rows7_1_fu_1319_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag_fu_248 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag_1_fu_1335_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal gauss_pyr_rows9_fu_252 : STD_LOGIC_VECTOR (31 downto 0);
    signal gauss_pyr_rows9_1_fu_1358_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal gauss_pyr_rows8_fu_256 : STD_LOGIC_VECTOR (31 downto 0);
    signal gauss_pyr_rows8_1_fu_1374_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_trunc_ext_cast_fu_969_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal grp_fu_498_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_assign_s_fu_502_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_631_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_fu_647_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1309_fu_661_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_588_fu_665_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_s_fu_673_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_29_fu_677_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_fu_635_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_587_fu_657_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_697_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_591_fu_709_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_592_fu_715_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1311_fu_739_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal sh_amt_7_cast_fu_755_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_595_fu_763_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_596_fu_767_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal sel_tmp1_fu_788_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_demorgan_fu_798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_594_fu_758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp21_demorgan_fu_831_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp21_fu_836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp22_fu_842_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_597_fu_783_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1312_fu_772_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp15_fu_825_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_fu_819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal storemerge_fu_776_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp2_fu_793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_855_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel_fu_847_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel25_fu_861_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond3_fu_868_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond4_fu_882_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel26_fu_874_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel27_fu_888_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_191_fu_900_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_191_fu_900_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Val2_192_fu_919_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_192_fu_919_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_834_cast_fu_938_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_935_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_834_cast_fu_938_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_835_cast_fu_944_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_835_cast_fu_944_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_834_cast_fu_938_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_835_cast_fu_944_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Val2_193_fu_948_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal gauss_pyr_5_rows_wr_fu_1008_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal gauss_pyr_5_cols_wr_fu_1015_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_321_cast_fu_1094_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_604_fu_1098_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal is_neg_fu_1104_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_321_cast_fu_1094_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_605_fu_1112_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_Val2_195_fu_1118_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_Val2_cast_fu_1126_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_203_fu_1130_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_zeros_fu_1140_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_495_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_606_fu_1179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_607_fu_1184_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_608_fu_1189_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_81_trunc_fu_1193_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_609_fu_1199_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_204_fu_1206_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_25_fu_1217_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_cast_fu_1424_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1315_fu_1439_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_i_cast_fu_1459_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1316_fu_1474_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_278_fu_1478_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component GaussianBlur IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_0_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        src_0_val_V_ce0 : OUT STD_LOGIC;
        src_0_val_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        src_1_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        src_1_val_V_ce0 : OUT STD_LOGIC;
        src_1_val_V_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
        src_1_val_V_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        src_1_val_V_ce1 : OUT STD_LOGIC;
        src_1_val_V_we1 : OUT STD_LOGIC;
        src_1_val_V_d1 : OUT STD_LOGIC_VECTOR (25 downto 0);
        src_2_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        src_2_val_V_ce0 : OUT STD_LOGIC;
        src_2_val_V_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
        src_2_val_V_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        src_2_val_V_ce1 : OUT STD_LOGIC;
        src_2_val_V_we1 : OUT STD_LOGIC;
        src_2_val_V_d1 : OUT STD_LOGIC_VECTOR (25 downto 0);
        src_3_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        src_3_val_V_ce0 : OUT STD_LOGIC;
        src_3_val_V_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
        src_3_val_V_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        src_3_val_V_ce1 : OUT STD_LOGIC;
        src_3_val_V_we1 : OUT STD_LOGIC;
        src_3_val_V_d1 : OUT STD_LOGIC_VECTOR (25 downto 0);
        src_4_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        src_4_val_V_ce0 : OUT STD_LOGIC;
        src_4_val_V_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
        src_4_val_V_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        src_4_val_V_ce1 : OUT STD_LOGIC;
        src_4_val_V_we1 : OUT STD_LOGIC;
        src_4_val_V_d1 : OUT STD_LOGIC_VECTOR (25 downto 0);
        src_val_V_offset : IN STD_LOGIC_VECTOR (2 downto 0);
        src_rows_read : IN STD_LOGIC_VECTOR (31 downto 0);
        src_cols_read : IN STD_LOGIC_VECTOR (31 downto 0);
        dst_5_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst_5_val_V_ce0 : OUT STD_LOGIC;
        dst_5_val_V_we0 : OUT STD_LOGIC;
        dst_5_val_V_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
        dst_val_V_offset : IN STD_LOGIC_VECTOR (2 downto 0);
        sigmaX : IN STD_LOGIC_VECTOR (31 downto 0);
        sigmaY : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sqrt_fixed_32_16_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        x_V : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component pow_generic_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        base_r : IN STD_LOGIC_VECTOR (31 downto 0);
        exp : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component SIFT2_Core_uitofpXh4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component SIFT2_Core_sitofpeOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component SIFT2_Core_fpext_hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component SIFT2_Core_mux_83Yie IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component SIFT2_Core_mux_83Zio IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component buildGaussianPyraWhU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (24 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;



begin
    sig_V_U : component buildGaussianPyraWhU
    generic map (
        DataWidth => 25,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sig_V_address0,
        ce0 => sig_V_ce0,
        we0 => sig_V_we0,
        d0 => sig_V_d0,
        q0 => sig_V_q0);

    grp_GaussianBlur_fu_446 : component GaussianBlur
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_GaussianBlur_fu_446_ap_start,
        ap_done => grp_GaussianBlur_fu_446_ap_done,
        ap_idle => grp_GaussianBlur_fu_446_ap_idle,
        ap_ready => grp_GaussianBlur_fu_446_ap_ready,
        src_0_val_V_address0 => grp_GaussianBlur_fu_446_src_0_val_V_address0,
        src_0_val_V_ce0 => grp_GaussianBlur_fu_446_src_0_val_V_ce0,
        src_0_val_V_q0 => gauss_pyr_0_val_V_q0,
        src_1_val_V_address0 => grp_GaussianBlur_fu_446_src_1_val_V_address0,
        src_1_val_V_ce0 => grp_GaussianBlur_fu_446_src_1_val_V_ce0,
        src_1_val_V_q0 => gauss_pyr_1_val_V_q0,
        src_1_val_V_address1 => grp_GaussianBlur_fu_446_src_1_val_V_address1,
        src_1_val_V_ce1 => grp_GaussianBlur_fu_446_src_1_val_V_ce1,
        src_1_val_V_we1 => grp_GaussianBlur_fu_446_src_1_val_V_we1,
        src_1_val_V_d1 => grp_GaussianBlur_fu_446_src_1_val_V_d1,
        src_2_val_V_address0 => grp_GaussianBlur_fu_446_src_2_val_V_address0,
        src_2_val_V_ce0 => grp_GaussianBlur_fu_446_src_2_val_V_ce0,
        src_2_val_V_q0 => gauss_pyr_2_val_V_q0,
        src_2_val_V_address1 => grp_GaussianBlur_fu_446_src_2_val_V_address1,
        src_2_val_V_ce1 => grp_GaussianBlur_fu_446_src_2_val_V_ce1,
        src_2_val_V_we1 => grp_GaussianBlur_fu_446_src_2_val_V_we1,
        src_2_val_V_d1 => grp_GaussianBlur_fu_446_src_2_val_V_d1,
        src_3_val_V_address0 => grp_GaussianBlur_fu_446_src_3_val_V_address0,
        src_3_val_V_ce0 => grp_GaussianBlur_fu_446_src_3_val_V_ce0,
        src_3_val_V_q0 => gauss_pyr_3_val_V_q0,
        src_3_val_V_address1 => grp_GaussianBlur_fu_446_src_3_val_V_address1,
        src_3_val_V_ce1 => grp_GaussianBlur_fu_446_src_3_val_V_ce1,
        src_3_val_V_we1 => grp_GaussianBlur_fu_446_src_3_val_V_we1,
        src_3_val_V_d1 => grp_GaussianBlur_fu_446_src_3_val_V_d1,
        src_4_val_V_address0 => grp_GaussianBlur_fu_446_src_4_val_V_address0,
        src_4_val_V_ce0 => grp_GaussianBlur_fu_446_src_4_val_V_ce0,
        src_4_val_V_q0 => gauss_pyr_4_val_V_q0,
        src_4_val_V_address1 => grp_GaussianBlur_fu_446_src_4_val_V_address1,
        src_4_val_V_ce1 => grp_GaussianBlur_fu_446_src_4_val_V_ce1,
        src_4_val_V_we1 => grp_GaussianBlur_fu_446_src_4_val_V_we1,
        src_4_val_V_d1 => grp_GaussianBlur_fu_446_src_4_val_V_d1,
        src_val_V_offset => tmp_602_reg_1841,
        src_rows_read => gauss_pyr_rows_addr6_reg_1852,
        src_cols_read => gauss_pyr_cols_addr1_reg_1857,
        dst_5_val_V_address0 => grp_GaussianBlur_fu_446_dst_5_val_V_address0,
        dst_5_val_V_ce0 => grp_GaussianBlur_fu_446_dst_5_val_V_ce0,
        dst_5_val_V_we0 => grp_GaussianBlur_fu_446_dst_5_val_V_we0,
        dst_5_val_V_d0 => grp_GaussianBlur_fu_446_dst_5_val_V_d0,
        dst_val_V_offset => i1_reg_412,
        sigmaX => p_03_i_reg_1846,
        sigmaY => p_03_i_reg_1846,
        ap_return_0 => grp_GaussianBlur_fu_446_ap_return_0,
        ap_return_1 => grp_GaussianBlur_fu_446_ap_return_1);

    grp_sqrt_fixed_32_16_s_fu_469 : component sqrt_fixed_32_16_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        x_V => this_assign_s_reg_1735,
        ap_return => grp_sqrt_fixed_32_16_s_fu_469_ap_return);

    grp_pow_generic_float_s_fu_474 : component pow_generic_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pow_generic_float_s_fu_474_ap_start,
        ap_done => grp_pow_generic_float_s_fu_474_ap_done,
        ap_idle => grp_pow_generic_float_s_fu_474_ap_idle,
        ap_ready => grp_pow_generic_float_s_fu_474_ap_ready,
        ap_ce => ap_const_logic_1,
        base_r => ap_const_lv32_3FA14500,
        exp => grp_fu_498_p1,
        ap_return => grp_pow_generic_float_s_fu_474_ap_return);

    SIFT2_Core_uitofpXh4_U719 : component SIFT2_Core_uitofpXh4
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp32_V_76_reg_1777,
        ce => ap_const_logic_1,
        dout => grp_fu_495_p1);

    SIFT2_Core_sitofpeOg_U720 : component SIFT2_Core_sitofpeOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_498_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_498_p1);

    SIFT2_Core_fpext_hbi_U721 : component SIFT2_Core_fpext_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => v_assign_7_reg_1669,
        dout => d_assign_s_fu_502_p1);

    SIFT2_Core_mux_83Yie_U722 : component SIFT2_Core_mux_83Yie
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => gauss_pyr_rows_fu_208,
        din1 => gauss_pyr_rows6_fu_236,
        din2 => gauss_pyr_rows7_fu_244,
        din3 => gauss_pyr_rows8_fu_256,
        din4 => gauss_pyr_rows9_fu_252,
        din5 => gauss_pyr_rows9_fu_252,
        din6 => gauss_pyr_rows9_fu_252,
        din7 => gauss_pyr_rows9_fu_252,
        din8 => tmp_602_fu_1172_p2,
        dout => gauss_pyr_rows_addr6_fu_1230_p10);

    SIFT2_Core_mux_83Yie_U723 : component SIFT2_Core_mux_83Yie
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => gauss_pyr_cols_fu_204,
        din1 => gauss_pyr_cols1_fu_232,
        din2 => gauss_pyr_cols2_fu_228,
        din3 => gauss_pyr_cols3_fu_224,
        din4 => gauss_pyr_cols4_fu_220,
        din5 => gauss_pyr_cols4_fu_220,
        din6 => gauss_pyr_cols4_fu_220,
        din7 => gauss_pyr_cols4_fu_220,
        din8 => tmp_602_fu_1172_p2,
        dout => gauss_pyr_cols_addr1_fu_1253_p10);

    SIFT2_Core_mux_83Yie_U724 : component SIFT2_Core_mux_83Yie
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => gauss_pyr_rows6_load_1_reg_1797,
        din1 => grp_GaussianBlur_fu_446_ap_return_0,
        din2 => gauss_pyr_rows6_load_1_reg_1797,
        din3 => gauss_pyr_rows6_load_1_reg_1797,
        din4 => gauss_pyr_rows6_load_1_reg_1797,
        din5 => gauss_pyr_rows6_load_1_reg_1797,
        din6 => gauss_pyr_rows6_load_1_reg_1797,
        din7 => gauss_pyr_rows6_load_1_reg_1797,
        din8 => i1_reg_412,
        dout => gauss_pyr_rows6_1_fu_1280_p10);

    SIFT2_Core_mux_83Yie_U725 : component SIFT2_Core_mux_83Yie
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => grp_GaussianBlur_fu_446_ap_return_0,
        din1 => gauss_pyr_rows10_s_fu_240,
        din2 => gauss_pyr_rows10_s_fu_240,
        din3 => gauss_pyr_rows10_s_fu_240,
        din4 => gauss_pyr_rows10_s_fu_240,
        din5 => grp_GaussianBlur_fu_446_ap_return_0,
        din6 => grp_GaussianBlur_fu_446_ap_return_0,
        din7 => grp_GaussianBlur_fu_446_ap_return_0,
        din8 => i1_reg_412,
        dout => gauss_pyr_rows10_1_fu_1296_p10);

    SIFT2_Core_mux_83Yie_U726 : component SIFT2_Core_mux_83Yie
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => gauss_pyr_rows7_load_1_reg_1808,
        din1 => gauss_pyr_rows7_load_1_reg_1808,
        din2 => grp_GaussianBlur_fu_446_ap_return_0,
        din3 => gauss_pyr_rows7_load_1_reg_1808,
        din4 => gauss_pyr_rows7_load_1_reg_1808,
        din5 => gauss_pyr_rows7_load_1_reg_1808,
        din6 => gauss_pyr_rows7_load_1_reg_1808,
        din7 => gauss_pyr_rows7_load_1_reg_1808,
        din8 => i1_reg_412,
        dout => gauss_pyr_rows7_1_fu_1319_p10);

    SIFT2_Core_mux_83Zio_U727 : component SIFT2_Core_mux_83Zio
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_1,
        din1 => write_flag_fu_248,
        din2 => write_flag_fu_248,
        din3 => write_flag_fu_248,
        din4 => write_flag_fu_248,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_1,
        din8 => i1_reg_412,
        dout => write_flag_1_fu_1335_p10);

    SIFT2_Core_mux_83Yie_U728 : component SIFT2_Core_mux_83Yie
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => gauss_pyr_rows9_load_1_reg_1819,
        din1 => gauss_pyr_rows9_load_1_reg_1819,
        din2 => gauss_pyr_rows9_load_1_reg_1819,
        din3 => gauss_pyr_rows9_load_1_reg_1819,
        din4 => grp_GaussianBlur_fu_446_ap_return_0,
        din5 => gauss_pyr_rows9_load_1_reg_1819,
        din6 => gauss_pyr_rows9_load_1_reg_1819,
        din7 => gauss_pyr_rows9_load_1_reg_1819,
        din8 => i1_reg_412,
        dout => gauss_pyr_rows9_1_fu_1358_p10);

    SIFT2_Core_mux_83Yie_U729 : component SIFT2_Core_mux_83Yie
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => gauss_pyr_rows8_load_1_reg_1830,
        din1 => gauss_pyr_rows8_load_1_reg_1830,
        din2 => gauss_pyr_rows8_load_1_reg_1830,
        din3 => grp_GaussianBlur_fu_446_ap_return_0,
        din4 => gauss_pyr_rows8_load_1_reg_1830,
        din5 => gauss_pyr_rows8_load_1_reg_1830,
        din6 => gauss_pyr_rows8_load_1_reg_1830,
        din7 => gauss_pyr_rows8_load_1_reg_1830,
        din8 => i1_reg_412,
        dout => gauss_pyr_rows8_1_fu_1374_p10);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state38) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((tmp_i_fu_1428_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state38))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state38);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((tmp_i_fu_1428_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_GaussianBlur_fu_446_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_GaussianBlur_fu_446_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                    grp_GaussianBlur_fu_446_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_GaussianBlur_fu_446_ap_ready = ap_const_logic_1)) then 
                    grp_GaussianBlur_fu_446_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pow_generic_float_s_fu_474_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pow_generic_float_s_fu_474_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state4) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_pow_generic_float_s_fu_474_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pow_generic_float_s_fu_474_ap_ready = ap_const_logic_1)) then 
                    grp_pow_generic_float_s_fu_474_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    gauss_pyr_cols1_fu_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (i1_reg_412 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0))) then 
                gauss_pyr_cols1_fu_232 <= grp_GaussianBlur_fu_446_ap_return_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_565_p2 = ap_const_lv1_1))) then 
                gauss_pyr_cols1_fu_232 <= gauss_pyr_1_cols_read;
            end if; 
        end if;
    end process;

    gauss_pyr_cols2_fu_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (i1_reg_412 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0))) then 
                gauss_pyr_cols2_fu_228 <= grp_GaussianBlur_fu_446_ap_return_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_565_p2 = ap_const_lv1_1))) then 
                gauss_pyr_cols2_fu_228 <= gauss_pyr_2_cols_read;
            end if; 
        end if;
    end process;

    gauss_pyr_cols3_fu_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (i1_reg_412 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0))) then 
                gauss_pyr_cols3_fu_224 <= grp_GaussianBlur_fu_446_ap_return_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_565_p2 = ap_const_lv1_1))) then 
                gauss_pyr_cols3_fu_224 <= gauss_pyr_3_cols_read;
            end if; 
        end if;
    end process;

    gauss_pyr_cols4_fu_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (i1_reg_412 = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0))) then 
                gauss_pyr_cols4_fu_220 <= grp_GaussianBlur_fu_446_ap_return_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_565_p2 = ap_const_lv1_1))) then 
                gauss_pyr_cols4_fu_220 <= gauss_pyr_4_cols_read;
            end if; 
        end if;
    end process;

    gauss_pyr_cols_fu_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) and (tmp_i_fu_1428_p2 = ap_const_lv1_0))) then 
                gauss_pyr_cols_fu_204 <= src_cols_read;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_565_p2 = ap_const_lv1_1))) then 
                gauss_pyr_cols_fu_204 <= gauss_pyr_0_cols_read;
            end if; 
        end if;
    end process;

    gauss_pyr_rows6_fu_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (i1_reg_412 = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (i1_reg_412 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (i1_reg_412 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0)) or (not((i1_reg_412 = ap_const_lv3_4)) and not((i1_reg_412 = ap_const_lv3_3)) and not((i1_reg_412 = ap_const_lv3_2)) and not((i1_reg_412 = ap_const_lv3_1)) and (ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (i1_reg_412 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0)))) then 
                gauss_pyr_rows6_fu_236 <= gauss_pyr_rows6_1_fu_1280_p10;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_565_p2 = ap_const_lv1_1))) then 
                gauss_pyr_rows6_fu_236 <= gauss_pyr_1_rows_read;
            end if; 
        end if;
    end process;

    gauss_pyr_rows7_fu_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (i1_reg_412 = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (i1_reg_412 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (i1_reg_412 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0)) or (not((i1_reg_412 = ap_const_lv3_4)) and not((i1_reg_412 = ap_const_lv3_3)) and not((i1_reg_412 = ap_const_lv3_2)) and not((i1_reg_412 = ap_const_lv3_1)) and (ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (i1_reg_412 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0)))) then 
                gauss_pyr_rows7_fu_244 <= gauss_pyr_rows7_1_fu_1319_p10;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_565_p2 = ap_const_lv1_1))) then 
                gauss_pyr_rows7_fu_244 <= gauss_pyr_2_rows_read;
            end if; 
        end if;
    end process;

    gauss_pyr_rows8_fu_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (i1_reg_412 = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (i1_reg_412 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (i1_reg_412 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0)) or (not((i1_reg_412 = ap_const_lv3_4)) and not((i1_reg_412 = ap_const_lv3_3)) and not((i1_reg_412 = ap_const_lv3_2)) and not((i1_reg_412 = ap_const_lv3_1)) and (ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (i1_reg_412 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0)))) then 
                gauss_pyr_rows8_fu_256 <= gauss_pyr_rows8_1_fu_1374_p10;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_565_p2 = ap_const_lv1_1))) then 
                gauss_pyr_rows8_fu_256 <= gauss_pyr_3_rows_read;
            end if; 
        end if;
    end process;

    gauss_pyr_rows9_fu_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (i1_reg_412 = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (i1_reg_412 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (i1_reg_412 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0)) or (not((i1_reg_412 = ap_const_lv3_4)) and not((i1_reg_412 = ap_const_lv3_3)) and not((i1_reg_412 = ap_const_lv3_2)) and not((i1_reg_412 = ap_const_lv3_1)) and (ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (i1_reg_412 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0)))) then 
                gauss_pyr_rows9_fu_252 <= gauss_pyr_rows9_1_fu_1358_p10;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_565_p2 = ap_const_lv1_1))) then 
                gauss_pyr_rows9_fu_252 <= gauss_pyr_4_rows_read;
            end if; 
        end if;
    end process;

    gauss_pyr_rows_fu_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) and (tmp_i_fu_1428_p2 = ap_const_lv1_0))) then 
                gauss_pyr_rows_fu_208 <= src_rows_read;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_565_p2 = ap_const_lv1_1))) then 
                gauss_pyr_rows_fu_208 <= gauss_pyr_0_rows_read;
            end if; 
        end if;
    end process;

    i1_reg_412_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                i1_reg_412 <= i_17_reg_1753;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_565_p2 = ap_const_lv1_1))) then 
                i1_reg_412 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_i_reg_424_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_601_fu_991_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31) and (exitcond_fu_979_p2 = ap_const_lv1_0))) then 
                i_i_reg_424 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                i_i_reg_424 <= i_18_reg_1866;
            end if; 
        end if;
    end process;

    i_reg_400_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                i_reg_400 <= i_16_fu_973_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_400 <= ap_const_lv3_1;
            end if; 
        end if;
    end process;

    j_i_reg_435_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_fu_1428_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                j_i_reg_435 <= ap_const_lv31_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_1677_i_fu_1463_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_i_reg_435 <= j_fu_1468_p2;
            end if; 
        end if;
    end process;

    write_flag1_fu_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((i1_reg_412 = ap_const_lv3_4)) and not((i1_reg_412 = ap_const_lv3_3)) and not((i1_reg_412 = ap_const_lv3_2)) and not((i1_reg_412 = ap_const_lv3_1)) and (ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0))) then 
                write_flag1_fu_216 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_565_p2 = ap_const_lv1_1))) then 
                write_flag1_fu_216 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag_fu_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (i1_reg_412 = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (i1_reg_412 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (i1_reg_412 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0)) or (not((i1_reg_412 = ap_const_lv3_4)) and not((i1_reg_412 = ap_const_lv3_3)) and not((i1_reg_412 = ap_const_lv3_2)) and not((i1_reg_412 = ap_const_lv3_1)) and (ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (i1_reg_412 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0)))) then 
                write_flag_fu_248 <= write_flag_1_fu_1335_p10;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_565_p2 = ap_const_lv1_1))) then 
                write_flag_fu_248 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                OP1_V_34_cast_reg_1724 <= OP1_V_34_cast_fu_916_p1;
                tmp_599_reg_1730 <= p_Val2_192_fu_919_p2(47 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                agg_result_V_i_reg_1740 <= grp_sqrt_fixed_32_16_s_fu_469_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((i1_reg_412 = ap_const_lv3_4)) and not((i1_reg_412 = ap_const_lv3_3)) and not((i1_reg_412 = ap_const_lv3_2)) and not((i1_reg_412 = ap_const_lv3_1)) and (ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0))) then
                gauss_pyr_cols15_s_fu_212 <= grp_GaussianBlur_fu_446_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                gauss_pyr_cols_addr1_reg_1857 <= gauss_pyr_cols_addr1_fu_1253_p10;
                gauss_pyr_rows6_load_1_reg_1797 <= gauss_pyr_rows6_fu_236;
                gauss_pyr_rows7_load_1_reg_1808 <= gauss_pyr_rows7_fu_244;
                gauss_pyr_rows8_load_1_reg_1830 <= gauss_pyr_rows8_fu_256;
                gauss_pyr_rows9_load_1_reg_1819 <= gauss_pyr_rows9_fu_252;
                gauss_pyr_rows_addr6_reg_1852 <= gauss_pyr_rows_addr6_fu_1230_p10;
                p_03_i_reg_1846 <= p_03_i_fu_1221_p3;
                tmp_602_reg_1841 <= tmp_602_fu_1172_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (i1_reg_412 = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (i1_reg_412 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (i1_reg_412 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0)) or (not((i1_reg_412 = ap_const_lv3_4)) and not((i1_reg_412 = ap_const_lv3_3)) and not((i1_reg_412 = ap_const_lv3_2)) and not((i1_reg_412 = ap_const_lv3_1)) and (ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (i1_reg_412 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0)))) then
                gauss_pyr_rows10_s_fu_240 <= gauss_pyr_rows10_1_fu_1296_p10;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                i_17_reg_1753 <= i_17_fu_985_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                i_18_reg_1866 <= i_18_fu_1433_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                icmp_reg_1714 <= icmp_fu_749_p2;
                isneg_reg_1674 <= ireg_V_fu_631_p1(63 downto 63);
                man_V_30_reg_1679 <= man_V_30_fu_683_p3;
                sh_amt_reg_1696 <= sh_amt_fu_721_p3;
                tmp_1310_reg_1708 <= tmp_1310_fu_735_p1;
                tmp_589_reg_1684 <= tmp_589_fu_691_p2;
                tmp_590_reg_1690 <= tmp_590_fu_703_p2;
                tmp_593_reg_1702 <= tmp_593_fu_729_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                is_neg_reg_1772 <= is_neg_fu_1104_p1(24 downto 24);
                tmp32_V_76_reg_1777 <= tmp32_V_76_fu_1148_p2;
                tmp_1314_reg_1782 <= tmp_1314_fu_1154_p1;
                tmp_604_reg_1767 <= tmp_604_fu_1098_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) and (tmp_604_reg_1767 = ap_const_lv1_0))) then
                p_Result_s_218_reg_1792 <= tmp32_V_fu_1158_p1(30 downto 23);
                tmp32_V_reg_1787 <= tmp32_V_fu_1158_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                this_assign_s_reg_1735 <= p_Val2_193_fu_948_p2(47 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_1677_i_reg_1876 <= tmp_1677_i_fu_1463_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_fu_1428_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    tmp_277_cast_reg_1871(17 downto 8) <= tmp_277_cast_fu_1443_p3(17 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_1677_i_fu_1463_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    tmp_278_cast_reg_1885(17 downto 0) <= tmp_278_cast_fu_1483_p1(17 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                tmp_598_reg_1719 <= p_Val2_191_fu_900_p2(47 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and (exitcond_fu_979_p2 = ap_const_lv1_0))) then
                tmp_601_reg_1758 <= tmp_601_fu_991_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_565_p2 = ap_const_lv1_0))) then
                tmp_s_reg_1563 <= tmp_s_fu_571_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                v_assign_7_reg_1669 <= grp_pow_generic_float_s_fu_474_ap_return;
            end if;
        end if;
    end process;
    tmp_277_cast_reg_1871(7 downto 0) <= "00000000";
    tmp_278_cast_reg_1885(63 downto 18) <= "0000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_565_p2, ap_CS_fsm_state31, tmp_601_fu_991_p2, exitcond_fu_979_p2, tmp_i_fu_1428_p2, ap_CS_fsm_state37, tmp_1677_i_fu_1463_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_CS_fsm_state36, ap_block_state36_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_565_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state31 => 
                if (((exitcond_fu_979_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((tmp_601_fu_991_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31) and (exitcond_fu_979_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state37) and (tmp_i_fu_1428_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_1677_i_fu_1463_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_1677_i_fu_1463_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_fu_697_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(tmp_587_fu_657_p1));
        OP1_V_34_cast_fu_916_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_598_reg_1719),48));

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(37);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(38);
    ap_NS_fsm_state4 <= ap_NS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state36_on_subcall_done_assign_proc : process(tmp_601_reg_1758, grp_GaussianBlur_fu_446_ap_done)
    begin
                ap_block_state36_on_subcall_done <= ((grp_GaussianBlur_fu_446_ap_done = ap_const_logic_0) and (tmp_601_reg_1758 = ap_const_lv1_0));
    end process;

        ap_block_state38_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state38_assign_proc : process(tmp_1677_i_fu_1463_p2)
    begin
        if ((tmp_1677_i_fu_1463_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state38 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state38 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state31, exitcond_fu_979_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((exitcond_fu_979_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state31, exitcond_fu_979_p2)
    begin
        if (((exitcond_fu_979_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= gauss_pyr_rows6_fu_236;
    ap_return_1 <= gauss_pyr_rows7_fu_244;
    ap_return_10 <= gauss_pyr_rows_fu_208;
    ap_return_11 <= gauss_pyr_cols_fu_204;
    ap_return_2 <= gauss_pyr_rows8_fu_256;
    ap_return_3 <= gauss_pyr_rows9_fu_252;
    ap_return_4 <= gauss_pyr_5_rows_wr_fu_1008_p3;
    ap_return_5 <= gauss_pyr_cols1_fu_232;
    ap_return_6 <= gauss_pyr_cols2_fu_228;
    ap_return_7 <= gauss_pyr_cols3_fu_224;
    ap_return_8 <= gauss_pyr_cols4_fu_220;
    ap_return_9 <= gauss_pyr_5_cols_wr_fu_1015_p3;
    exitcond3_fu_565_p2 <= "1" when (i_reg_400 = ap_const_lv3_6) else "0";
    exitcond_fu_979_p2 <= "1" when (i1_reg_412 = ap_const_lv3_6) else "0";
    exp_tmp_V_fu_647_p4 <= ireg_V_fu_631_p1(62 downto 52);
    f_25_fu_1217_p1 <= p_Result_204_fu_1206_p5;

    gauss_pyr_0_val_V_address0_assign_proc : process(tmp_601_reg_1758, ap_CS_fsm_pp0_stage0, tmp_278_cast_reg_1885, ap_enable_reg_pp0_iter1, grp_GaussianBlur_fu_446_src_0_val_V_address0, ap_CS_fsm_state36, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gauss_pyr_0_val_V_address0 <= tmp_278_cast_reg_1885(16 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0))) then 
            gauss_pyr_0_val_V_address0 <= grp_GaussianBlur_fu_446_src_0_val_V_address0;
        else 
            gauss_pyr_0_val_V_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gauss_pyr_0_val_V_ce0_assign_proc : process(tmp_601_reg_1758, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, grp_GaussianBlur_fu_446_src_0_val_V_ce0, ap_CS_fsm_state36)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gauss_pyr_0_val_V_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_601_reg_1758 = ap_const_lv1_0))) then 
            gauss_pyr_0_val_V_ce0 <= grp_GaussianBlur_fu_446_src_0_val_V_ce0;
        else 
            gauss_pyr_0_val_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    gauss_pyr_0_val_V_d0 <= src_val_V_q0;

    gauss_pyr_0_val_V_we0_assign_proc : process(tmp_1677_i_reg_1876, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_1677_i_reg_1876 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gauss_pyr_0_val_V_we0 <= ap_const_logic_1;
        else 
            gauss_pyr_0_val_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    gauss_pyr_1_val_V_address0 <= grp_GaussianBlur_fu_446_src_1_val_V_address0;
    gauss_pyr_1_val_V_address1 <= grp_GaussianBlur_fu_446_src_1_val_V_address1;
    gauss_pyr_1_val_V_ce0 <= grp_GaussianBlur_fu_446_src_1_val_V_ce0;
    gauss_pyr_1_val_V_ce1 <= grp_GaussianBlur_fu_446_src_1_val_V_ce1;
    gauss_pyr_1_val_V_d1 <= grp_GaussianBlur_fu_446_src_1_val_V_d1;
    gauss_pyr_1_val_V_we1 <= grp_GaussianBlur_fu_446_src_1_val_V_we1;
    gauss_pyr_2_val_V_address0 <= grp_GaussianBlur_fu_446_src_2_val_V_address0;
    gauss_pyr_2_val_V_address1 <= grp_GaussianBlur_fu_446_src_2_val_V_address1;
    gauss_pyr_2_val_V_ce0 <= grp_GaussianBlur_fu_446_src_2_val_V_ce0;
    gauss_pyr_2_val_V_ce1 <= grp_GaussianBlur_fu_446_src_2_val_V_ce1;
    gauss_pyr_2_val_V_d1 <= grp_GaussianBlur_fu_446_src_2_val_V_d1;
    gauss_pyr_2_val_V_we1 <= grp_GaussianBlur_fu_446_src_2_val_V_we1;
    gauss_pyr_3_val_V_address0 <= grp_GaussianBlur_fu_446_src_3_val_V_address0;
    gauss_pyr_3_val_V_address1 <= grp_GaussianBlur_fu_446_src_3_val_V_address1;
    gauss_pyr_3_val_V_ce0 <= grp_GaussianBlur_fu_446_src_3_val_V_ce0;
    gauss_pyr_3_val_V_ce1 <= grp_GaussianBlur_fu_446_src_3_val_V_ce1;
    gauss_pyr_3_val_V_d1 <= grp_GaussianBlur_fu_446_src_3_val_V_d1;
    gauss_pyr_3_val_V_we1 <= grp_GaussianBlur_fu_446_src_3_val_V_we1;
    gauss_pyr_4_val_V_address0 <= grp_GaussianBlur_fu_446_src_4_val_V_address0;
    gauss_pyr_4_val_V_address1 <= grp_GaussianBlur_fu_446_src_4_val_V_address1;
    gauss_pyr_4_val_V_ce0 <= grp_GaussianBlur_fu_446_src_4_val_V_ce0;
    gauss_pyr_4_val_V_ce1 <= grp_GaussianBlur_fu_446_src_4_val_V_ce1;
    gauss_pyr_4_val_V_d1 <= grp_GaussianBlur_fu_446_src_4_val_V_d1;
    gauss_pyr_4_val_V_we1 <= grp_GaussianBlur_fu_446_src_4_val_V_we1;
    gauss_pyr_5_cols_wr_fu_1015_p3 <= 
        gauss_pyr_cols15_s_fu_212 when (write_flag1_fu_216(0) = '1') else 
        gauss_pyr_5_cols_read;
    gauss_pyr_5_rows_wr_fu_1008_p3 <= 
        gauss_pyr_rows10_s_fu_240 when (write_flag_fu_248(0) = '1') else 
        gauss_pyr_5_rows_read;
    gauss_pyr_5_val_V_address0 <= grp_GaussianBlur_fu_446_dst_5_val_V_address0;
    gauss_pyr_5_val_V_ce0 <= grp_GaussianBlur_fu_446_dst_5_val_V_ce0;
    gauss_pyr_5_val_V_d0 <= grp_GaussianBlur_fu_446_dst_5_val_V_d0;
    gauss_pyr_5_val_V_we0 <= grp_GaussianBlur_fu_446_dst_5_val_V_we0;
    grp_GaussianBlur_fu_446_ap_start <= grp_GaussianBlur_fu_446_ap_start_reg;
    grp_fu_498_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_1563),32));
    grp_pow_generic_float_s_fu_474_ap_start <= grp_pow_generic_float_s_fu_474_ap_start_reg;
    i_16_fu_973_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(i_reg_400));
    i_17_fu_985_p2 <= std_logic_vector(unsigned(i1_reg_412) + unsigned(ap_const_lv3_1));
    i_18_fu_1433_p2 <= std_logic_vector(unsigned(i_i_reg_424) + unsigned(ap_const_lv31_1));
    i_i_cast_fu_1424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_424),32));
    icmp_fu_749_p2 <= "1" when (tmp_1311_fu_739_p4 = ap_const_lv7_0) else "0";
    ireg_V_fu_631_p1 <= d_assign_s_fu_502_p1;
    is_neg_fu_1104_p1 <= sig_V_q0;
    is_neg_fu_1104_p3 <= is_neg_fu_1104_p1(24 downto 24);
    isneg_fu_639_p3 <= ireg_V_fu_631_p1(63 downto 63);
    j_fu_1468_p2 <= std_logic_vector(unsigned(j_i_reg_435) + unsigned(ap_const_lv31_1));
    j_i_cast_fu_1459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i_reg_435),32));
    man_V_29_fu_677_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_s_fu_673_p1));
    man_V_30_fu_683_p3 <= 
        man_V_29_fu_677_p2 when (isneg_fu_639_p3(0) = '1') else 
        p_Result_s_fu_673_p1;
    newSel25_fu_861_p3 <= 
        storemerge_fu_776_p3 when (sel_tmp9_fu_819_p2(0) = '1') else 
        tmp_1310_reg_1708;
    newSel26_fu_874_p3 <= 
        newSel_fu_847_p3 when (or_cond_fu_855_p2(0) = '1') else 
        newSel25_fu_861_p3;
    newSel27_fu_888_p3 <= 
        newSel26_fu_874_p3 when (or_cond4_fu_882_p2(0) = '1') else 
        ap_const_lv32_0;
    newSel_fu_847_p3 <= 
        tmp_597_fu_783_p2 when (sel_tmp22_fu_842_p2(0) = '1') else 
        tmp_1312_fu_772_p1;
    
    num_zeros_fu_1140_p3_proc : process(p_Result_203_fu_1130_p4)
    begin
        num_zeros_fu_1140_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_203_fu_1130_p4(i) = '1' then
                num_zeros_fu_1140_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    or_cond3_fu_868_p2 <= (sel_tmp9_fu_819_p2 or sel_tmp2_fu_793_p2);
    or_cond4_fu_882_p2 <= (or_cond_fu_855_p2 or or_cond3_fu_868_p2);
    or_cond_fu_855_p2 <= (sel_tmp22_fu_842_p2 or sel_tmp15_fu_825_p2);
    p_03_i_fu_1221_p3 <= 
        ap_const_lv32_0 when (tmp_604_reg_1767(0) = '1') else 
        f_25_fu_1217_p1;
    p_Repl2_81_trunc_fu_1193_p2 <= std_logic_vector(unsigned(tmp_607_fu_1184_p2) + unsigned(tmp_608_fu_1189_p1));
    
    p_Result_203_fu_1130_p4_proc : process(p_Val2_cast_fu_1126_p1)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_203_fu_1130_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_cast_fu_1126_p1;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_203_fu_1130_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_203_fu_1130_p4_i) := p_Val2_cast_fu_1126_p1(32-1-p_Result_203_fu_1130_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_203_fu_1130_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_204_fu_1206_p5 <= (tmp_609_fu_1199_p3 & tmp32_V_reg_1787(22 downto 0));
    p_Result_s_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_588_fu_665_p3),54));
    p_Val2_191_fu_900_p1 <= newSel27_fu_888_p3;
    p_Val2_191_fu_900_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv48_19999) * signed(p_Val2_191_fu_900_p1))), 48));
    p_Val2_192_fu_919_p1 <= tmp_598_reg_1719;
    p_Val2_192_fu_919_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv48_1428A) * signed(p_Val2_192_fu_919_p1))), 48));
    p_Val2_193_fu_948_p2 <= std_logic_vector(unsigned(tmp_834_cast_fu_938_p2) - unsigned(tmp_835_cast_fu_944_p2));
    p_Val2_195_fu_1118_p3 <= 
        tmp_605_fu_1112_p2 when (is_neg_fu_1104_p3(0) = '1') else 
        p_Val2_321_cast_fu_1094_p1;
    p_Val2_321_cast_fu_1094_p0 <= sig_V_q0;
        p_Val2_321_cast_fu_1094_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_321_cast_fu_1094_p0),26));

        p_Val2_cast_fu_1126_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_195_fu_1118_p3),32));

    p_trunc_ext_cast_fu_969_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(agg_result_V_i_reg_1740),25));
    sel_tmp15_fu_825_p2 <= (tmp_594_fu_758_p2 and sel_tmp7_fu_808_p2);
    sel_tmp1_fu_788_p2 <= (tmp_589_reg_1684 xor ap_const_lv1_1);
    sel_tmp21_demorgan_fu_831_p2 <= (tmp_590_reg_1690 or sel_tmp6_demorgan_fu_798_p2);
    sel_tmp21_fu_836_p2 <= (sel_tmp21_demorgan_fu_831_p2 xor ap_const_lv1_1);
    sel_tmp22_fu_842_p2 <= (sel_tmp21_fu_836_p2 and icmp_reg_1714);
    sel_tmp2_fu_793_p2 <= (tmp_593_reg_1702 and sel_tmp1_fu_788_p2);
    sel_tmp6_demorgan_fu_798_p2 <= (tmp_593_reg_1702 or tmp_589_reg_1684);
    sel_tmp6_fu_802_p2 <= (sel_tmp6_demorgan_fu_798_p2 xor ap_const_lv1_1);
    sel_tmp7_fu_808_p2 <= (tmp_590_reg_1690 and sel_tmp6_fu_802_p2);
    sel_tmp8_fu_813_p2 <= (tmp_594_fu_758_p2 xor ap_const_lv1_1);
    sel_tmp9_fu_819_p2 <= (sel_tmp8_fu_813_p2 and sel_tmp7_fu_808_p2);
        sh_amt_7_cast_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_1696),32));

    sh_amt_fu_721_p3 <= 
        tmp_591_fu_709_p2 when (tmp_590_fu_703_p2(0) = '1') else 
        tmp_592_fu_715_p2;

    sig_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state30, ap_CS_fsm_state31, tmp_600_fu_964_p1, tmp_603_fu_997_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            sig_V_address0 <= tmp_603_fu_997_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sig_V_address0 <= tmp_600_fu_964_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            sig_V_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sig_V_address0 <= "XXX";
        end if; 
    end process;


    sig_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state30, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            sig_V_ce0 <= ap_const_logic_1;
        else 
            sig_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sig_V_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state30, p_trunc_ext_cast_fu_969_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sig_V_d0 <= p_trunc_ext_cast_fu_969_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            sig_V_d0 <= ap_const_lv25_19999;
        else 
            sig_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sig_V_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            sig_V_we0 <= ap_const_logic_1;
        else 
            sig_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    src_val_V_address0 <= tmp_278_cast_fu_1483_p1(16 - 1 downto 0);

    src_val_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_val_V_ce0 <= ap_const_logic_1;
        else 
            src_val_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    storemerge_fu_776_p3 <= 
        ap_const_lv32_FFFFFFFF when (isneg_reg_1674(0) = '1') else 
        ap_const_lv32_0;
    tmp32_V_76_fu_1148_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_cast_fu_1126_p1),to_integer(unsigned('0' & num_zeros_fu_1140_p3(31-1 downto 0)))));
    tmp32_V_fu_1158_p1 <= grp_fu_495_p1;
        tmp_10_fu_935_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_599_reg_1730),48));

    tmp_1309_fu_661_p1 <= ireg_V_fu_631_p1(52 - 1 downto 0);
    tmp_1310_fu_735_p1 <= man_V_30_fu_683_p3(32 - 1 downto 0);
    tmp_1311_fu_739_p4 <= sh_amt_fu_721_p3(11 downto 5);
    tmp_1312_fu_772_p1 <= tmp_596_fu_767_p2(32 - 1 downto 0);
    tmp_1314_fu_1154_p1 <= num_zeros_fu_1140_p3(8 - 1 downto 0);
    tmp_1315_fu_1439_p1 <= i_i_reg_424(10 - 1 downto 0);
    tmp_1316_fu_1474_p1 <= j_i_reg_435(18 - 1 downto 0);
    tmp_1677_i_fu_1463_p2 <= "1" when (signed(j_i_cast_fu_1459_p1) < signed(src_cols_read)) else "0";
    tmp_277_cast_fu_1443_p3 <= (tmp_1315_fu_1439_p1 & ap_const_lv8_0);
    tmp_278_cast_fu_1483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_278_fu_1478_p2),64));
    tmp_278_fu_1478_p2 <= std_logic_vector(unsigned(tmp_277_cast_reg_1871) + unsigned(tmp_1316_fu_1474_p1));
    tmp_587_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_fu_647_p4),12));
    tmp_588_fu_665_p3 <= (ap_const_lv1_1 & tmp_1309_fu_661_p1);
    tmp_589_fu_691_p2 <= "1" when (tmp_fu_635_p1 = ap_const_lv63_0) else "0";
    tmp_590_fu_703_p2 <= "1" when (signed(F2_fu_697_p2) > signed(ap_const_lv12_10)) else "0";
    tmp_591_fu_709_p2 <= std_logic_vector(signed(ap_const_lv12_FF0) + signed(F2_fu_697_p2));
    tmp_592_fu_715_p2 <= std_logic_vector(unsigned(ap_const_lv12_10) - unsigned(F2_fu_697_p2));
    tmp_593_fu_729_p2 <= "1" when (F2_fu_697_p2 = ap_const_lv12_10) else "0";
    tmp_594_fu_758_p2 <= "1" when (unsigned(sh_amt_reg_1696) < unsigned(ap_const_lv12_36)) else "0";
    tmp_595_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_amt_7_cast_fu_755_p1),54));
    tmp_596_fu_767_p2 <= std_logic_vector(shift_right(signed(man_V_30_reg_1679),to_integer(unsigned('0' & tmp_595_fu_763_p1(31-1 downto 0)))));
    tmp_597_fu_783_p2 <= std_logic_vector(shift_left(unsigned(tmp_1310_reg_1708),to_integer(unsigned('0' & sh_amt_7_cast_fu_755_p1(31-1 downto 0)))));
    tmp_600_fu_964_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_400),64));
    tmp_601_fu_991_p2 <= "1" when (i1_reg_412 = ap_const_lv3_0) else "0";
    tmp_602_fu_1172_p2 <= std_logic_vector(signed(ap_const_lv3_7) + signed(i1_reg_412));
    tmp_603_fu_997_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_412),64));
    tmp_604_fu_1098_p0 <= sig_V_q0;
    tmp_604_fu_1098_p2 <= "1" when (tmp_604_fu_1098_p0 = ap_const_lv25_0) else "0";
    tmp_605_fu_1112_p2 <= std_logic_vector(unsigned(ap_const_lv26_0) - unsigned(p_Val2_321_cast_fu_1094_p1));
    tmp_606_fu_1179_p2 <= "0" when (p_Result_s_218_reg_1792 = ap_const_lv8_9E) else "1";
    tmp_607_fu_1184_p2 <= std_logic_vector(signed(ap_const_lv8_8E) - signed(tmp_1314_reg_1782));
    tmp_608_fu_1189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_606_fu_1179_p2),8));
    tmp_609_fu_1199_p3 <= (is_neg_reg_1772 & p_Repl2_81_trunc_fu_1193_p2);
    tmp_834_cast_fu_938_p0 <= tmp_10_fu_935_p1(32 - 1 downto 0);
    tmp_834_cast_fu_938_p1 <= tmp_10_fu_935_p1(32 - 1 downto 0);
    tmp_834_cast_fu_938_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_834_cast_fu_938_p0) * signed(tmp_834_cast_fu_938_p1))), 48));
    tmp_835_cast_fu_944_p0 <= OP1_V_34_cast_reg_1724(32 - 1 downto 0);
    tmp_835_cast_fu_944_p1 <= OP1_V_34_cast_reg_1724(32 - 1 downto 0);
    tmp_835_cast_fu_944_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_835_cast_fu_944_p0) * signed(tmp_835_cast_fu_944_p1))), 48));
    tmp_fu_635_p1 <= ireg_V_fu_631_p1(63 - 1 downto 0);
    tmp_i_fu_1428_p2 <= "1" when (signed(i_i_cast_fu_1424_p1) < signed(src_rows_read)) else "0";
    tmp_s_fu_571_p2 <= std_logic_vector(signed(ap_const_lv3_7) + signed(i_reg_400));
end behav;
