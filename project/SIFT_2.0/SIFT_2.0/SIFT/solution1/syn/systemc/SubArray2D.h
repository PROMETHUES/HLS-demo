// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _SubArray2D_HH_
#define _SubArray2D_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "SIFT2_Core_mux_63VhK_x.h"
#include "SIFT2_Core_mux_63VhK.h"

namespace ap_rtl {

struct SubArray2D : public sc_module {
    // Port declarations 50
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<16> > src0_1_val_V_address0;
    sc_out< sc_logic > src0_1_val_V_ce0;
    sc_in< sc_lv<26> > src0_1_val_V_q0;
    sc_out< sc_lv<16> > src0_2_val_V_address0;
    sc_out< sc_logic > src0_2_val_V_ce0;
    sc_in< sc_lv<26> > src0_2_val_V_q0;
    sc_out< sc_lv<16> > src0_3_val_V_address0;
    sc_out< sc_logic > src0_3_val_V_ce0;
    sc_in< sc_lv<26> > src0_3_val_V_q0;
    sc_out< sc_lv<16> > src0_4_val_V_address0;
    sc_out< sc_logic > src0_4_val_V_ce0;
    sc_in< sc_lv<26> > src0_4_val_V_q0;
    sc_out< sc_lv<16> > src0_5_val_V_address0;
    sc_out< sc_logic > src0_5_val_V_ce0;
    sc_in< sc_lv<26> > src0_5_val_V_q0;
    sc_in< sc_lv<3> > src0_val_V_offset;
    sc_in< sc_lv<32> > src0_rows_read;
    sc_in< sc_lv<32> > src0_cols_read;
    sc_out< sc_lv<16> > src1_0_val_V_address0;
    sc_out< sc_logic > src1_0_val_V_ce0;
    sc_in< sc_lv<32> > src1_0_val_V_q0;
    sc_in< sc_lv<3> > src1_val_V_offset;
    sc_out< sc_lv<16> > dst_0_val_V_address0;
    sc_out< sc_logic > dst_0_val_V_ce0;
    sc_out< sc_logic > dst_0_val_V_we0;
    sc_out< sc_lv<32> > dst_0_val_V_d0;
    sc_out< sc_lv<16> > dst_1_val_V_address0;
    sc_out< sc_logic > dst_1_val_V_ce0;
    sc_out< sc_logic > dst_1_val_V_we0;
    sc_out< sc_lv<32> > dst_1_val_V_d0;
    sc_out< sc_lv<16> > dst_2_val_V_address0;
    sc_out< sc_logic > dst_2_val_V_ce0;
    sc_out< sc_logic > dst_2_val_V_we0;
    sc_out< sc_lv<32> > dst_2_val_V_d0;
    sc_out< sc_lv<16> > dst_3_val_V_address0;
    sc_out< sc_logic > dst_3_val_V_ce0;
    sc_out< sc_logic > dst_3_val_V_we0;
    sc_out< sc_lv<32> > dst_3_val_V_d0;
    sc_out< sc_lv<16> > dst_4_val_V_address0;
    sc_out< sc_logic > dst_4_val_V_ce0;
    sc_out< sc_logic > dst_4_val_V_we0;
    sc_out< sc_lv<32> > dst_4_val_V_d0;
    sc_out< sc_lv<32> > ap_return_0;
    sc_out< sc_lv<32> > ap_return_1;
    sc_signal< sc_lv<32> > ap_var_for_const0;


    // Module declarations
    SubArray2D(sc_module_name name);
    SC_HAS_PROCESS(SubArray2D);

    ~SubArray2D();

    sc_trace_file* mVcdFile;

    SIFT2_Core_mux_63VhK_x<1,1,32,32,32,32,32,32,3,32>* SIFT2_Core_mux_63VhK_x_U755;
    SIFT2_Core_mux_63VhK<1,1,32,32,32,32,32,32,3,32>* SIFT2_Core_mux_63VhK_U756;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<31> > j_reg_254;
    sc_signal< sc_lv<3> > src1_val_V_offset_re_read_fu_76_p2;
    sc_signal< sc_lv<1> > tmp_s_fu_269_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<31> > i_21_fu_274_p2;
    sc_signal< sc_lv<31> > i_21_reg_427;
    sc_signal< sc_lv<18> > tmp_336_cast_fu_284_p3;
    sc_signal< sc_lv<18> > tmp_336_cast_reg_432;
    sc_signal< sc_lv<1> > tmp_818_fu_306_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<31> > j_7_fu_311_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<64> > tmp_337_cast_fu_326_p1;
    sc_signal< sc_lv<64> > tmp_337_cast_reg_446;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<31> > i_reg_243;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<32> > p_Val2_s_872_fu_390_p2;
    sc_signal< sc_lv<32> > i_cast_fu_265_p1;
    sc_signal< sc_lv<10> > tmp_1644_fu_280_p1;
    sc_signal< sc_lv<32> > j_cast_fu_302_p1;
    sc_signal< sc_lv<18> > tmp_1645_fu_317_p1;
    sc_signal< sc_lv<18> > tmp_337_fu_321_p2;
    sc_signal< sc_lv<32> > extLd_fu_336_p1;
    sc_signal< sc_lv<32> > extLd39_fu_340_p1;
    sc_signal< sc_lv<32> > extLd40_fu_344_p1;
    sc_signal< sc_lv<32> > extLd41_fu_348_p1;
    sc_signal< sc_lv<32> > p_Val2_s_fu_356_p6;
    sc_signal< sc_lv<32> > p_Val2_s_fu_356_p8;
    sc_signal< sc_lv<32> > p_Val2_191_fu_373_p8;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state5;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<3> ap_const_lv3_3;
    static const sc_lv<3> ap_const_lv3_2;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<31> ap_const_lv31_1;
    static const sc_lv<8> ap_const_lv8_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_dst_0_val_V_address0();
    void thread_dst_0_val_V_ce0();
    void thread_dst_0_val_V_d0();
    void thread_dst_0_val_V_we0();
    void thread_dst_1_val_V_address0();
    void thread_dst_1_val_V_ce0();
    void thread_dst_1_val_V_d0();
    void thread_dst_1_val_V_we0();
    void thread_dst_2_val_V_address0();
    void thread_dst_2_val_V_ce0();
    void thread_dst_2_val_V_d0();
    void thread_dst_2_val_V_we0();
    void thread_dst_3_val_V_address0();
    void thread_dst_3_val_V_ce0();
    void thread_dst_3_val_V_d0();
    void thread_dst_3_val_V_we0();
    void thread_dst_4_val_V_address0();
    void thread_dst_4_val_V_ce0();
    void thread_dst_4_val_V_d0();
    void thread_dst_4_val_V_we0();
    void thread_extLd39_fu_340_p1();
    void thread_extLd40_fu_344_p1();
    void thread_extLd41_fu_348_p1();
    void thread_extLd_fu_336_p1();
    void thread_i_21_fu_274_p2();
    void thread_i_cast_fu_265_p1();
    void thread_j_7_fu_311_p2();
    void thread_j_cast_fu_302_p1();
    void thread_p_Val2_s_872_fu_390_p2();
    void thread_p_Val2_s_fu_356_p6();
    void thread_src0_1_val_V_address0();
    void thread_src0_1_val_V_ce0();
    void thread_src0_2_val_V_address0();
    void thread_src0_2_val_V_ce0();
    void thread_src0_3_val_V_address0();
    void thread_src0_3_val_V_ce0();
    void thread_src0_4_val_V_address0();
    void thread_src0_4_val_V_ce0();
    void thread_src0_5_val_V_address0();
    void thread_src0_5_val_V_ce0();
    void thread_src1_0_val_V_address0();
    void thread_src1_0_val_V_ce0();
    void thread_src1_val_V_offset_re_read_fu_76_p2();
    void thread_tmp_1644_fu_280_p1();
    void thread_tmp_1645_fu_317_p1();
    void thread_tmp_336_cast_fu_284_p3();
    void thread_tmp_337_cast_fu_326_p1();
    void thread_tmp_337_fu_321_p2();
    void thread_tmp_818_fu_306_p2();
    void thread_tmp_s_fu_269_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
