-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity SubArray2D is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src0_1_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    src0_1_val_V_ce0 : OUT STD_LOGIC;
    src0_1_val_V_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
    src0_2_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    src0_2_val_V_ce0 : OUT STD_LOGIC;
    src0_2_val_V_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
    src0_3_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    src0_3_val_V_ce0 : OUT STD_LOGIC;
    src0_3_val_V_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
    src0_4_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    src0_4_val_V_ce0 : OUT STD_LOGIC;
    src0_4_val_V_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
    src0_5_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    src0_5_val_V_ce0 : OUT STD_LOGIC;
    src0_5_val_V_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
    src0_val_V_offset : IN STD_LOGIC_VECTOR (2 downto 0);
    src0_rows_read : IN STD_LOGIC_VECTOR (31 downto 0);
    src0_cols_read : IN STD_LOGIC_VECTOR (31 downto 0);
    src1_0_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    src1_0_val_V_ce0 : OUT STD_LOGIC;
    src1_0_val_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    src1_val_V_offset : IN STD_LOGIC_VECTOR (2 downto 0);
    dst_0_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dst_0_val_V_ce0 : OUT STD_LOGIC;
    dst_0_val_V_we0 : OUT STD_LOGIC;
    dst_0_val_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dst_1_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dst_1_val_V_ce0 : OUT STD_LOGIC;
    dst_1_val_V_we0 : OUT STD_LOGIC;
    dst_1_val_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dst_2_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dst_2_val_V_ce0 : OUT STD_LOGIC;
    dst_2_val_V_we0 : OUT STD_LOGIC;
    dst_2_val_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dst_3_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dst_3_val_V_ce0 : OUT STD_LOGIC;
    dst_3_val_V_we0 : OUT STD_LOGIC;
    dst_3_val_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dst_4_val_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dst_4_val_V_ce0 : OUT STD_LOGIC;
    dst_4_val_V_we0 : OUT STD_LOGIC;
    dst_4_val_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of SubArray2D is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal j_reg_254 : STD_LOGIC_VECTOR (30 downto 0);
    signal src1_val_V_offset_re_read_fu_76_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_21_fu_274_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_21_reg_427 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_336_cast_fu_284_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_336_cast_reg_432 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_818_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_7_fu_311_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_337_cast_fu_326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_337_cast_reg_446 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal i_reg_243 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal p_Val2_s_872_fu_390_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_fu_265_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1644_fu_280_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_cast_fu_302_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1645_fu_317_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_337_fu_321_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal extLd_fu_336_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd39_fu_340_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd40_fu_344_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd41_fu_348_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_356_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_356_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_191_fu_373_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component SIFT2_Core_mux_63VhK_x IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component SIFT2_Core_mux_63VhK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    SIFT2_Core_mux_63VhK_x_U755 : component SIFT2_Core_mux_63VhK_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => extLd_fu_336_p1,
        din2 => extLd39_fu_340_p1,
        din3 => extLd40_fu_344_p1,
        din4 => extLd41_fu_348_p1,
        din5 => p_Val2_s_fu_356_p6,
        din6 => src0_val_V_offset,
        dout => p_Val2_s_fu_356_p8);

    SIFT2_Core_mux_63VhK_U756 : component SIFT2_Core_mux_63VhK
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => src1_0_val_V_q0,
        din1 => extLd_fu_336_p1,
        din2 => extLd39_fu_340_p1,
        din3 => extLd40_fu_344_p1,
        din4 => extLd41_fu_348_p1,
        din5 => ap_const_lv32_0,
        din6 => src1_val_V_offset,
        dout => p_Val2_191_fu_373_p8);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_269_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_269_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_reg_243 <= i_21_reg_427;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_243 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    j_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_269_p2 = ap_const_lv1_1))) then 
                j_reg_254 <= ap_const_lv31_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_818_fu_306_p2 = ap_const_lv1_1))) then 
                j_reg_254 <= j_7_fu_311_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_21_reg_427 <= i_21_fu_274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_269_p2 = ap_const_lv1_1))) then
                    tmp_336_cast_reg_432(17 downto 8) <= tmp_336_cast_fu_284_p3(17 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_818_fu_306_p2 = ap_const_lv1_1))) then
                    tmp_337_cast_reg_446(17 downto 0) <= tmp_337_cast_fu_326_p1(17 downto 0);
            end if;
        end if;
    end process;
    tmp_336_cast_reg_432(7 downto 0) <= "00000000";
    tmp_337_cast_reg_446(63 downto 18) <= "0000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_s_fu_269_p2, ap_CS_fsm_state2, tmp_818_fu_306_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_269_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (tmp_818_fu_306_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (tmp_818_fu_306_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(tmp_818_fu_306_p2)
    begin
        if ((tmp_818_fu_306_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_s_fu_269_p2, ap_CS_fsm_state2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_269_p2 = ap_const_lv1_0)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_s_fu_269_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_269_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= src0_rows_read;
    ap_return_1 <= src0_cols_read;
    dst_0_val_V_address0 <= tmp_337_cast_reg_446(16 - 1 downto 0);

    dst_0_val_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst_0_val_V_ce0 <= ap_const_logic_1;
        else 
            dst_0_val_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dst_0_val_V_d0 <= p_Val2_s_872_fu_390_p2;

    dst_0_val_V_we0_assign_proc : process(src1_val_V_offset_re_read_fu_76_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (src1_val_V_offset_re_read_fu_76_p2 = ap_const_lv3_0))) then 
            dst_0_val_V_we0 <= ap_const_logic_1;
        else 
            dst_0_val_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dst_1_val_V_address0 <= tmp_337_cast_reg_446(16 - 1 downto 0);

    dst_1_val_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst_1_val_V_ce0 <= ap_const_logic_1;
        else 
            dst_1_val_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dst_1_val_V_d0 <= p_Val2_s_872_fu_390_p2;

    dst_1_val_V_we0_assign_proc : process(src1_val_V_offset_re_read_fu_76_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (src1_val_V_offset_re_read_fu_76_p2 = ap_const_lv3_1))) then 
            dst_1_val_V_we0 <= ap_const_logic_1;
        else 
            dst_1_val_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dst_2_val_V_address0 <= tmp_337_cast_reg_446(16 - 1 downto 0);

    dst_2_val_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst_2_val_V_ce0 <= ap_const_logic_1;
        else 
            dst_2_val_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dst_2_val_V_d0 <= p_Val2_s_872_fu_390_p2;

    dst_2_val_V_we0_assign_proc : process(src1_val_V_offset_re_read_fu_76_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (src1_val_V_offset_re_read_fu_76_p2 = ap_const_lv3_2))) then 
            dst_2_val_V_we0 <= ap_const_logic_1;
        else 
            dst_2_val_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dst_3_val_V_address0 <= tmp_337_cast_reg_446(16 - 1 downto 0);

    dst_3_val_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst_3_val_V_ce0 <= ap_const_logic_1;
        else 
            dst_3_val_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dst_3_val_V_d0 <= p_Val2_s_872_fu_390_p2;

    dst_3_val_V_we0_assign_proc : process(src1_val_V_offset_re_read_fu_76_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (src1_val_V_offset_re_read_fu_76_p2 = ap_const_lv3_3))) then 
            dst_3_val_V_we0 <= ap_const_logic_1;
        else 
            dst_3_val_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dst_4_val_V_address0 <= tmp_337_cast_reg_446(16 - 1 downto 0);

    dst_4_val_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst_4_val_V_ce0 <= ap_const_logic_1;
        else 
            dst_4_val_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dst_4_val_V_d0 <= p_Val2_s_872_fu_390_p2;

    dst_4_val_V_we0_assign_proc : process(src1_val_V_offset_re_read_fu_76_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((not((src1_val_V_offset_re_read_fu_76_p2 = ap_const_lv3_0)) and not((src1_val_V_offset_re_read_fu_76_p2 = ap_const_lv3_1)) and not((src1_val_V_offset_re_read_fu_76_p2 = ap_const_lv3_2)) and not((src1_val_V_offset_re_read_fu_76_p2 = ap_const_lv3_3)) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst_4_val_V_we0 <= ap_const_logic_1;
        else 
            dst_4_val_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

        extLd39_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(src0_2_val_V_q0),32));

        extLd40_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(src0_3_val_V_q0),32));

        extLd41_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(src0_4_val_V_q0),32));

        extLd_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(src0_1_val_V_q0),32));

    i_21_fu_274_p2 <= std_logic_vector(unsigned(i_reg_243) + unsigned(ap_const_lv31_1));
    i_cast_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_243),32));
    j_7_fu_311_p2 <= std_logic_vector(unsigned(j_reg_254) + unsigned(ap_const_lv31_1));
    j_cast_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_254),32));
    p_Val2_s_872_fu_390_p2 <= std_logic_vector(unsigned(p_Val2_s_fu_356_p8) - unsigned(p_Val2_191_fu_373_p8));
        p_Val2_s_fu_356_p6 <= std_logic_vector(IEEE.numeric_std.resize(signed(src0_5_val_V_q0),32));

    src0_1_val_V_address0 <= tmp_337_cast_fu_326_p1(16 - 1 downto 0);

    src0_1_val_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src0_1_val_V_ce0 <= ap_const_logic_1;
        else 
            src0_1_val_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    src0_2_val_V_address0 <= tmp_337_cast_fu_326_p1(16 - 1 downto 0);

    src0_2_val_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src0_2_val_V_ce0 <= ap_const_logic_1;
        else 
            src0_2_val_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    src0_3_val_V_address0 <= tmp_337_cast_fu_326_p1(16 - 1 downto 0);

    src0_3_val_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src0_3_val_V_ce0 <= ap_const_logic_1;
        else 
            src0_3_val_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    src0_4_val_V_address0 <= tmp_337_cast_fu_326_p1(16 - 1 downto 0);

    src0_4_val_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src0_4_val_V_ce0 <= ap_const_logic_1;
        else 
            src0_4_val_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    src0_5_val_V_address0 <= tmp_337_cast_fu_326_p1(16 - 1 downto 0);

    src0_5_val_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src0_5_val_V_ce0 <= ap_const_logic_1;
        else 
            src0_5_val_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    src1_0_val_V_address0 <= tmp_337_cast_fu_326_p1(16 - 1 downto 0);

    src1_0_val_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src1_0_val_V_ce0 <= ap_const_logic_1;
        else 
            src1_0_val_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    src1_val_V_offset_re_read_fu_76_p2 <= src1_val_V_offset;
    tmp_1644_fu_280_p1 <= i_reg_243(10 - 1 downto 0);
    tmp_1645_fu_317_p1 <= j_reg_254(18 - 1 downto 0);
    tmp_336_cast_fu_284_p3 <= (tmp_1644_fu_280_p1 & ap_const_lv8_0);
    tmp_337_cast_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_337_fu_321_p2),64));
    tmp_337_fu_321_p2 <= std_logic_vector(unsigned(tmp_336_cast_reg_432) + unsigned(tmp_1645_fu_317_p1));
    tmp_818_fu_306_p2 <= "1" when (signed(j_cast_fu_302_p1) < signed(src0_cols_read)) else "0";
    tmp_s_fu_269_p2 <= "1" when (signed(i_cast_fu_265_p1) < signed(src0_rows_read)) else "0";
end behav;
