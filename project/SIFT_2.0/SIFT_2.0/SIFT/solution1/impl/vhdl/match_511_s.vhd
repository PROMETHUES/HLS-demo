-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity match_511_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    descriptors0_val_val_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    descriptors0_val_val_ce0 : OUT STD_LOGIC;
    descriptors0_val_val_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    descriptors0_length_read : IN STD_LOGIC_VECTOR (31 downto 0);
    descriptors1_val_val_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    descriptors1_val_val_ce0 : OUT STD_LOGIC;
    descriptors1_val_val_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    descriptors1_length_read : IN STD_LOGIC_VECTOR (31 downto 0);
    thresh_V : IN STD_LOGIC_VECTOR (31 downto 0);
    matches_val_idx0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    matches_val_idx0_ce0 : OUT STD_LOGIC;
    matches_val_idx0_we0 : OUT STD_LOGIC;
    matches_val_idx0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    matches_val_idx1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    matches_val_idx1_ce0 : OUT STD_LOGIC;
    matches_val_idx1_we0 : OUT STD_LOGIC;
    matches_val_idx1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    matches_length_read : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of match_511_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_7FFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111111111111111111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal min_dist1_3_reg_237 : STD_LOGIC_VECTOR (23 downto 0);
    signal k_reg_249 : STD_LOGIC_VECTOR (7 downto 0);
    signal min_dist1_5_reg_319 : STD_LOGIC_VECTOR (23 downto 0);
    signal k2_reg_331 : STD_LOGIC_VECTOR (7 downto 0);
    signal OP1_V_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal OP1_V_reg_818 : STD_LOGIC_VECTOR (63 downto 0);
    signal vector_length_read_a_reg_832 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_3_fu_382_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_3_reg_842 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_126_cast_fu_392_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_126_cast_reg_847 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_119_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_idx_2_cast_fu_400_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_idx_2_cast_reg_852 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_121_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_409_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_1_reg_861 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_134_cast_fu_419_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_134_cast_reg_866 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond7_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond7_reg_874 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal k_3_fu_485_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal grp_fu_787_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal min_dist0_1_fu_557_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal min_dist1_2_fu_565_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_idx_1_fu_573_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal vector_length_read_a_2_reg_913 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_2_fu_589_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_2_reg_923 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_124_cast_fu_599_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_124_cast_reg_928 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_s_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_idx_cast_fu_607_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_idx_cast_reg_933 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_120_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_616_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_reg_942 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_129_cast_fu_626_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_129_cast_reg_947 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond_fu_686_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_955 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state9_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal k_2_fu_692_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal grp_fu_795_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal min_dist07_1_fu_764_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal min_dist18_2_fu_772_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_idx9_1_fu_780_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state9 : STD_LOGIC;
    signal i_reg_178 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_dist1_reg_190 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_2_reg_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_idx1_reg_214 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_idx_2_reg_226 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i5_reg_260 : STD_LOGIC_VECTOR (30 downto 0);
    signal min_dist1_4_reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_reg_284 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_idx9_reg_296 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_idx_reg_308 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal matches_length_4_reg_342 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_fu_469_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_127_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_149_cast_fu_500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_150_cast_fu_510_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i8_fu_676_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_124_fu_655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_142_cast_fu_707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_143_cast_fu_717_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal vector_length_read_a_1_fu_66 : STD_LOGIC_VECTOR (31 downto 0);
    signal matches_length_read_s_fu_354_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal vector_length_write_s_fu_464_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal vector_length_write_1_fu_671_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_match_idx0_1_fu_454_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_match_idx0_fu_666_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_match_idx1_1_fu_459_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_match_idx1_fu_661_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_cast_fu_373_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_155_fu_388_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_157_fu_415_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_2_fu_431_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_2_fu_431_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_125_fu_436_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_126_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_2_fu_431_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_148_cast_fu_491_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_137_fu_495_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_138_fu_505_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_250_cast_fu_515_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_251_cast_fu_519_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal delta_1_fu_523_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal min_dist1_3_cast_fu_533_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_135_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_134_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dist_0_s_fu_549_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i5_cast_fu_580_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_154_fu_595_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_156_fu_622_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_fu_638_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_fu_638_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_122_fu_643_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_123_fu_651_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_fu_638_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_141_cast_fu_698_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_131_fu_702_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_132_fu_712_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_245_cast_fu_722_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_246_cast_fu_726_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal delta_fu_730_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal min_dist1_5_cast_fu_740_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_129_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_128_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dist12_0_s_fu_756_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_787_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal delta_1_cast_fu_529_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_787_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_795_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal delta_cast_fu_736_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_795_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component SIFT2_Core_mac_mubFp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;



begin
    SIFT2_Core_mac_mubFp_U1084 : component SIFT2_Core_mac_mubFp
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        din0 => grp_fu_787_p0,
        din1 => grp_fu_787_p1,
        din2 => min_dist1_3_reg_237,
        dout => grp_fu_787_p3);

    SIFT2_Core_mac_mubFp_U1085 : component SIFT2_Core_mac_mubFp
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        din0 => grp_fu_795_p0,
        din1 => grp_fu_795_p1,
        din2 => min_dist1_5_reg_319,
        dout => grp_fu_795_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((tmp_121_fu_404_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((tmp_121_fu_404_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((tmp_120_fu_611_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state9))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state9);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((tmp_120_fu_611_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_return_preg <= matches_length_4_reg_342;
                end if; 
            end if;
        end if;
    end process;


    i5_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_358_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i5_reg_260 <= ap_const_lv31_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_120_fu_611_p2 = ap_const_lv1_0))) then 
                i5_reg_260 <= i_2_reg_923;
            end if; 
        end if;
    end process;

    i_op_assign_2_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_op_assign_2_reg_202 <= min_dist1_2_fu_565_p3;
            elsif (((tmp_119_fu_377_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_op_assign_2_reg_202 <= ap_const_lv32_7FFFFFFF;
            end if; 
        end if;
    end process;

    i_op_assign_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_op_assign_reg_284 <= min_dist18_2_fu_772_p3;
            elsif (((tmp_s_fu_584_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_op_assign_reg_284 <= ap_const_lv32_7FFFFFFF;
            end if; 
        end if;
    end process;

    i_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (tmp_fu_358_p2 = ap_const_lv1_0))) then 
                i_reg_178 <= ap_const_lv31_0;
            elsif (((tmp_121_fu_404_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_178 <= i_3_reg_842;
            end if; 
        end if;
    end process;

    k2_reg_331_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_fu_686_p2 = ap_const_lv1_0))) then 
                k2_reg_331 <= k_2_fu_692_p2;
            elsif (((tmp_120_fu_611_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                k2_reg_331 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    k_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond7_fu_479_p2 = ap_const_lv1_0))) then 
                k_reg_249 <= k_3_fu_485_p2;
            elsif (((tmp_121_fu_404_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_reg_249 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    min_dist1_3_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond7_reg_874 = ap_const_lv1_0))) then 
                min_dist1_3_reg_237 <= grp_fu_787_p3;
            elsif (((tmp_121_fu_404_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                min_dist1_3_reg_237 <= ap_const_lv24_0;
            end if; 
        end if;
    end process;

    min_dist1_4_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                min_dist1_4_reg_272 <= min_dist07_1_fu_764_p3;
            elsif (((tmp_s_fu_584_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                min_dist1_4_reg_272 <= ap_const_lv32_7FFFFFFF;
            end if; 
        end if;
    end process;

    min_dist1_5_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_reg_955 = ap_const_lv1_0))) then 
                min_dist1_5_reg_319 <= grp_fu_795_p3;
            elsif (((tmp_120_fu_611_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                min_dist1_5_reg_319 <= ap_const_lv24_0;
            end if; 
        end if;
    end process;

    min_dist1_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                min_dist1_reg_190 <= min_dist0_1_fu_557_p3;
            elsif (((tmp_119_fu_377_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                min_dist1_reg_190 <= ap_const_lv32_7FFFFFFF;
            end if; 
        end if;
    end process;

    min_idx1_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                min_idx1_reg_214 <= min_idx_1_fu_573_p3;
            elsif (((tmp_119_fu_377_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                min_idx1_reg_214 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    min_idx9_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                min_idx9_reg_296 <= min_idx9_1_fu_780_p3;
            elsif (((tmp_s_fu_584_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                min_idx9_reg_296 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    min_idx_2_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                min_idx_2_reg_226 <= j_1_reg_861;
            elsif (((tmp_119_fu_377_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                min_idx_2_reg_226 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    min_idx_reg_308_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                min_idx_reg_308 <= j_reg_942;
            elsif (((tmp_s_fu_584_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                min_idx_reg_308 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    vector_length_read_a_1_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_124_fu_655_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_120_fu_611_p2 = ap_const_lv1_0))) then 
                vector_length_read_a_1_fu_66 <= vector_length_write_1_fu_671_p2;
            elsif (((tmp_121_fu_404_p2 = ap_const_lv1_0) and (tmp_127_fu_448_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                vector_length_read_a_1_fu_66 <= vector_length_write_s_fu_464_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                vector_length_read_a_1_fu_66 <= matches_length_read_s_fu_354_p1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                OP1_V_reg_818 <= OP1_V_fu_364_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond7_reg_874 <= exitcond7_fu_479_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                exitcond_reg_955 <= exitcond_fu_686_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_2_reg_923 <= i_2_fu_589_p2;
                vector_length_read_a_2_reg_913 <= vector_length_read_a_1_fu_66;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_3_reg_842 <= i_3_fu_382_p2;
                vector_length_read_a_reg_832 <= vector_length_read_a_1_fu_66;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_861 <= j_1_fu_409_p2;
                    min_idx_2_cast_reg_852(30 downto 0) <= min_idx_2_cast_fu_400_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                j_reg_942 <= j_fu_616_p2;
                    min_idx_cast_reg_933(30 downto 0) <= min_idx_cast_fu_607_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((tmp_119_fu_377_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_s_fu_584_p2 = ap_const_lv1_0)))) then
                matches_length_4_reg_342 <= vector_length_read_a_1_fu_66;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_584_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    tmp_124_cast_reg_928(16 downto 7) <= tmp_124_cast_fu_599_p3(16 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_119_fu_377_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_126_cast_reg_847(16 downto 7) <= tmp_126_cast_fu_392_p3(16 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_120_fu_611_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    tmp_129_cast_reg_947(16 downto 7) <= tmp_129_cast_fu_626_p3(16 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_121_fu_404_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_134_cast_reg_866(16 downto 7) <= tmp_134_cast_fu_419_p3(16 downto 7);
            end if;
        end if;
    end process;
    tmp_126_cast_reg_847(6 downto 0) <= "0000000";
    min_idx_2_cast_reg_852(31) <= '0';
    tmp_134_cast_reg_866(6 downto 0) <= "0000000";
    tmp_124_cast_reg_928(6 downto 0) <= "0000000";
    min_idx_cast_reg_933(31) <= '0';
    tmp_129_cast_reg_947(6 downto 0) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_119_fu_377_p2, ap_CS_fsm_state3, tmp_121_fu_404_p2, exitcond7_fu_479_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state7, tmp_s_fu_584_p2, ap_CS_fsm_state8, tmp_120_fu_611_p2, exitcond_fu_686_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, tmp_fu_358_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((tmp_fu_358_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (tmp_fu_358_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_119_fu_377_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_121_fu_404_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((exitcond7_fu_479_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((exitcond7_fu_479_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_s_fu_584_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_120_fu_611_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((exitcond_fu_686_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((exitcond_fu_686_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
        OP1_V_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(thresh_V),64));

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(8);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(exitcond7_fu_479_p2)
    begin
        if ((exitcond7_fu_479_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state9_assign_proc : process(exitcond_fu_686_p2)
    begin
        if ((exitcond_fu_686_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(matches_length_4_reg_342, ap_return_preg, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_return <= matches_length_4_reg_342;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

        delta_1_cast_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(delta_1_fu_523_p2),18));

    delta_1_fu_523_p2 <= std_logic_vector(unsigned(tmp_250_cast_fu_515_p1) - unsigned(tmp_251_cast_fu_519_p1));
        delta_cast_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(delta_fu_730_p2),18));

    delta_fu_730_p2 <= std_logic_vector(unsigned(tmp_245_cast_fu_722_p1) - unsigned(tmp_246_cast_fu_726_p1));

    descriptors0_val_val_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0, ap_block_pp1_stage0, tmp_149_cast_fu_500_p1, tmp_142_cast_fu_707_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            descriptors0_val_val_address0 <= tmp_142_cast_fu_707_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            descriptors0_val_val_address0 <= tmp_149_cast_fu_500_p1(16 - 1 downto 0);
        else 
            descriptors0_val_val_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    descriptors0_val_val_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            descriptors0_val_val_ce0 <= ap_const_logic_1;
        else 
            descriptors0_val_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    descriptors1_val_val_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0, ap_block_pp1_stage0, tmp_150_cast_fu_510_p1, tmp_143_cast_fu_717_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            descriptors1_val_val_address0 <= tmp_143_cast_fu_717_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            descriptors1_val_val_address0 <= tmp_150_cast_fu_510_p1(16 - 1 downto 0);
        else 
            descriptors1_val_val_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    descriptors1_val_val_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            descriptors1_val_val_ce0 <= ap_const_logic_1;
        else 
            descriptors1_val_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dist12_0_s_fu_756_p3 <= 
        min_dist1_5_cast_fu_740_p1 when (tmp_129_fu_750_p2(0) = '1') else 
        i_op_assign_reg_284;
    dist_0_s_fu_549_p3 <= 
        min_dist1_3_cast_fu_533_p1 when (tmp_135_fu_543_p2(0) = '1') else 
        i_op_assign_2_reg_202;
    exitcond7_fu_479_p2 <= "1" when (k_reg_249 = ap_const_lv8_80) else "0";
    exitcond_fu_686_p2 <= "1" when (k2_reg_331 = ap_const_lv8_80) else "0";
    grp_fu_787_p0 <= delta_1_cast_fu_529_p1(9 - 1 downto 0);
    grp_fu_787_p1 <= delta_1_cast_fu_529_p1(9 - 1 downto 0);
    grp_fu_795_p0 <= delta_cast_fu_736_p1(9 - 1 downto 0);
    grp_fu_795_p1 <= delta_cast_fu_736_p1(9 - 1 downto 0);
    i5_cast_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i5_reg_260),32));
    i_2_fu_589_p2 <= std_logic_vector(unsigned(i5_reg_260) + unsigned(ap_const_lv31_1));
    i_3_fu_382_p2 <= std_logic_vector(unsigned(i_reg_178) + unsigned(ap_const_lv31_1));
    i_cast_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_178),32));
    j_1_fu_409_p2 <= std_logic_vector(unsigned(min_idx_2_reg_226) + unsigned(ap_const_lv31_1));
    j_fu_616_p2 <= std_logic_vector(unsigned(min_idx_reg_308) + unsigned(ap_const_lv31_1));
    k_2_fu_692_p2 <= std_logic_vector(unsigned(k2_reg_331) + unsigned(ap_const_lv8_1));
    k_3_fu_485_p2 <= std_logic_vector(unsigned(k_reg_249) + unsigned(ap_const_lv8_1));
    matches_length_read_s_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(matches_length_read),32));

    matches_val_idx0_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, tmp_i_fu_469_p1, tmp_i8_fu_676_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matches_val_idx0_address0 <= tmp_i8_fu_676_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            matches_val_idx0_address0 <= tmp_i_fu_469_p1(9 - 1 downto 0);
        else 
            matches_val_idx0_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    matches_val_idx0_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            matches_val_idx0_ce0 <= ap_const_logic_1;
        else 
            matches_val_idx0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matches_val_idx0_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, p_match_idx0_1_fu_454_p1, p_match_idx0_fu_666_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matches_val_idx0_d0 <= p_match_idx0_fu_666_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            matches_val_idx0_d0 <= p_match_idx0_1_fu_454_p1;
        else 
            matches_val_idx0_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    matches_val_idx0_we0_assign_proc : process(ap_CS_fsm_state3, tmp_121_fu_404_p2, ap_CS_fsm_state8, tmp_120_fu_611_p2, tmp_127_fu_448_p2, tmp_124_fu_655_p2)
    begin
        if ((((tmp_121_fu_404_p2 = ap_const_lv1_0) and (tmp_127_fu_448_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((tmp_124_fu_655_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_120_fu_611_p2 = ap_const_lv1_0)))) then 
            matches_val_idx0_we0 <= ap_const_logic_1;
        else 
            matches_val_idx0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matches_val_idx1_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, tmp_i_fu_469_p1, tmp_i8_fu_676_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matches_val_idx1_address0 <= tmp_i8_fu_676_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            matches_val_idx1_address0 <= tmp_i_fu_469_p1(9 - 1 downto 0);
        else 
            matches_val_idx1_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    matches_val_idx1_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            matches_val_idx1_ce0 <= ap_const_logic_1;
        else 
            matches_val_idx1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matches_val_idx1_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, p_match_idx1_1_fu_459_p1, p_match_idx1_fu_661_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matches_val_idx1_d0 <= p_match_idx1_fu_661_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            matches_val_idx1_d0 <= p_match_idx1_1_fu_459_p1;
        else 
            matches_val_idx1_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    matches_val_idx1_we0_assign_proc : process(ap_CS_fsm_state3, tmp_121_fu_404_p2, ap_CS_fsm_state8, tmp_120_fu_611_p2, tmp_127_fu_448_p2, tmp_124_fu_655_p2)
    begin
        if ((((tmp_121_fu_404_p2 = ap_const_lv1_0) and (tmp_127_fu_448_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((tmp_124_fu_655_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_120_fu_611_p2 = ap_const_lv1_0)))) then 
            matches_val_idx1_we0 <= ap_const_logic_1;
        else 
            matches_val_idx1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    min_dist07_1_fu_764_p3 <= 
        min_dist1_5_cast_fu_740_p1 when (tmp_128_fu_744_p2(0) = '1') else 
        min_dist1_4_reg_272;
    min_dist0_1_fu_557_p3 <= 
        min_dist1_3_cast_fu_533_p1 when (tmp_134_fu_537_p2(0) = '1') else 
        min_dist1_reg_190;
    min_dist18_2_fu_772_p3 <= 
        min_dist1_4_reg_272 when (tmp_128_fu_744_p2(0) = '1') else 
        dist12_0_s_fu_756_p3;
    min_dist1_2_fu_565_p3 <= 
        min_dist1_reg_190 when (tmp_134_fu_537_p2(0) = '1') else 
        dist_0_s_fu_549_p3;
        min_dist1_3_cast_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(min_dist1_3_reg_237),32));

        min_dist1_5_cast_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(min_dist1_5_reg_319),32));

    min_idx9_1_fu_780_p3 <= 
        min_idx_cast_reg_933 when (tmp_128_fu_744_p2(0) = '1') else 
        min_idx9_reg_296;
    min_idx_1_fu_573_p3 <= 
        min_idx_2_cast_reg_852 when (tmp_134_fu_537_p2(0) = '1') else 
        min_idx1_reg_214;
    min_idx_2_cast_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(min_idx_2_reg_226),32));
    min_idx_cast_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(min_idx_reg_308),32));
    p_match_idx0_1_fu_454_p1 <= i_reg_178(16 - 1 downto 0);
    p_match_idx0_fu_666_p1 <= min_idx9_reg_296(16 - 1 downto 0);
    p_match_idx1_1_fu_459_p1 <= min_idx1_reg_214(16 - 1 downto 0);
    p_match_idx1_fu_661_p1 <= i5_reg_260(16 - 1 downto 0);
    r_V_2_fu_431_p0 <= OP1_V_reg_818(32 - 1 downto 0);
    r_V_2_fu_431_p1 <= i_op_assign_2_reg_202;
    r_V_2_fu_431_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_2_fu_431_p0) * signed(r_V_2_fu_431_p1))), 64));
    r_V_fu_638_p0 <= OP1_V_reg_818(32 - 1 downto 0);
    r_V_fu_638_p1 <= i_op_assign_reg_284;
    r_V_fu_638_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_fu_638_p0) * signed(r_V_fu_638_p1))), 64));
    tmp_119_fu_377_p2 <= "1" when (signed(i_cast_fu_373_p1) < signed(descriptors0_length_read)) else "0";
    tmp_120_fu_611_p2 <= "1" when (signed(min_idx_cast_fu_607_p1) < signed(descriptors0_length_read)) else "0";
    tmp_121_fu_404_p2 <= "1" when (signed(min_idx_2_cast_fu_400_p1) < signed(descriptors1_length_read)) else "0";
    tmp_122_fu_643_p3 <= (min_dist1_4_reg_272 & ap_const_lv16_0);
        tmp_123_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_122_fu_643_p3),64));

    tmp_124_cast_fu_599_p3 <= (tmp_154_fu_595_p1 & ap_const_lv7_0);
    tmp_124_fu_655_p2 <= "1" when (signed(tmp_123_fu_651_p1) < signed(r_V_fu_638_p2)) else "0";
    tmp_125_fu_436_p3 <= (min_dist1_reg_190 & ap_const_lv16_0);
    tmp_126_cast_fu_392_p3 <= (tmp_155_fu_388_p1 & ap_const_lv7_0);
        tmp_126_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_125_fu_436_p3),64));

    tmp_127_fu_448_p2 <= "1" when (signed(tmp_126_fu_444_p1) < signed(r_V_2_fu_431_p2)) else "0";
    tmp_128_fu_744_p2 <= "1" when (signed(min_dist1_5_cast_fu_740_p1) < signed(min_dist1_4_reg_272)) else "0";
    tmp_129_cast_fu_626_p3 <= (tmp_156_fu_622_p1 & ap_const_lv7_0);
    tmp_129_fu_750_p2 <= "1" when (signed(min_dist1_5_cast_fu_740_p1) < signed(i_op_assign_reg_284)) else "0";
    tmp_131_fu_702_p2 <= std_logic_vector(unsigned(tmp_129_cast_reg_947) + unsigned(tmp_141_cast_fu_698_p1));
    tmp_132_fu_712_p2 <= std_logic_vector(unsigned(tmp_124_cast_reg_928) + unsigned(tmp_141_cast_fu_698_p1));
    tmp_134_cast_fu_419_p3 <= (tmp_157_fu_415_p1 & ap_const_lv7_0);
    tmp_134_fu_537_p2 <= "1" when (signed(min_dist1_3_cast_fu_533_p1) < signed(min_dist1_reg_190)) else "0";
    tmp_135_fu_543_p2 <= "1" when (signed(min_dist1_3_cast_fu_533_p1) < signed(i_op_assign_2_reg_202)) else "0";
    tmp_137_fu_495_p2 <= std_logic_vector(unsigned(tmp_126_cast_reg_847) + unsigned(tmp_148_cast_fu_491_p1));
    tmp_138_fu_505_p2 <= std_logic_vector(unsigned(tmp_134_cast_reg_866) + unsigned(tmp_148_cast_fu_491_p1));
    tmp_141_cast_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k2_reg_331),17));
    tmp_142_cast_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_131_fu_702_p2),64));
    tmp_143_cast_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_132_fu_712_p2),64));
    tmp_148_cast_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_249),17));
    tmp_149_cast_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_137_fu_495_p2),64));
    tmp_150_cast_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_138_fu_505_p2),64));
    tmp_154_fu_595_p1 <= i5_reg_260(10 - 1 downto 0);
    tmp_155_fu_388_p1 <= i_reg_178(10 - 1 downto 0);
    tmp_156_fu_622_p1 <= min_idx_reg_308(10 - 1 downto 0);
    tmp_157_fu_415_p1 <= min_idx_2_reg_226(10 - 1 downto 0);
    tmp_245_cast_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(descriptors1_val_val_q0),9));
    tmp_246_cast_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(descriptors0_val_val_q0),9));
    tmp_250_cast_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(descriptors0_val_val_q0),9));
    tmp_251_cast_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(descriptors1_val_val_q0),9));
    tmp_fu_358_p2 <= "1" when (signed(descriptors0_length_read) > signed(descriptors1_length_read)) else "0";
        tmp_i8_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(vector_length_read_a_2_reg_913),64));

        tmp_i_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(vector_length_read_a_reg_832),64));

    tmp_s_fu_584_p2 <= "1" when (signed(i5_cast_fu_580_p1) < signed(descriptors1_length_read)) else "0";
    vector_length_write_1_fu_671_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(vector_length_read_a_2_reg_913));
    vector_length_write_s_fu_464_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(vector_length_read_a_reg_832));
end behav;
