// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Array2D2Mat_1 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        arr_val_address0,
        arr_val_ce0,
        arr_val_q0,
        mat_data_stream_V_din,
        mat_data_stream_V_full_n,
        mat_data_stream_V_write,
        mat_rows_V_din,
        mat_rows_V_full_n,
        mat_rows_V_write,
        mat_cols_V_din,
        mat_cols_V_full_n,
        mat_cols_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output  [10:0] arr_val_address0;
output   arr_val_ce0;
input  [7:0] arr_val_q0;
output  [7:0] mat_data_stream_V_din;
input   mat_data_stream_V_full_n;
output   mat_data_stream_V_write;
output  [5:0] mat_rows_V_din;
input   mat_rows_V_full_n;
output   mat_rows_V_write;
output  [8:0] mat_cols_V_din;
input   mat_cols_V_full_n;
output   mat_cols_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg arr_val_ce0;
reg mat_data_stream_V_write;
reg mat_rows_V_write;
reg mat_cols_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    mat_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_191;
reg    mat_rows_V_blk_n;
reg    mat_cols_V_blk_n;
reg   [7:0] j_i_reg_116;
wire   [0:0] exitcond1_fu_127_p2;
wire    ap_CS_fsm_state2;
wire   [4:0] i_fu_133_p2;
reg   [4:0] i_reg_181;
wire   [12:0] tmp_408_cast_fu_147_p1;
reg   [12:0] tmp_408_cast_reg_186;
wire   [0:0] exitcond_fu_151_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [7:0] j_fu_157_p2;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [4:0] i_i_reg_105;
reg    ap_block_state1;
wire    ap_CS_fsm_state5;
wire   [63:0] tmp_409_cast_fu_172_p1;
reg    ap_block_pp0_stage0_01001;
wire   [11:0] tmp_407_fu_139_p3;
wire   [12:0] tmp_1684_i_cast_fu_163_p1;
wire   [12:0] tmp_409_fu_167_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond1_fu_127_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond1_fu_127_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((exitcond1_fu_127_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_i_reg_105 <= i_reg_181;
    end else if ((~((mat_cols_V_full_n == 1'b0) | (mat_rows_V_full_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_i_reg_105 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_127_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_i_reg_116 <= 8'd0;
    end else if (((exitcond_fu_151_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_i_reg_116 <= j_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_reg_191 <= exitcond_fu_151_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_181 <= i_fu_133_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_127_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_408_cast_reg_186[11 : 7] <= tmp_408_cast_fu_147_p1[11 : 7];
    end
end

always @ (*) begin
    if ((exitcond_fu_151_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_127_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        arr_val_ce0 = 1'b1;
    end else begin
        arr_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_127_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mat_cols_V_blk_n = mat_cols_V_full_n;
    end else begin
        mat_cols_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((mat_cols_V_full_n == 1'b0) | (mat_rows_V_full_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mat_cols_V_write = 1'b1;
    end else begin
        mat_cols_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_191 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mat_data_stream_V_blk_n = mat_data_stream_V_full_n;
    end else begin
        mat_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_191 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mat_data_stream_V_write = 1'b1;
    end else begin
        mat_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mat_rows_V_blk_n = mat_rows_V_full_n;
    end else begin
        mat_rows_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((mat_cols_V_full_n == 1'b0) | (mat_rows_V_full_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mat_rows_V_write = 1'b1;
    end else begin
        mat_rows_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((mat_cols_V_full_n == 1'b0) | (mat_rows_V_full_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_127_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((exitcond_fu_151_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((exitcond_fu_151_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((exitcond_reg_191 == 1'd0) & (mat_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((exitcond_reg_191 == 1'd0) & (mat_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((exitcond_reg_191 == 1'd0) & (mat_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((mat_cols_V_full_n == 1'b0) | (mat_rows_V_full_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((exitcond_reg_191 == 1'd0) & (mat_data_stream_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign arr_val_address0 = tmp_409_cast_fu_172_p1;

assign exitcond1_fu_127_p2 = ((i_i_reg_105 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond_fu_151_p2 = ((j_i_reg_116 == 8'd128) ? 1'b1 : 1'b0);

assign i_fu_133_p2 = (i_i_reg_105 + 5'd1);

assign j_fu_157_p2 = (j_i_reg_116 + 8'd1);

assign mat_cols_V_din = 9'd128;

assign mat_data_stream_V_din = arr_val_q0;

assign mat_rows_V_din = 6'd16;

assign start_out = real_start;

assign tmp_1684_i_cast_fu_163_p1 = j_i_reg_116;

assign tmp_407_fu_139_p3 = {{i_i_reg_105}, {7'd0}};

assign tmp_408_cast_fu_147_p1 = tmp_407_fu_139_p3;

assign tmp_409_cast_fu_172_p1 = tmp_409_fu_167_p2;

assign tmp_409_fu_167_p2 = (tmp_408_cast_reg_186 + tmp_1684_i_cast_fu_163_p1);

always @ (posedge ap_clk) begin
    tmp_408_cast_reg_186[6:0] <= 7'b0000000;
    tmp_408_cast_reg_186[12] <= 1'b0;
end

endmodule //Array2D2Mat_1
