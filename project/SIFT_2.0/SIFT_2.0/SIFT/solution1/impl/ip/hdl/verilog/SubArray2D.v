// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module SubArray2D (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        src0_1_val_V_address0,
        src0_1_val_V_ce0,
        src0_1_val_V_q0,
        src0_2_val_V_address0,
        src0_2_val_V_ce0,
        src0_2_val_V_q0,
        src0_3_val_V_address0,
        src0_3_val_V_ce0,
        src0_3_val_V_q0,
        src0_4_val_V_address0,
        src0_4_val_V_ce0,
        src0_4_val_V_q0,
        src0_5_val_V_address0,
        src0_5_val_V_ce0,
        src0_5_val_V_q0,
        src0_val_V_offset,
        src0_rows_read,
        src0_cols_read,
        src1_0_val_V_address0,
        src1_0_val_V_ce0,
        src1_0_val_V_q0,
        src1_val_V_offset,
        dst_0_val_V_address0,
        dst_0_val_V_ce0,
        dst_0_val_V_we0,
        dst_0_val_V_d0,
        dst_1_val_V_address0,
        dst_1_val_V_ce0,
        dst_1_val_V_we0,
        dst_1_val_V_d0,
        dst_2_val_V_address0,
        dst_2_val_V_ce0,
        dst_2_val_V_we0,
        dst_2_val_V_d0,
        dst_3_val_V_address0,
        dst_3_val_V_ce0,
        dst_3_val_V_we0,
        dst_3_val_V_d0,
        dst_4_val_V_address0,
        dst_4_val_V_ce0,
        dst_4_val_V_we0,
        dst_4_val_V_d0,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] src0_1_val_V_address0;
output   src0_1_val_V_ce0;
input  [25:0] src0_1_val_V_q0;
output  [15:0] src0_2_val_V_address0;
output   src0_2_val_V_ce0;
input  [25:0] src0_2_val_V_q0;
output  [15:0] src0_3_val_V_address0;
output   src0_3_val_V_ce0;
input  [25:0] src0_3_val_V_q0;
output  [15:0] src0_4_val_V_address0;
output   src0_4_val_V_ce0;
input  [25:0] src0_4_val_V_q0;
output  [15:0] src0_5_val_V_address0;
output   src0_5_val_V_ce0;
input  [25:0] src0_5_val_V_q0;
input  [2:0] src0_val_V_offset;
input  [31:0] src0_rows_read;
input  [31:0] src0_cols_read;
output  [15:0] src1_0_val_V_address0;
output   src1_0_val_V_ce0;
input  [31:0] src1_0_val_V_q0;
input  [2:0] src1_val_V_offset;
output  [15:0] dst_0_val_V_address0;
output   dst_0_val_V_ce0;
output   dst_0_val_V_we0;
output  [31:0] dst_0_val_V_d0;
output  [15:0] dst_1_val_V_address0;
output   dst_1_val_V_ce0;
output   dst_1_val_V_we0;
output  [31:0] dst_1_val_V_d0;
output  [15:0] dst_2_val_V_address0;
output   dst_2_val_V_ce0;
output   dst_2_val_V_we0;
output  [31:0] dst_2_val_V_d0;
output  [15:0] dst_3_val_V_address0;
output   dst_3_val_V_ce0;
output   dst_3_val_V_we0;
output  [31:0] dst_3_val_V_d0;
output  [15:0] dst_4_val_V_address0;
output   dst_4_val_V_ce0;
output   dst_4_val_V_we0;
output  [31:0] dst_4_val_V_d0;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src0_1_val_V_ce0;
reg src0_2_val_V_ce0;
reg src0_3_val_V_ce0;
reg src0_4_val_V_ce0;
reg src0_5_val_V_ce0;
reg src1_0_val_V_ce0;
reg dst_0_val_V_ce0;
reg dst_0_val_V_we0;
reg dst_1_val_V_ce0;
reg dst_1_val_V_we0;
reg dst_2_val_V_ce0;
reg dst_2_val_V_we0;
reg dst_3_val_V_ce0;
reg dst_3_val_V_we0;
reg dst_4_val_V_ce0;
reg dst_4_val_V_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [30:0] j_reg_254;
wire   [2:0] src1_val_V_offset_re_read_fu_76_p2;
wire   [0:0] tmp_s_fu_269_p2;
wire    ap_CS_fsm_state2;
wire   [30:0] i_21_fu_274_p2;
reg   [30:0] i_21_reg_427;
wire   [17:0] tmp_336_cast_fu_284_p3;
reg   [17:0] tmp_336_cast_reg_432;
wire   [0:0] tmp_818_fu_306_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [30:0] j_7_fu_311_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] tmp_337_cast_fu_326_p1;
reg   [63:0] tmp_337_cast_reg_446;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg   [30:0] i_reg_243;
wire    ap_CS_fsm_state5;
wire    ap_block_pp0_stage0;
wire   [31:0] p_Val2_s_872_fu_390_p2;
wire   [31:0] i_cast_fu_265_p1;
wire   [9:0] tmp_1644_fu_280_p1;
wire   [31:0] j_cast_fu_302_p1;
wire   [17:0] tmp_1645_fu_317_p1;
wire   [17:0] tmp_337_fu_321_p2;
wire  signed [31:0] extLd_fu_336_p1;
wire  signed [31:0] extLd39_fu_340_p1;
wire  signed [31:0] extLd40_fu_344_p1;
wire  signed [31:0] extLd41_fu_348_p1;
wire  signed [31:0] p_Val2_s_fu_356_p6;
wire   [31:0] p_Val2_s_fu_356_p8;
wire   [31:0] p_Val2_191_fu_373_p8;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

SIFT2_Core_mux_63VhK_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
SIFT2_Core_mux_63VhK_x_U755(
    .din0(32'd0),
    .din1(extLd_fu_336_p1),
    .din2(extLd39_fu_340_p1),
    .din3(extLd40_fu_344_p1),
    .din4(extLd41_fu_348_p1),
    .din5(p_Val2_s_fu_356_p6),
    .din6(src0_val_V_offset),
    .dout(p_Val2_s_fu_356_p8)
);

SIFT2_Core_mux_63VhK #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
SIFT2_Core_mux_63VhK_U756(
    .din0(src1_0_val_V_q0),
    .din1(extLd_fu_336_p1),
    .din2(extLd39_fu_340_p1),
    .din3(extLd40_fu_344_p1),
    .din4(extLd41_fu_348_p1),
    .din5(32'd0),
    .din6(src1_val_V_offset),
    .dout(p_Val2_191_fu_373_p8)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_269_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_269_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_243 <= i_21_reg_427;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_243 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_269_p2 == 1'd1))) begin
        j_reg_254 <= 31'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_818_fu_306_p2 == 1'd1))) begin
        j_reg_254 <= j_7_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_21_reg_427 <= i_21_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_269_p2 == 1'd1))) begin
        tmp_336_cast_reg_432[17 : 8] <= tmp_336_cast_fu_284_p3[17 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_818_fu_306_p2 == 1'd1))) begin
        tmp_337_cast_reg_446[17 : 0] <= tmp_337_cast_fu_326_p1[17 : 0];
    end
end

always @ (*) begin
    if ((tmp_818_fu_306_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_269_p2 == 1'd0)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_269_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_0_val_V_ce0 = 1'b1;
    end else begin
        dst_0_val_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (src1_val_V_offset_re_read_fu_76_p2 == 3'd0))) begin
        dst_0_val_V_we0 = 1'b1;
    end else begin
        dst_0_val_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_1_val_V_ce0 = 1'b1;
    end else begin
        dst_1_val_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (src1_val_V_offset_re_read_fu_76_p2 == 3'd1))) begin
        dst_1_val_V_we0 = 1'b1;
    end else begin
        dst_1_val_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_2_val_V_ce0 = 1'b1;
    end else begin
        dst_2_val_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (src1_val_V_offset_re_read_fu_76_p2 == 3'd2))) begin
        dst_2_val_V_we0 = 1'b1;
    end else begin
        dst_2_val_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_3_val_V_ce0 = 1'b1;
    end else begin
        dst_3_val_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (src1_val_V_offset_re_read_fu_76_p2 == 3'd3))) begin
        dst_3_val_V_we0 = 1'b1;
    end else begin
        dst_3_val_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_4_val_V_ce0 = 1'b1;
    end else begin
        dst_4_val_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(src1_val_V_offset_re_read_fu_76_p2 == 3'd0) & ~(src1_val_V_offset_re_read_fu_76_p2 == 3'd1) & ~(src1_val_V_offset_re_read_fu_76_p2 == 3'd2) & ~(src1_val_V_offset_re_read_fu_76_p2 == 3'd3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_4_val_V_we0 = 1'b1;
    end else begin
        dst_4_val_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src0_1_val_V_ce0 = 1'b1;
    end else begin
        src0_1_val_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src0_2_val_V_ce0 = 1'b1;
    end else begin
        src0_2_val_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src0_3_val_V_ce0 = 1'b1;
    end else begin
        src0_3_val_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src0_4_val_V_ce0 = 1'b1;
    end else begin
        src0_4_val_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src0_5_val_V_ce0 = 1'b1;
    end else begin
        src0_5_val_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src1_0_val_V_ce0 = 1'b1;
    end else begin
        src1_0_val_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_269_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (tmp_818_fu_306_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (tmp_818_fu_306_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return_0 = src0_rows_read;

assign ap_return_1 = src0_cols_read;

assign dst_0_val_V_address0 = tmp_337_cast_reg_446;

assign dst_0_val_V_d0 = p_Val2_s_872_fu_390_p2;

assign dst_1_val_V_address0 = tmp_337_cast_reg_446;

assign dst_1_val_V_d0 = p_Val2_s_872_fu_390_p2;

assign dst_2_val_V_address0 = tmp_337_cast_reg_446;

assign dst_2_val_V_d0 = p_Val2_s_872_fu_390_p2;

assign dst_3_val_V_address0 = tmp_337_cast_reg_446;

assign dst_3_val_V_d0 = p_Val2_s_872_fu_390_p2;

assign dst_4_val_V_address0 = tmp_337_cast_reg_446;

assign dst_4_val_V_d0 = p_Val2_s_872_fu_390_p2;

assign extLd39_fu_340_p1 = $signed(src0_2_val_V_q0);

assign extLd40_fu_344_p1 = $signed(src0_3_val_V_q0);

assign extLd41_fu_348_p1 = $signed(src0_4_val_V_q0);

assign extLd_fu_336_p1 = $signed(src0_1_val_V_q0);

assign i_21_fu_274_p2 = (i_reg_243 + 31'd1);

assign i_cast_fu_265_p1 = i_reg_243;

assign j_7_fu_311_p2 = (j_reg_254 + 31'd1);

assign j_cast_fu_302_p1 = j_reg_254;

assign p_Val2_s_872_fu_390_p2 = (p_Val2_s_fu_356_p8 - p_Val2_191_fu_373_p8);

assign p_Val2_s_fu_356_p6 = $signed(src0_5_val_V_q0);

assign src0_1_val_V_address0 = tmp_337_cast_fu_326_p1;

assign src0_2_val_V_address0 = tmp_337_cast_fu_326_p1;

assign src0_3_val_V_address0 = tmp_337_cast_fu_326_p1;

assign src0_4_val_V_address0 = tmp_337_cast_fu_326_p1;

assign src0_5_val_V_address0 = tmp_337_cast_fu_326_p1;

assign src1_0_val_V_address0 = tmp_337_cast_fu_326_p1;

assign src1_val_V_offset_re_read_fu_76_p2 = src1_val_V_offset;

assign tmp_1644_fu_280_p1 = i_reg_243[9:0];

assign tmp_1645_fu_317_p1 = j_reg_254[17:0];

assign tmp_336_cast_fu_284_p3 = {{tmp_1644_fu_280_p1}, {8'd0}};

assign tmp_337_cast_fu_326_p1 = tmp_337_fu_321_p2;

assign tmp_337_fu_321_p2 = (tmp_336_cast_reg_432 + tmp_1645_fu_317_p1);

assign tmp_818_fu_306_p2 = (($signed(j_cast_fu_302_p1) < $signed(src0_cols_read)) ? 1'b1 : 1'b0);

assign tmp_s_fu_269_p2 = (($signed(i_cast_fu_265_p1) < $signed(src0_rows_read)) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_336_cast_reg_432[7:0] <= 8'b00000000;
    tmp_337_cast_reg_446[63:18] <= 46'b0000000000000000000000000000000000000000000000;
end

endmodule //SubArray2D
