-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity HoughSortDescent is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sequence_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    sequence_ce0 : OUT STD_LOGIC;
    sequence_we0 : OUT STD_LOGIC;
    sequence_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sequence_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    num : IN STD_LOGIC_VECTOR (31 downto 0);
    data_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    data_ce0 : OUT STD_LOGIC;
    data_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of HoughSortDescent is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal maxvalue1_reg_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal maxindex_index_reg_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal maxindex_index_1_reg_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal maxindex_index_1_reg_118_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_s_fu_128_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_217 : STD_LOGIC_VECTOR (31 downto 0);
    signal maxindex_index_3_cas_fu_134_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal maxindex_index_3_cas_reg_222 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_143_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_reg_232 : STD_LOGIC_VECTOR (30 downto 0);
    signal sequence_addr_reg_237 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_8_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal index0_reg_242 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_2_fu_159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_257 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_257_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_169_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_reg_266 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal value_0_maxvalue_fu_186_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal j_0_maxindex_index_fu_194_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_286 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal sequence_addr_2_reg_290 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal maxindex_index_3_reg_87 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_phi_mux_maxindex_index_1_phi_fu_121_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_9_fu_149_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_154_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_164_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_175_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_207_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_1_fu_154_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state5);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    maxindex_index_1_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_reg_257 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                maxindex_index_1_reg_118 <= j_1_reg_266;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                maxindex_index_1_reg_118 <= maxindex_index_3_cas_reg_222;
            end if; 
        end if;
    end process;

    maxindex_index_3_reg_87_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                maxindex_index_3_reg_87 <= i_reg_232;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                maxindex_index_3_reg_87 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    maxindex_index_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_reg_257_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                maxindex_index_reg_108 <= j_0_maxindex_index_fu_194_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                maxindex_index_reg_108 <= maxindex_index_3_cas_reg_222;
            end if; 
        end if;
    end process;

    maxvalue1_reg_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_reg_257_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                maxvalue1_reg_98 <= value_0_maxvalue_fu_186_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                maxvalue1_reg_98 <= data_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_232 <= i_fu_143_p2;
                    maxindex_index_3_cas_reg_222(30 downto 0) <= maxindex_index_3_cas_fu_134_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                index0_reg_242 <= sequence_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_159_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                j_1_reg_266 <= j_1_fu_169_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                maxindex_index_1_reg_118_pp0_iter1_reg <= maxindex_index_1_reg_118;
                tmp_2_reg_257 <= tmp_2_fu_159_p2;
                tmp_2_reg_257_pp0_iter1_reg <= tmp_2_reg_257;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_6_fu_202_p2 = ap_const_lv1_0))) then
                sequence_addr_2_reg_290 <= tmp_7_fu_207_p1(18 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_8_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                sequence_addr_reg_237 <= tmp_9_fu_149_p1(18 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_6_reg_286 <= tmp_6_fu_202_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                tmp_s_reg_217 <= tmp_s_fu_128_p2;
            end if;
        end if;
    end process;
    maxindex_index_3_cas_reg_222(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_8_fu_138_p2, tmp_2_fu_159_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, tmp_6_fu_202_p2, ap_CS_fsm_state8, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_8_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((tmp_2_fu_159_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((tmp_2_fu_159_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                if (((tmp_6_fu_202_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(7);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(tmp_2_fu_159_p2)
    begin
        if ((tmp_2_fu_159_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_8_fu_138_p2)
    begin
        if ((((tmp_8_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_maxindex_index_1_phi_fu_121_p4_assign_proc : process(maxindex_index_1_reg_118, ap_CS_fsm_pp0_stage0, tmp_2_reg_257, j_1_reg_266, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((tmp_2_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_maxindex_index_1_phi_fu_121_p4 <= j_1_reg_266;
        else 
            ap_phi_mux_maxindex_index_1_phi_fu_121_p4 <= maxindex_index_1_reg_118;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_8_fu_138_p2)
    begin
        if (((tmp_8_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    data_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_1_fu_154_p1, tmp_4_fu_175_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_address0 <= tmp_4_fu_175_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_address0 <= tmp_1_fu_154_p1(18 - 1 downto 0);
        else 
            data_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state3, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            data_ce0 <= ap_const_logic_1;
        else 
            data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_143_p2 <= std_logic_vector(unsigned(maxindex_index_3_reg_87) + unsigned(ap_const_lv31_1));
    j_0_maxindex_index_fu_194_p3 <= 
        maxindex_index_1_reg_118_pp0_iter1_reg when (tmp_5_fu_180_p2(0) = '1') else 
        maxindex_index_reg_108;
    j_1_fu_169_p2 <= std_logic_vector(signed(ap_phi_mux_maxindex_index_1_phi_fu_121_p4) + signed(ap_const_lv32_1));
    maxindex_index_3_cas_fu_134_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(maxindex_index_3_reg_87),32));

    sequence_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state2, sequence_addr_reg_237, ap_enable_reg_pp0_iter0, ap_CS_fsm_state8, sequence_addr_2_reg_290, ap_CS_fsm_state10, ap_block_pp0_stage0, tmp_9_fu_149_p1, tmp_3_fu_164_p1, tmp_7_fu_207_p1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sequence_address0 <= sequence_addr_2_reg_290;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sequence_address0 <= sequence_addr_reg_237;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sequence_address0 <= tmp_7_fu_207_p1(18 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            sequence_address0 <= tmp_3_fu_164_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sequence_address0 <= tmp_9_fu_149_p1(18 - 1 downto 0);
        else 
            sequence_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sequence_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            sequence_ce0 <= ap_const_logic_1;
        else 
            sequence_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sequence_d0_assign_proc : process(sequence_q0, index0_reg_242, ap_CS_fsm_state10, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sequence_d0 <= index0_reg_242;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sequence_d0 <= sequence_q0;
        else 
            sequence_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sequence_we0_assign_proc : process(tmp_6_reg_286, ap_CS_fsm_state10, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_6_reg_286 = ap_const_lv1_0)))) then 
            sequence_we0 <= ap_const_logic_1;
        else 
            sequence_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_154_p0 <= sequence_q0;
        tmp_1_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_154_p0),64));

    tmp_2_fu_159_p2 <= "1" when (signed(ap_phi_mux_maxindex_index_1_phi_fu_121_p4) < signed(num)) else "0";
        tmp_3_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_maxindex_index_1_phi_fu_121_p4),64));

        tmp_4_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sequence_q0),64));

    tmp_5_fu_180_p2 <= "1" when (signed(data_q0) > signed(maxvalue1_reg_98)) else "0";
    tmp_6_fu_202_p2 <= "1" when (maxindex_index_reg_108 = maxindex_index_3_cas_reg_222) else "0";
        tmp_7_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(maxindex_index_reg_108),64));

    tmp_8_fu_138_p2 <= "1" when (signed(maxindex_index_3_cas_fu_134_p1) < signed(tmp_s_reg_217)) else "0";
    tmp_9_fu_149_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(maxindex_index_3_reg_87),64));
    tmp_s_fu_128_p2 <= std_logic_vector(unsigned(num) + unsigned(ap_const_lv32_FFFFFFFF));
    value_0_maxvalue_fu_186_p3 <= 
        data_q0 when (tmp_5_fu_180_p2(0) = '1') else 
        maxvalue1_reg_98;
end behav;
