// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module HoughSortDescent (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sequence_address0,
        sequence_ce0,
        sequence_we0,
        sequence_d0,
        sequence_q0,
        num,
        data_address0,
        data_ce0,
        data_q0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_pp0_stage0 = 8'd16;
parameter    ap_ST_fsm_state8 = 8'd32;
parameter    ap_ST_fsm_state9 = 8'd64;
parameter    ap_ST_fsm_state10 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [16:0] sequence_address0;
output   sequence_ce0;
output   sequence_we0;
output  [31:0] sequence_d0;
input  [31:0] sequence_q0;
input  [31:0] num;
output  [16:0] data_address0;
output   data_ce0;
input  [31:0] data_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[16:0] sequence_address0;
reg sequence_ce0;
reg sequence_we0;
reg[31:0] sequence_d0;
reg[16:0] data_address0;
reg data_ce0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] maxvalue1_reg_98;
reg  signed [31:0] maxindex_index1_reg_108;
reg   [31:0] j_0_in_reg_118;
wire   [31:0] tmp_s_fu_127_p2;
reg   [31:0] tmp_s_reg_215;
wire   [31:0] maxindex_index_cast_fu_133_p1;
reg   [31:0] maxindex_index_cast_reg_220;
wire    ap_CS_fsm_state2;
wire   [30:0] i_fu_142_p2;
reg   [30:0] i_reg_230;
reg   [16:0] sequence_addr_reg_235;
wire   [0:0] tmp_19_fu_137_p2;
reg  signed [31:0] index0_reg_240;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire  signed [31:0] maxindex_index_2_fu_158_p2;
reg  signed [31:0] maxindex_index_2_reg_255;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg  signed [31:0] maxindex_index_2_reg_255_pp0_iter1_reg;
wire   [0:0] tmp_22_fu_164_p2;
reg   [0:0] tmp_22_reg_261;
reg   [0:0] tmp_22_reg_261_pp0_iter1_reg;
wire   [31:0] value_0_maxvalue_fu_185_p3;
reg    ap_enable_reg_pp0_iter2;
wire   [31:0] j_0_maxindex_index_fu_193_p3;
wire   [0:0] tmp_26_fu_200_p2;
reg   [0:0] tmp_26_reg_285;
wire    ap_CS_fsm_state8;
reg   [16:0] sequence_addr_2_reg_289;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_enable_reg_pp0_iter1;
reg   [30:0] maxindex_index_reg_87;
wire    ap_CS_fsm_state10;
reg   [31:0] ap_phi_mux_j_0_in_phi_fu_121_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] tmp_20_fu_148_p1;
wire  signed [63:0] tmp_21_fu_153_p1;
wire  signed [63:0] tmp_23_fu_169_p1;
wire  signed [63:0] tmp_24_fu_174_p1;
wire  signed [63:0] tmp_27_fu_205_p1;
wire    ap_CS_fsm_state9;
wire  signed [31:0] tmp_21_fu_153_p0;
wire   [0:0] tmp_25_fu_179_p2;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state5)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_22_reg_261 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        j_0_in_reg_118 <= maxindex_index_2_reg_255;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_in_reg_118 <= maxindex_index_cast_reg_220;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_22_reg_261_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        maxindex_index1_reg_108 <= j_0_maxindex_index_fu_193_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        maxindex_index1_reg_108 <= maxindex_index_cast_reg_220;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        maxindex_index_reg_87 <= i_reg_230;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        maxindex_index_reg_87 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_22_reg_261_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        maxvalue1_reg_98 <= value_0_maxvalue_fu_185_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        maxvalue1_reg_98 <= data_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_230 <= i_fu_142_p2;
        maxindex_index_cast_reg_220[30 : 0] <= maxindex_index_cast_fu_133_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        index0_reg_240 <= sequence_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        maxindex_index_2_reg_255 <= maxindex_index_2_fu_158_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        maxindex_index_2_reg_255_pp0_iter1_reg <= maxindex_index_2_reg_255;
        tmp_22_reg_261 <= tmp_22_fu_164_p2;
        tmp_22_reg_261_pp0_iter1_reg <= tmp_22_reg_261;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_26_fu_200_p2 == 1'd0))) begin
        sequence_addr_2_reg_289 <= tmp_27_fu_205_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_19_fu_137_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        sequence_addr_reg_235 <= tmp_20_fu_148_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_26_reg_285 <= tmp_26_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_s_reg_215 <= tmp_s_fu_127_p2;
    end
end

always @ (*) begin
    if ((tmp_22_fu_164_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_19_fu_137_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_22_reg_261 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_j_0_in_phi_fu_121_p4 = maxindex_index_2_reg_255;
    end else begin
        ap_phi_mux_j_0_in_phi_fu_121_p4 = j_0_in_reg_118;
    end
end

always @ (*) begin
    if (((tmp_19_fu_137_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        data_address0 = tmp_24_fu_174_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        data_address0 = tmp_21_fu_153_p1;
    end else begin
        data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        data_ce0 = 1'b1;
    end else begin
        data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        sequence_address0 = sequence_addr_2_reg_289;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        sequence_address0 = sequence_addr_reg_235;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sequence_address0 = tmp_27_fu_205_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        sequence_address0 = tmp_23_fu_169_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sequence_address0 = tmp_20_fu_148_p1;
    end else begin
        sequence_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        sequence_ce0 = 1'b1;
    end else begin
        sequence_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        sequence_d0 = index0_reg_240;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        sequence_d0 = sequence_q0;
    end else begin
        sequence_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state10) & (tmp_26_reg_285 == 1'd0)))) begin
        sequence_we0 = 1'b1;
    end else begin
        sequence_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_19_fu_137_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (tmp_22_fu_164_p2 == 1'd0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (tmp_22_fu_164_p2 == 1'd0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((tmp_26_fu_200_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_fu_142_p2 = (maxindex_index_reg_87 + 31'd1);

assign j_0_maxindex_index_fu_193_p3 = ((tmp_25_fu_179_p2[0:0] === 1'b1) ? maxindex_index_2_reg_255_pp0_iter1_reg : maxindex_index1_reg_108);

assign maxindex_index_2_fu_158_p2 = (ap_phi_mux_j_0_in_phi_fu_121_p4 + 32'd1);

assign maxindex_index_cast_fu_133_p1 = maxindex_index_reg_87;

assign tmp_19_fu_137_p2 = (($signed(maxindex_index_cast_fu_133_p1) < $signed(tmp_s_reg_215)) ? 1'b1 : 1'b0);

assign tmp_20_fu_148_p1 = maxindex_index_reg_87;

assign tmp_21_fu_153_p0 = sequence_q0;

assign tmp_21_fu_153_p1 = tmp_21_fu_153_p0;

assign tmp_22_fu_164_p2 = (($signed(maxindex_index_2_fu_158_p2) < $signed(num)) ? 1'b1 : 1'b0);

assign tmp_23_fu_169_p1 = maxindex_index_2_fu_158_p2;

assign tmp_24_fu_174_p1 = $signed(sequence_q0);

assign tmp_25_fu_179_p2 = (($signed(data_q0) > $signed(maxvalue1_reg_98)) ? 1'b1 : 1'b0);

assign tmp_26_fu_200_p2 = ((maxindex_index1_reg_108 == maxindex_index_cast_reg_220) ? 1'b1 : 1'b0);

assign tmp_27_fu_205_p1 = maxindex_index1_reg_108;

assign tmp_s_fu_127_p2 = ($signed(num) + $signed(32'd4294967295));

assign value_0_maxvalue_fu_185_p3 = ((tmp_25_fu_179_p2[0:0] === 1'b1) ? data_q0 : maxvalue1_reg_98);

always @ (posedge ap_clk) begin
    maxindex_index_cast_reg_220[31] <= 1'b0;
end

endmodule //HoughSortDescent
