-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Edge_r is
port (
    src_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    src_rows_V_empty_n : IN STD_LOGIC;
    src_rows_V_read : OUT STD_LOGIC;
    src_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    src_cols_V_empty_n : IN STD_LOGIC;
    src_cols_V_read : OUT STD_LOGIC;
    src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_V_empty_n : IN STD_LOGIC;
    src_data_stream_V_read : OUT STD_LOGIC;
    dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_V_full_n : IN STD_LOGIC;
    dst_data_stream_V_write : OUT STD_LOGIC;
    dx_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    dx_data_stream_V_full_n : IN STD_LOGIC;
    dx_data_stream_V_write : OUT STD_LOGIC;
    dy_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    dy_data_stream_V_full_n : IN STD_LOGIC;
    dy_data_stream_V_write : OUT STD_LOGIC;
    threshold_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    threshold_empty_n : IN STD_LOGIC;
    threshold_read : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of Edge_r is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal Edge_Block_crit_ed_U0_ap_start : STD_LOGIC;
    signal Edge_Block_crit_ed_U0_start_full_n : STD_LOGIC;
    signal Edge_Block_crit_ed_U0_ap_done : STD_LOGIC;
    signal Edge_Block_crit_ed_U0_ap_continue : STD_LOGIC;
    signal Edge_Block_crit_ed_U0_ap_idle : STD_LOGIC;
    signal Edge_Block_crit_ed_U0_ap_ready : STD_LOGIC;
    signal Edge_Block_crit_ed_U0_start_out : STD_LOGIC;
    signal Edge_Block_crit_ed_U0_start_write : STD_LOGIC;
    signal Edge_Block_crit_ed_U0_src_rows_V_read : STD_LOGIC;
    signal Edge_Block_crit_ed_U0_src_cols_V_read : STD_LOGIC;
    signal Edge_Block_crit_ed_U0_threshold_read : STD_LOGIC;
    signal Edge_Block_crit_ed_U0_src_x_rows_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Edge_Block_crit_ed_U0_src_x_rows_V_out_write : STD_LOGIC;
    signal Edge_Block_crit_ed_U0_src_x_cols_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Edge_Block_crit_ed_U0_src_x_cols_V_out_write : STD_LOGIC;
    signal Edge_Block_crit_ed_U0_src_y_rows_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Edge_Block_crit_ed_U0_src_y_rows_V_out_write : STD_LOGIC;
    signal Edge_Block_crit_ed_U0_src_y_cols_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Edge_Block_crit_ed_U0_src_y_cols_V_out_write : STD_LOGIC;
    signal Edge_Block_crit_ed_U0_dx0_rows_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Edge_Block_crit_ed_U0_dx0_rows_V_out_write : STD_LOGIC;
    signal Edge_Block_crit_ed_U0_dx0_cols_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Edge_Block_crit_ed_U0_dx0_cols_V_out_write : STD_LOGIC;
    signal Edge_Block_crit_ed_U0_dx1_rows_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Edge_Block_crit_ed_U0_dx1_rows_V_out_write : STD_LOGIC;
    signal Edge_Block_crit_ed_U0_dx1_cols_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Edge_Block_crit_ed_U0_dx1_cols_V_out_write : STD_LOGIC;
    signal Edge_Block_crit_ed_U0_dy0_rows_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Edge_Block_crit_ed_U0_dy0_rows_V_out_write : STD_LOGIC;
    signal Edge_Block_crit_ed_U0_dy0_cols_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Edge_Block_crit_ed_U0_dy0_cols_V_out_write : STD_LOGIC;
    signal Edge_Block_crit_ed_U0_dxy_rows_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Edge_Block_crit_ed_U0_dxy_rows_V_out_write : STD_LOGIC;
    signal Edge_Block_crit_ed_U0_dxy_cols_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Edge_Block_crit_ed_U0_dxy_cols_V_out_write : STD_LOGIC;
    signal Edge_Block_crit_ed_U0_threshold_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Edge_Block_crit_ed_U0_threshold_out_write : STD_LOGIC;
    signal Edge_Block_crit_ed_U0_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Edge_Block_crit_ed_U0_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_src_cols_V_loc_i_cha : STD_LOGIC;
    signal src_cols_V_loc_i_cha_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_src_cols_V_loc_i_cha : STD_LOGIC := '0';
    signal ap_sync_channel_write_src_cols_V_loc_i_cha : STD_LOGIC;
    signal ap_channel_done_src_rows_V_loc_i_cha : STD_LOGIC;
    signal src_rows_V_loc_i_cha_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_src_rows_V_loc_i_cha : STD_LOGIC := '0';
    signal ap_sync_channel_write_src_rows_V_loc_i_cha : STD_LOGIC;
    signal Duplicate_1_U0_ap_start : STD_LOGIC;
    signal Duplicate_1_U0_ap_done : STD_LOGIC;
    signal Duplicate_1_U0_ap_continue : STD_LOGIC;
    signal Duplicate_1_U0_ap_idle : STD_LOGIC;
    signal Duplicate_1_U0_ap_ready : STD_LOGIC;
    signal Duplicate_1_U0_src_data_stream_V_read : STD_LOGIC;
    signal Duplicate_1_U0_dst1_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Duplicate_1_U0_dst1_data_stream_V_write : STD_LOGIC;
    signal Duplicate_1_U0_dst2_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Duplicate_1_U0_dst2_data_stream_V_write : STD_LOGIC;
    signal Sobel_U0_ap_start : STD_LOGIC;
    signal Sobel_U0_ap_done : STD_LOGIC;
    signal Sobel_U0_ap_continue : STD_LOGIC;
    signal Sobel_U0_ap_idle : STD_LOGIC;
    signal Sobel_U0_ap_ready : STD_LOGIC;
    signal Sobel_U0_p_src_rows_V_read : STD_LOGIC;
    signal Sobel_U0_p_src_cols_V_read : STD_LOGIC;
    signal Sobel_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal Sobel_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Sobel_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal Sobel_1_U0_ap_start : STD_LOGIC;
    signal Sobel_1_U0_ap_done : STD_LOGIC;
    signal Sobel_1_U0_ap_continue : STD_LOGIC;
    signal Sobel_1_U0_ap_idle : STD_LOGIC;
    signal Sobel_1_U0_ap_ready : STD_LOGIC;
    signal Sobel_1_U0_p_src_rows_V_read : STD_LOGIC;
    signal Sobel_1_U0_p_src_cols_V_read : STD_LOGIC;
    signal Sobel_1_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal Sobel_1_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Sobel_1_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal Duplicate165_U0_ap_start : STD_LOGIC;
    signal Duplicate165_U0_ap_done : STD_LOGIC;
    signal Duplicate165_U0_ap_continue : STD_LOGIC;
    signal Duplicate165_U0_ap_idle : STD_LOGIC;
    signal Duplicate165_U0_ap_ready : STD_LOGIC;
    signal Duplicate165_U0_src_rows_V_read : STD_LOGIC;
    signal Duplicate165_U0_src_cols_V_read : STD_LOGIC;
    signal Duplicate165_U0_src_data_stream_V_read : STD_LOGIC;
    signal Duplicate165_U0_dst1_data_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Duplicate165_U0_dst1_data_stream_V_write : STD_LOGIC;
    signal Duplicate165_U0_dst2_data_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Duplicate165_U0_dst2_data_stream_V_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal Duplicate_U0_ap_start : STD_LOGIC;
    signal Duplicate_U0_ap_done : STD_LOGIC;
    signal Duplicate_U0_ap_continue : STD_LOGIC;
    signal Duplicate_U0_ap_idle : STD_LOGIC;
    signal Duplicate_U0_ap_ready : STD_LOGIC;
    signal Duplicate_U0_src_rows_V_read : STD_LOGIC;
    signal Duplicate_U0_src_cols_V_read : STD_LOGIC;
    signal Duplicate_U0_src_data_stream_V_read : STD_LOGIC;
    signal Duplicate_U0_dst1_data_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Duplicate_U0_dst1_data_stream_V_write : STD_LOGIC;
    signal Duplicate_U0_dst2_data_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Duplicate_U0_dst2_data_stream_V_write : STD_LOGIC;
    signal Gradient_Add_U0_ap_start : STD_LOGIC;
    signal Gradient_Add_U0_ap_done : STD_LOGIC;
    signal Gradient_Add_U0_ap_continue : STD_LOGIC;
    signal Gradient_Add_U0_ap_idle : STD_LOGIC;
    signal Gradient_Add_U0_ap_ready : STD_LOGIC;
    signal Gradient_Add_U0_dx_rows_V_read : STD_LOGIC;
    signal Gradient_Add_U0_dx_cols_V_read : STD_LOGIC;
    signal Gradient_Add_U0_dx_data_stream_V_read : STD_LOGIC;
    signal Gradient_Add_U0_dy_data_stream_V_read : STD_LOGIC;
    signal Gradient_Add_U0_dst_data_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Gradient_Add_U0_dst_data_stream_V_write : STD_LOGIC;
    signal Threshold_U0_ap_start : STD_LOGIC;
    signal Threshold_U0_ap_done : STD_LOGIC;
    signal Threshold_U0_ap_continue : STD_LOGIC;
    signal Threshold_U0_ap_idle : STD_LOGIC;
    signal Threshold_U0_ap_ready : STD_LOGIC;
    signal Threshold_U0_src_rows_V_read : STD_LOGIC;
    signal Threshold_U0_src_cols_V_read : STD_LOGIC;
    signal Threshold_U0_src_data_stream_V_read : STD_LOGIC;
    signal Threshold_U0_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Threshold_U0_dst_data_stream_V_write : STD_LOGIC;
    signal Threshold_U0_thresh_read : STD_LOGIC;
    signal src_x_rows_V_c_i_full_n : STD_LOGIC;
    signal src_x_rows_V_c_i_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal src_x_rows_V_c_i_empty_n : STD_LOGIC;
    signal src_x_cols_V_c_i_full_n : STD_LOGIC;
    signal src_x_cols_V_c_i_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal src_x_cols_V_c_i_empty_n : STD_LOGIC;
    signal src_y_rows_V_c_i_full_n : STD_LOGIC;
    signal src_y_rows_V_c_i_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal src_y_rows_V_c_i_empty_n : STD_LOGIC;
    signal src_y_cols_V_c_i_full_n : STD_LOGIC;
    signal src_y_cols_V_c_i_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal src_y_cols_V_c_i_empty_n : STD_LOGIC;
    signal dx0_rows_V_c_i_full_n : STD_LOGIC;
    signal dx0_rows_V_c_i_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal dx0_rows_V_c_i_empty_n : STD_LOGIC;
    signal dx0_cols_V_c_i_full_n : STD_LOGIC;
    signal dx0_cols_V_c_i_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal dx0_cols_V_c_i_empty_n : STD_LOGIC;
    signal dx1_rows_V_c_i_full_n : STD_LOGIC;
    signal dx1_rows_V_c_i_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal dx1_rows_V_c_i_empty_n : STD_LOGIC;
    signal dx1_cols_V_c_i_full_n : STD_LOGIC;
    signal dx1_cols_V_c_i_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal dx1_cols_V_c_i_empty_n : STD_LOGIC;
    signal dy0_rows_V_c_i_full_n : STD_LOGIC;
    signal dy0_rows_V_c_i_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal dy0_rows_V_c_i_empty_n : STD_LOGIC;
    signal dy0_cols_V_c_i_full_n : STD_LOGIC;
    signal dy0_cols_V_c_i_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal dy0_cols_V_c_i_empty_n : STD_LOGIC;
    signal dxy_rows_V_c_i_full_n : STD_LOGIC;
    signal dxy_rows_V_c_i_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal dxy_rows_V_c_i_empty_n : STD_LOGIC;
    signal dxy_cols_V_c_i_full_n : STD_LOGIC;
    signal dxy_cols_V_c_i_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal dxy_cols_V_c_i_empty_n : STD_LOGIC;
    signal threshold_c_i_full_n : STD_LOGIC;
    signal threshold_c_i_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal threshold_c_i_empty_n : STD_LOGIC;
    signal src_rows_V_loc_i_cha_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal src_rows_V_loc_i_cha_empty_n : STD_LOGIC;
    signal src_cols_V_loc_i_cha_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal src_cols_V_loc_i_cha_empty_n : STD_LOGIC;
    signal src_x_data_stream_0_full_n : STD_LOGIC;
    signal src_x_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src_x_data_stream_0_empty_n : STD_LOGIC;
    signal src_y_data_stream_0_full_n : STD_LOGIC;
    signal src_y_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src_y_data_stream_0_empty_n : STD_LOGIC;
    signal dx0_data_stream_0_V_full_n : STD_LOGIC;
    signal dx0_data_stream_0_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal dx0_data_stream_0_V_empty_n : STD_LOGIC;
    signal dy0_data_stream_0_V_full_n : STD_LOGIC;
    signal dy0_data_stream_0_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal dy0_data_stream_0_V_empty_n : STD_LOGIC;
    signal dx1_data_stream_0_V_full_n : STD_LOGIC;
    signal dx1_data_stream_0_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal dx1_data_stream_0_V_empty_n : STD_LOGIC;
    signal dy1_data_stream_0_V_full_n : STD_LOGIC;
    signal dy1_data_stream_0_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal dy1_data_stream_0_V_empty_n : STD_LOGIC;
    signal dxy_data_stream_0_V_full_n : STD_LOGIC;
    signal dxy_data_stream_0_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal dxy_data_stream_0_V_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_Edge_Block_crit_ed_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Edge_Block_crit_ed_U0_ap_ready : STD_LOGIC;
    signal Edge_Block_crit_ed_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_Duplicate_1_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Duplicate_1_U0_ap_ready : STD_LOGIC;
    signal Duplicate_1_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal start_for_Sobel_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Sobel_U0_full_n : STD_LOGIC;
    signal start_for_Sobel_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Sobel_U0_empty_n : STD_LOGIC;
    signal start_for_Sobel_1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Sobel_1_U0_full_n : STD_LOGIC;
    signal start_for_Sobel_1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Sobel_1_U0_empty_n : STD_LOGIC;
    signal start_for_Duplicate165_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Duplicate165_U0_full_n : STD_LOGIC;
    signal start_for_Duplicate165_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Duplicate165_U0_empty_n : STD_LOGIC;
    signal start_for_Duplicate_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Duplicate_U0_full_n : STD_LOGIC;
    signal start_for_Duplicate_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Duplicate_U0_empty_n : STD_LOGIC;
    signal start_for_Gradient_Add_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Gradient_Add_U0_full_n : STD_LOGIC;
    signal start_for_Gradient_Add_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Gradient_Add_U0_empty_n : STD_LOGIC;
    signal start_for_Threshold_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Threshold_U0_full_n : STD_LOGIC;
    signal start_for_Threshold_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Threshold_U0_empty_n : STD_LOGIC;
    signal Duplicate_1_U0_start_full_n : STD_LOGIC;
    signal Duplicate_1_U0_start_write : STD_LOGIC;
    signal Sobel_U0_start_full_n : STD_LOGIC;
    signal Sobel_U0_start_write : STD_LOGIC;
    signal Sobel_1_U0_start_full_n : STD_LOGIC;
    signal Sobel_1_U0_start_write : STD_LOGIC;
    signal Duplicate165_U0_start_full_n : STD_LOGIC;
    signal Duplicate165_U0_start_write : STD_LOGIC;
    signal Duplicate_U0_start_full_n : STD_LOGIC;
    signal Duplicate_U0_start_write : STD_LOGIC;
    signal Gradient_Add_U0_start_full_n : STD_LOGIC;
    signal Gradient_Add_U0_start_write : STD_LOGIC;
    signal Threshold_U0_start_full_n : STD_LOGIC;
    signal Threshold_U0_start_write : STD_LOGIC;

    component Edge_Block_crit_ed IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        src_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        src_rows_V_empty_n : IN STD_LOGIC;
        src_rows_V_read : OUT STD_LOGIC;
        src_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        src_cols_V_empty_n : IN STD_LOGIC;
        src_cols_V_read : OUT STD_LOGIC;
        threshold_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        threshold_empty_n : IN STD_LOGIC;
        threshold_read : OUT STD_LOGIC;
        src_x_rows_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        src_x_rows_V_out_full_n : IN STD_LOGIC;
        src_x_rows_V_out_write : OUT STD_LOGIC;
        src_x_cols_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        src_x_cols_V_out_full_n : IN STD_LOGIC;
        src_x_cols_V_out_write : OUT STD_LOGIC;
        src_y_rows_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        src_y_rows_V_out_full_n : IN STD_LOGIC;
        src_y_rows_V_out_write : OUT STD_LOGIC;
        src_y_cols_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        src_y_cols_V_out_full_n : IN STD_LOGIC;
        src_y_cols_V_out_write : OUT STD_LOGIC;
        dx0_rows_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        dx0_rows_V_out_full_n : IN STD_LOGIC;
        dx0_rows_V_out_write : OUT STD_LOGIC;
        dx0_cols_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        dx0_cols_V_out_full_n : IN STD_LOGIC;
        dx0_cols_V_out_write : OUT STD_LOGIC;
        dx1_rows_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        dx1_rows_V_out_full_n : IN STD_LOGIC;
        dx1_rows_V_out_write : OUT STD_LOGIC;
        dx1_cols_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        dx1_cols_V_out_full_n : IN STD_LOGIC;
        dx1_cols_V_out_write : OUT STD_LOGIC;
        dy0_rows_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        dy0_rows_V_out_full_n : IN STD_LOGIC;
        dy0_rows_V_out_write : OUT STD_LOGIC;
        dy0_cols_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        dy0_cols_V_out_full_n : IN STD_LOGIC;
        dy0_cols_V_out_write : OUT STD_LOGIC;
        dxy_rows_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        dxy_rows_V_out_full_n : IN STD_LOGIC;
        dxy_rows_V_out_write : OUT STD_LOGIC;
        dxy_cols_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        dxy_cols_V_out_full_n : IN STD_LOGIC;
        dxy_cols_V_out_write : OUT STD_LOGIC;
        threshold_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        threshold_out_full_n : IN STD_LOGIC;
        threshold_out_write : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Duplicate_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_rows_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        src_cols_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_V_empty_n : IN STD_LOGIC;
        src_data_stream_V_read : OUT STD_LOGIC;
        dst1_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst1_data_stream_V_full_n : IN STD_LOGIC;
        dst1_data_stream_V_write : OUT STD_LOGIC;
        dst2_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst2_data_stream_V_full_n : IN STD_LOGIC;
        dst2_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component Sobel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_rows_V_empty_n : IN STD_LOGIC;
        p_src_rows_V_read : OUT STD_LOGIC;
        p_src_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_cols_V_empty_n : IN STD_LOGIC;
        p_src_cols_V_read : OUT STD_LOGIC;
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component Sobel_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_rows_V_empty_n : IN STD_LOGIC;
        p_src_rows_V_read : OUT STD_LOGIC;
        p_src_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_cols_V_empty_n : IN STD_LOGIC;
        p_src_cols_V_read : OUT STD_LOGIC;
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component Duplicate165 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        src_rows_V_empty_n : IN STD_LOGIC;
        src_rows_V_read : OUT STD_LOGIC;
        src_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        src_cols_V_empty_n : IN STD_LOGIC;
        src_cols_V_read : OUT STD_LOGIC;
        src_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        src_data_stream_V_empty_n : IN STD_LOGIC;
        src_data_stream_V_read : OUT STD_LOGIC;
        dst1_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst1_data_stream_V_full_n : IN STD_LOGIC;
        dst1_data_stream_V_write : OUT STD_LOGIC;
        dst2_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst2_data_stream_V_full_n : IN STD_LOGIC;
        dst2_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component Duplicate IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        src_rows_V_empty_n : IN STD_LOGIC;
        src_rows_V_read : OUT STD_LOGIC;
        src_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        src_cols_V_empty_n : IN STD_LOGIC;
        src_cols_V_read : OUT STD_LOGIC;
        src_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        src_data_stream_V_empty_n : IN STD_LOGIC;
        src_data_stream_V_read : OUT STD_LOGIC;
        dst1_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst1_data_stream_V_full_n : IN STD_LOGIC;
        dst1_data_stream_V_write : OUT STD_LOGIC;
        dst2_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst2_data_stream_V_full_n : IN STD_LOGIC;
        dst2_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component Gradient_Add IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dx_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        dx_rows_V_empty_n : IN STD_LOGIC;
        dx_rows_V_read : OUT STD_LOGIC;
        dx_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        dx_cols_V_empty_n : IN STD_LOGIC;
        dx_cols_V_read : OUT STD_LOGIC;
        dx_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        dx_data_stream_V_empty_n : IN STD_LOGIC;
        dx_data_stream_V_read : OUT STD_LOGIC;
        dy_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        dy_data_stream_V_empty_n : IN STD_LOGIC;
        dy_data_stream_V_read : OUT STD_LOGIC;
        dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst_data_stream_V_full_n : IN STD_LOGIC;
        dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component Threshold IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        src_rows_V_empty_n : IN STD_LOGIC;
        src_rows_V_read : OUT STD_LOGIC;
        src_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        src_cols_V_empty_n : IN STD_LOGIC;
        src_cols_V_read : OUT STD_LOGIC;
        src_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        src_data_stream_V_empty_n : IN STD_LOGIC;
        src_data_stream_V_read : OUT STD_LOGIC;
        dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_V_full_n : IN STD_LOGIC;
        dst_data_stream_V_write : OUT STD_LOGIC;
        thresh_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        thresh_empty_n : IN STD_LOGIC;
        thresh_read : OUT STD_LOGIC );
    end component;


    component fifo_w32_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d5_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d6_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Sobel_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Sobel_1ncg IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Duplicaocq IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_DuplicapcA IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_GradienqcK IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_ThreshorcU IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    Edge_Block_crit_ed_U0 : component Edge_Block_crit_ed
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Edge_Block_crit_ed_U0_ap_start,
        start_full_n => Edge_Block_crit_ed_U0_start_full_n,
        ap_done => Edge_Block_crit_ed_U0_ap_done,
        ap_continue => Edge_Block_crit_ed_U0_ap_continue,
        ap_idle => Edge_Block_crit_ed_U0_ap_idle,
        ap_ready => Edge_Block_crit_ed_U0_ap_ready,
        start_out => Edge_Block_crit_ed_U0_start_out,
        start_write => Edge_Block_crit_ed_U0_start_write,
        src_rows_V_dout => src_rows_V_dout,
        src_rows_V_empty_n => src_rows_V_empty_n,
        src_rows_V_read => Edge_Block_crit_ed_U0_src_rows_V_read,
        src_cols_V_dout => src_cols_V_dout,
        src_cols_V_empty_n => src_cols_V_empty_n,
        src_cols_V_read => Edge_Block_crit_ed_U0_src_cols_V_read,
        threshold_dout => threshold_dout,
        threshold_empty_n => threshold_empty_n,
        threshold_read => Edge_Block_crit_ed_U0_threshold_read,
        src_x_rows_V_out_din => Edge_Block_crit_ed_U0_src_x_rows_V_out_din,
        src_x_rows_V_out_full_n => src_x_rows_V_c_i_full_n,
        src_x_rows_V_out_write => Edge_Block_crit_ed_U0_src_x_rows_V_out_write,
        src_x_cols_V_out_din => Edge_Block_crit_ed_U0_src_x_cols_V_out_din,
        src_x_cols_V_out_full_n => src_x_cols_V_c_i_full_n,
        src_x_cols_V_out_write => Edge_Block_crit_ed_U0_src_x_cols_V_out_write,
        src_y_rows_V_out_din => Edge_Block_crit_ed_U0_src_y_rows_V_out_din,
        src_y_rows_V_out_full_n => src_y_rows_V_c_i_full_n,
        src_y_rows_V_out_write => Edge_Block_crit_ed_U0_src_y_rows_V_out_write,
        src_y_cols_V_out_din => Edge_Block_crit_ed_U0_src_y_cols_V_out_din,
        src_y_cols_V_out_full_n => src_y_cols_V_c_i_full_n,
        src_y_cols_V_out_write => Edge_Block_crit_ed_U0_src_y_cols_V_out_write,
        dx0_rows_V_out_din => Edge_Block_crit_ed_U0_dx0_rows_V_out_din,
        dx0_rows_V_out_full_n => dx0_rows_V_c_i_full_n,
        dx0_rows_V_out_write => Edge_Block_crit_ed_U0_dx0_rows_V_out_write,
        dx0_cols_V_out_din => Edge_Block_crit_ed_U0_dx0_cols_V_out_din,
        dx0_cols_V_out_full_n => dx0_cols_V_c_i_full_n,
        dx0_cols_V_out_write => Edge_Block_crit_ed_U0_dx0_cols_V_out_write,
        dx1_rows_V_out_din => Edge_Block_crit_ed_U0_dx1_rows_V_out_din,
        dx1_rows_V_out_full_n => dx1_rows_V_c_i_full_n,
        dx1_rows_V_out_write => Edge_Block_crit_ed_U0_dx1_rows_V_out_write,
        dx1_cols_V_out_din => Edge_Block_crit_ed_U0_dx1_cols_V_out_din,
        dx1_cols_V_out_full_n => dx1_cols_V_c_i_full_n,
        dx1_cols_V_out_write => Edge_Block_crit_ed_U0_dx1_cols_V_out_write,
        dy0_rows_V_out_din => Edge_Block_crit_ed_U0_dy0_rows_V_out_din,
        dy0_rows_V_out_full_n => dy0_rows_V_c_i_full_n,
        dy0_rows_V_out_write => Edge_Block_crit_ed_U0_dy0_rows_V_out_write,
        dy0_cols_V_out_din => Edge_Block_crit_ed_U0_dy0_cols_V_out_din,
        dy0_cols_V_out_full_n => dy0_cols_V_c_i_full_n,
        dy0_cols_V_out_write => Edge_Block_crit_ed_U0_dy0_cols_V_out_write,
        dxy_rows_V_out_din => Edge_Block_crit_ed_U0_dxy_rows_V_out_din,
        dxy_rows_V_out_full_n => dxy_rows_V_c_i_full_n,
        dxy_rows_V_out_write => Edge_Block_crit_ed_U0_dxy_rows_V_out_write,
        dxy_cols_V_out_din => Edge_Block_crit_ed_U0_dxy_cols_V_out_din,
        dxy_cols_V_out_full_n => dxy_cols_V_c_i_full_n,
        dxy_cols_V_out_write => Edge_Block_crit_ed_U0_dxy_cols_V_out_write,
        threshold_out_din => Edge_Block_crit_ed_U0_threshold_out_din,
        threshold_out_full_n => threshold_c_i_full_n,
        threshold_out_write => Edge_Block_crit_ed_U0_threshold_out_write,
        ap_return_0 => Edge_Block_crit_ed_U0_ap_return_0,
        ap_return_1 => Edge_Block_crit_ed_U0_ap_return_1);

    Duplicate_1_U0 : component Duplicate_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Duplicate_1_U0_ap_start,
        ap_done => Duplicate_1_U0_ap_done,
        ap_continue => Duplicate_1_U0_ap_continue,
        ap_idle => Duplicate_1_U0_ap_idle,
        ap_ready => Duplicate_1_U0_ap_ready,
        src_rows_V_read => src_rows_V_loc_i_cha_dout,
        src_cols_V_read => src_cols_V_loc_i_cha_dout,
        src_data_stream_V_dout => src_data_stream_V_dout,
        src_data_stream_V_empty_n => src_data_stream_V_empty_n,
        src_data_stream_V_read => Duplicate_1_U0_src_data_stream_V_read,
        dst1_data_stream_V_din => Duplicate_1_U0_dst1_data_stream_V_din,
        dst1_data_stream_V_full_n => src_x_data_stream_0_full_n,
        dst1_data_stream_V_write => Duplicate_1_U0_dst1_data_stream_V_write,
        dst2_data_stream_V_din => Duplicate_1_U0_dst2_data_stream_V_din,
        dst2_data_stream_V_full_n => src_y_data_stream_0_full_n,
        dst2_data_stream_V_write => Duplicate_1_U0_dst2_data_stream_V_write);

    Sobel_U0 : component Sobel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Sobel_U0_ap_start,
        ap_done => Sobel_U0_ap_done,
        ap_continue => Sobel_U0_ap_continue,
        ap_idle => Sobel_U0_ap_idle,
        ap_ready => Sobel_U0_ap_ready,
        p_src_rows_V_dout => src_x_rows_V_c_i_dout,
        p_src_rows_V_empty_n => src_x_rows_V_c_i_empty_n,
        p_src_rows_V_read => Sobel_U0_p_src_rows_V_read,
        p_src_cols_V_dout => src_x_cols_V_c_i_dout,
        p_src_cols_V_empty_n => src_x_cols_V_c_i_empty_n,
        p_src_cols_V_read => Sobel_U0_p_src_cols_V_read,
        p_src_data_stream_V_dout => src_x_data_stream_0_dout,
        p_src_data_stream_V_empty_n => src_x_data_stream_0_empty_n,
        p_src_data_stream_V_read => Sobel_U0_p_src_data_stream_V_read,
        p_dst_data_stream_V_din => Sobel_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => dx0_data_stream_0_V_full_n,
        p_dst_data_stream_V_write => Sobel_U0_p_dst_data_stream_V_write);

    Sobel_1_U0 : component Sobel_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Sobel_1_U0_ap_start,
        ap_done => Sobel_1_U0_ap_done,
        ap_continue => Sobel_1_U0_ap_continue,
        ap_idle => Sobel_1_U0_ap_idle,
        ap_ready => Sobel_1_U0_ap_ready,
        p_src_rows_V_dout => src_y_rows_V_c_i_dout,
        p_src_rows_V_empty_n => src_y_rows_V_c_i_empty_n,
        p_src_rows_V_read => Sobel_1_U0_p_src_rows_V_read,
        p_src_cols_V_dout => src_y_cols_V_c_i_dout,
        p_src_cols_V_empty_n => src_y_cols_V_c_i_empty_n,
        p_src_cols_V_read => Sobel_1_U0_p_src_cols_V_read,
        p_src_data_stream_V_dout => src_y_data_stream_0_dout,
        p_src_data_stream_V_empty_n => src_y_data_stream_0_empty_n,
        p_src_data_stream_V_read => Sobel_1_U0_p_src_data_stream_V_read,
        p_dst_data_stream_V_din => Sobel_1_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => dy0_data_stream_0_V_full_n,
        p_dst_data_stream_V_write => Sobel_1_U0_p_dst_data_stream_V_write);

    Duplicate165_U0 : component Duplicate165
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Duplicate165_U0_ap_start,
        ap_done => Duplicate165_U0_ap_done,
        ap_continue => Duplicate165_U0_ap_continue,
        ap_idle => Duplicate165_U0_ap_idle,
        ap_ready => Duplicate165_U0_ap_ready,
        src_rows_V_dout => dx0_rows_V_c_i_dout,
        src_rows_V_empty_n => dx0_rows_V_c_i_empty_n,
        src_rows_V_read => Duplicate165_U0_src_rows_V_read,
        src_cols_V_dout => dx0_cols_V_c_i_dout,
        src_cols_V_empty_n => dx0_cols_V_c_i_empty_n,
        src_cols_V_read => Duplicate165_U0_src_cols_V_read,
        src_data_stream_V_dout => dx0_data_stream_0_V_dout,
        src_data_stream_V_empty_n => dx0_data_stream_0_V_empty_n,
        src_data_stream_V_read => Duplicate165_U0_src_data_stream_V_read,
        dst1_data_stream_V_din => Duplicate165_U0_dst1_data_stream_V_din,
        dst1_data_stream_V_full_n => dx_data_stream_V_full_n,
        dst1_data_stream_V_write => Duplicate165_U0_dst1_data_stream_V_write,
        dst2_data_stream_V_din => Duplicate165_U0_dst2_data_stream_V_din,
        dst2_data_stream_V_full_n => dx1_data_stream_0_V_full_n,
        dst2_data_stream_V_write => Duplicate165_U0_dst2_data_stream_V_write);

    Duplicate_U0 : component Duplicate
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Duplicate_U0_ap_start,
        ap_done => Duplicate_U0_ap_done,
        ap_continue => Duplicate_U0_ap_continue,
        ap_idle => Duplicate_U0_ap_idle,
        ap_ready => Duplicate_U0_ap_ready,
        src_rows_V_dout => dy0_rows_V_c_i_dout,
        src_rows_V_empty_n => dy0_rows_V_c_i_empty_n,
        src_rows_V_read => Duplicate_U0_src_rows_V_read,
        src_cols_V_dout => dy0_cols_V_c_i_dout,
        src_cols_V_empty_n => dy0_cols_V_c_i_empty_n,
        src_cols_V_read => Duplicate_U0_src_cols_V_read,
        src_data_stream_V_dout => dy0_data_stream_0_V_dout,
        src_data_stream_V_empty_n => dy0_data_stream_0_V_empty_n,
        src_data_stream_V_read => Duplicate_U0_src_data_stream_V_read,
        dst1_data_stream_V_din => Duplicate_U0_dst1_data_stream_V_din,
        dst1_data_stream_V_full_n => dy_data_stream_V_full_n,
        dst1_data_stream_V_write => Duplicate_U0_dst1_data_stream_V_write,
        dst2_data_stream_V_din => Duplicate_U0_dst2_data_stream_V_din,
        dst2_data_stream_V_full_n => dy1_data_stream_0_V_full_n,
        dst2_data_stream_V_write => Duplicate_U0_dst2_data_stream_V_write);

    Gradient_Add_U0 : component Gradient_Add
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Gradient_Add_U0_ap_start,
        ap_done => Gradient_Add_U0_ap_done,
        ap_continue => Gradient_Add_U0_ap_continue,
        ap_idle => Gradient_Add_U0_ap_idle,
        ap_ready => Gradient_Add_U0_ap_ready,
        dx_rows_V_dout => dx1_rows_V_c_i_dout,
        dx_rows_V_empty_n => dx1_rows_V_c_i_empty_n,
        dx_rows_V_read => Gradient_Add_U0_dx_rows_V_read,
        dx_cols_V_dout => dx1_cols_V_c_i_dout,
        dx_cols_V_empty_n => dx1_cols_V_c_i_empty_n,
        dx_cols_V_read => Gradient_Add_U0_dx_cols_V_read,
        dx_data_stream_V_dout => dx1_data_stream_0_V_dout,
        dx_data_stream_V_empty_n => dx1_data_stream_0_V_empty_n,
        dx_data_stream_V_read => Gradient_Add_U0_dx_data_stream_V_read,
        dy_data_stream_V_dout => dy1_data_stream_0_V_dout,
        dy_data_stream_V_empty_n => dy1_data_stream_0_V_empty_n,
        dy_data_stream_V_read => Gradient_Add_U0_dy_data_stream_V_read,
        dst_data_stream_V_din => Gradient_Add_U0_dst_data_stream_V_din,
        dst_data_stream_V_full_n => dxy_data_stream_0_V_full_n,
        dst_data_stream_V_write => Gradient_Add_U0_dst_data_stream_V_write);

    Threshold_U0 : component Threshold
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Threshold_U0_ap_start,
        ap_done => Threshold_U0_ap_done,
        ap_continue => Threshold_U0_ap_continue,
        ap_idle => Threshold_U0_ap_idle,
        ap_ready => Threshold_U0_ap_ready,
        src_rows_V_dout => dxy_rows_V_c_i_dout,
        src_rows_V_empty_n => dxy_rows_V_c_i_empty_n,
        src_rows_V_read => Threshold_U0_src_rows_V_read,
        src_cols_V_dout => dxy_cols_V_c_i_dout,
        src_cols_V_empty_n => dxy_cols_V_c_i_empty_n,
        src_cols_V_read => Threshold_U0_src_cols_V_read,
        src_data_stream_V_dout => dxy_data_stream_0_V_dout,
        src_data_stream_V_empty_n => dxy_data_stream_0_V_empty_n,
        src_data_stream_V_read => Threshold_U0_src_data_stream_V_read,
        dst_data_stream_V_din => Threshold_U0_dst_data_stream_V_din,
        dst_data_stream_V_full_n => dst_data_stream_V_full_n,
        dst_data_stream_V_write => Threshold_U0_dst_data_stream_V_write,
        thresh_dout => threshold_c_i_dout,
        thresh_empty_n => threshold_c_i_empty_n,
        thresh_read => Threshold_U0_thresh_read);

    src_x_rows_V_c_i_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Edge_Block_crit_ed_U0_src_x_rows_V_out_din,
        if_full_n => src_x_rows_V_c_i_full_n,
        if_write => Edge_Block_crit_ed_U0_src_x_rows_V_out_write,
        if_dout => src_x_rows_V_c_i_dout,
        if_empty_n => src_x_rows_V_c_i_empty_n,
        if_read => Sobel_U0_p_src_rows_V_read);

    src_x_cols_V_c_i_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Edge_Block_crit_ed_U0_src_x_cols_V_out_din,
        if_full_n => src_x_cols_V_c_i_full_n,
        if_write => Edge_Block_crit_ed_U0_src_x_cols_V_out_write,
        if_dout => src_x_cols_V_c_i_dout,
        if_empty_n => src_x_cols_V_c_i_empty_n,
        if_read => Sobel_U0_p_src_cols_V_read);

    src_y_rows_V_c_i_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Edge_Block_crit_ed_U0_src_y_rows_V_out_din,
        if_full_n => src_y_rows_V_c_i_full_n,
        if_write => Edge_Block_crit_ed_U0_src_y_rows_V_out_write,
        if_dout => src_y_rows_V_c_i_dout,
        if_empty_n => src_y_rows_V_c_i_empty_n,
        if_read => Sobel_1_U0_p_src_rows_V_read);

    src_y_cols_V_c_i_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Edge_Block_crit_ed_U0_src_y_cols_V_out_din,
        if_full_n => src_y_cols_V_c_i_full_n,
        if_write => Edge_Block_crit_ed_U0_src_y_cols_V_out_write,
        if_dout => src_y_cols_V_c_i_dout,
        if_empty_n => src_y_cols_V_c_i_empty_n,
        if_read => Sobel_1_U0_p_src_cols_V_read);

    dx0_rows_V_c_i_U : component fifo_w32_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Edge_Block_crit_ed_U0_dx0_rows_V_out_din,
        if_full_n => dx0_rows_V_c_i_full_n,
        if_write => Edge_Block_crit_ed_U0_dx0_rows_V_out_write,
        if_dout => dx0_rows_V_c_i_dout,
        if_empty_n => dx0_rows_V_c_i_empty_n,
        if_read => Duplicate165_U0_src_rows_V_read);

    dx0_cols_V_c_i_U : component fifo_w32_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Edge_Block_crit_ed_U0_dx0_cols_V_out_din,
        if_full_n => dx0_cols_V_c_i_full_n,
        if_write => Edge_Block_crit_ed_U0_dx0_cols_V_out_write,
        if_dout => dx0_cols_V_c_i_dout,
        if_empty_n => dx0_cols_V_c_i_empty_n,
        if_read => Duplicate165_U0_src_cols_V_read);

    dx1_rows_V_c_i_U : component fifo_w32_d5_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Edge_Block_crit_ed_U0_dx1_rows_V_out_din,
        if_full_n => dx1_rows_V_c_i_full_n,
        if_write => Edge_Block_crit_ed_U0_dx1_rows_V_out_write,
        if_dout => dx1_rows_V_c_i_dout,
        if_empty_n => dx1_rows_V_c_i_empty_n,
        if_read => Gradient_Add_U0_dx_rows_V_read);

    dx1_cols_V_c_i_U : component fifo_w32_d5_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Edge_Block_crit_ed_U0_dx1_cols_V_out_din,
        if_full_n => dx1_cols_V_c_i_full_n,
        if_write => Edge_Block_crit_ed_U0_dx1_cols_V_out_write,
        if_dout => dx1_cols_V_c_i_dout,
        if_empty_n => dx1_cols_V_c_i_empty_n,
        if_read => Gradient_Add_U0_dx_cols_V_read);

    dy0_rows_V_c_i_U : component fifo_w32_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Edge_Block_crit_ed_U0_dy0_rows_V_out_din,
        if_full_n => dy0_rows_V_c_i_full_n,
        if_write => Edge_Block_crit_ed_U0_dy0_rows_V_out_write,
        if_dout => dy0_rows_V_c_i_dout,
        if_empty_n => dy0_rows_V_c_i_empty_n,
        if_read => Duplicate_U0_src_rows_V_read);

    dy0_cols_V_c_i_U : component fifo_w32_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Edge_Block_crit_ed_U0_dy0_cols_V_out_din,
        if_full_n => dy0_cols_V_c_i_full_n,
        if_write => Edge_Block_crit_ed_U0_dy0_cols_V_out_write,
        if_dout => dy0_cols_V_c_i_dout,
        if_empty_n => dy0_cols_V_c_i_empty_n,
        if_read => Duplicate_U0_src_cols_V_read);

    dxy_rows_V_c_i_U : component fifo_w32_d6_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Edge_Block_crit_ed_U0_dxy_rows_V_out_din,
        if_full_n => dxy_rows_V_c_i_full_n,
        if_write => Edge_Block_crit_ed_U0_dxy_rows_V_out_write,
        if_dout => dxy_rows_V_c_i_dout,
        if_empty_n => dxy_rows_V_c_i_empty_n,
        if_read => Threshold_U0_src_rows_V_read);

    dxy_cols_V_c_i_U : component fifo_w32_d6_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Edge_Block_crit_ed_U0_dxy_cols_V_out_din,
        if_full_n => dxy_cols_V_c_i_full_n,
        if_write => Edge_Block_crit_ed_U0_dxy_cols_V_out_write,
        if_dout => dxy_cols_V_c_i_dout,
        if_empty_n => dxy_cols_V_c_i_empty_n,
        if_read => Threshold_U0_src_cols_V_read);

    threshold_c_i_U : component fifo_w32_d6_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Edge_Block_crit_ed_U0_threshold_out_din,
        if_full_n => threshold_c_i_full_n,
        if_write => Edge_Block_crit_ed_U0_threshold_out_write,
        if_dout => threshold_c_i_dout,
        if_empty_n => threshold_c_i_empty_n,
        if_read => Threshold_U0_thresh_read);

    src_rows_V_loc_i_cha_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Edge_Block_crit_ed_U0_ap_return_0,
        if_full_n => src_rows_V_loc_i_cha_full_n,
        if_write => ap_channel_done_src_rows_V_loc_i_cha,
        if_dout => src_rows_V_loc_i_cha_dout,
        if_empty_n => src_rows_V_loc_i_cha_empty_n,
        if_read => Duplicate_1_U0_ap_ready);

    src_cols_V_loc_i_cha_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Edge_Block_crit_ed_U0_ap_return_1,
        if_full_n => src_cols_V_loc_i_cha_full_n,
        if_write => ap_channel_done_src_cols_V_loc_i_cha,
        if_dout => src_cols_V_loc_i_cha_dout,
        if_empty_n => src_cols_V_loc_i_cha_empty_n,
        if_read => Duplicate_1_U0_ap_ready);

    src_x_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Duplicate_1_U0_dst1_data_stream_V_din,
        if_full_n => src_x_data_stream_0_full_n,
        if_write => Duplicate_1_U0_dst1_data_stream_V_write,
        if_dout => src_x_data_stream_0_dout,
        if_empty_n => src_x_data_stream_0_empty_n,
        if_read => Sobel_U0_p_src_data_stream_V_read);

    src_y_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Duplicate_1_U0_dst2_data_stream_V_din,
        if_full_n => src_y_data_stream_0_full_n,
        if_write => Duplicate_1_U0_dst2_data_stream_V_write,
        if_dout => src_y_data_stream_0_dout,
        if_empty_n => src_y_data_stream_0_empty_n,
        if_read => Sobel_1_U0_p_src_data_stream_V_read);

    dx0_data_stream_0_V_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Sobel_U0_p_dst_data_stream_V_din,
        if_full_n => dx0_data_stream_0_V_full_n,
        if_write => Sobel_U0_p_dst_data_stream_V_write,
        if_dout => dx0_data_stream_0_V_dout,
        if_empty_n => dx0_data_stream_0_V_empty_n,
        if_read => Duplicate165_U0_src_data_stream_V_read);

    dy0_data_stream_0_V_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Sobel_1_U0_p_dst_data_stream_V_din,
        if_full_n => dy0_data_stream_0_V_full_n,
        if_write => Sobel_1_U0_p_dst_data_stream_V_write,
        if_dout => dy0_data_stream_0_V_dout,
        if_empty_n => dy0_data_stream_0_V_empty_n,
        if_read => Duplicate_U0_src_data_stream_V_read);

    dx1_data_stream_0_V_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Duplicate165_U0_dst2_data_stream_V_din,
        if_full_n => dx1_data_stream_0_V_full_n,
        if_write => Duplicate165_U0_dst2_data_stream_V_write,
        if_dout => dx1_data_stream_0_V_dout,
        if_empty_n => dx1_data_stream_0_V_empty_n,
        if_read => Gradient_Add_U0_dx_data_stream_V_read);

    dy1_data_stream_0_V_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Duplicate_U0_dst2_data_stream_V_din,
        if_full_n => dy1_data_stream_0_V_full_n,
        if_write => Duplicate_U0_dst2_data_stream_V_write,
        if_dout => dy1_data_stream_0_V_dout,
        if_empty_n => dy1_data_stream_0_V_empty_n,
        if_read => Gradient_Add_U0_dy_data_stream_V_read);

    dxy_data_stream_0_V_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Gradient_Add_U0_dst_data_stream_V_din,
        if_full_n => dxy_data_stream_0_V_full_n,
        if_write => Gradient_Add_U0_dst_data_stream_V_write,
        if_dout => dxy_data_stream_0_V_dout,
        if_empty_n => dxy_data_stream_0_V_empty_n,
        if_read => Threshold_U0_src_data_stream_V_read);

    start_for_Sobel_U0_U : component start_for_Sobel_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Sobel_U0_din,
        if_full_n => start_for_Sobel_U0_full_n,
        if_write => Edge_Block_crit_ed_U0_start_write,
        if_dout => start_for_Sobel_U0_dout,
        if_empty_n => start_for_Sobel_U0_empty_n,
        if_read => Sobel_U0_ap_ready);

    start_for_Sobel_1ncg_U : component start_for_Sobel_1ncg
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Sobel_1_U0_din,
        if_full_n => start_for_Sobel_1_U0_full_n,
        if_write => Edge_Block_crit_ed_U0_start_write,
        if_dout => start_for_Sobel_1_U0_dout,
        if_empty_n => start_for_Sobel_1_U0_empty_n,
        if_read => Sobel_1_U0_ap_ready);

    start_for_Duplicaocq_U : component start_for_Duplicaocq
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Duplicate165_U0_din,
        if_full_n => start_for_Duplicate165_U0_full_n,
        if_write => Edge_Block_crit_ed_U0_start_write,
        if_dout => start_for_Duplicate165_U0_dout,
        if_empty_n => start_for_Duplicate165_U0_empty_n,
        if_read => Duplicate165_U0_ap_ready);

    start_for_DuplicapcA_U : component start_for_DuplicapcA
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Duplicate_U0_din,
        if_full_n => start_for_Duplicate_U0_full_n,
        if_write => Edge_Block_crit_ed_U0_start_write,
        if_dout => start_for_Duplicate_U0_dout,
        if_empty_n => start_for_Duplicate_U0_empty_n,
        if_read => Duplicate_U0_ap_ready);

    start_for_GradienqcK_U : component start_for_GradienqcK
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Gradient_Add_U0_din,
        if_full_n => start_for_Gradient_Add_U0_full_n,
        if_write => Edge_Block_crit_ed_U0_start_write,
        if_dout => start_for_Gradient_Add_U0_dout,
        if_empty_n => start_for_Gradient_Add_U0_empty_n,
        if_read => Gradient_Add_U0_ap_ready);

    start_for_ThreshorcU_U : component start_for_ThreshorcU
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Threshold_U0_din,
        if_full_n => start_for_Threshold_U0_full_n,
        if_write => Edge_Block_crit_ed_U0_start_write,
        if_dout => start_for_Threshold_U0_dout,
        if_empty_n => start_for_Threshold_U0_empty_n,
        if_read => Threshold_U0_ap_ready);





    ap_sync_reg_Duplicate_1_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_Duplicate_1_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Duplicate_1_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Duplicate_1_U0_ap_ready <= ap_sync_Duplicate_1_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Edge_Block_crit_ed_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_Edge_Block_crit_ed_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Edge_Block_crit_ed_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Edge_Block_crit_ed_U0_ap_ready <= ap_sync_Edge_Block_crit_ed_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_src_cols_V_loc_i_cha_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_src_cols_V_loc_i_cha <= ap_const_logic_0;
            else
                if (((Edge_Block_crit_ed_U0_ap_done and Edge_Block_crit_ed_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_src_cols_V_loc_i_cha <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_src_cols_V_loc_i_cha <= ap_sync_channel_write_src_cols_V_loc_i_cha;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_src_rows_V_loc_i_cha_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_src_rows_V_loc_i_cha <= ap_const_logic_0;
            else
                if (((Edge_Block_crit_ed_U0_ap_done and Edge_Block_crit_ed_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_src_rows_V_loc_i_cha <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_src_rows_V_loc_i_cha <= ap_sync_channel_write_src_rows_V_loc_i_cha;
                end if; 
            end if;
        end if;
    end process;


    Duplicate_1_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = Duplicate_1_U0_ap_ready))) then 
                Duplicate_1_U0_ap_ready_count <= std_logic_vector(unsigned(Duplicate_1_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Duplicate_1_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                Duplicate_1_U0_ap_ready_count <= std_logic_vector(unsigned(Duplicate_1_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    Edge_Block_crit_ed_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = Edge_Block_crit_ed_U0_ap_ready))) then 
                Edge_Block_crit_ed_U0_ap_ready_count <= std_logic_vector(unsigned(Edge_Block_crit_ed_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (ap_const_logic_1 = Edge_Block_crit_ed_U0_ap_ready))) then 
                Edge_Block_crit_ed_U0_ap_ready_count <= std_logic_vector(unsigned(Edge_Block_crit_ed_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    Duplicate165_U0_ap_continue <= ap_sync_continue;
    Duplicate165_U0_ap_start <= start_for_Duplicate165_U0_empty_n;
    Duplicate165_U0_start_full_n <= ap_const_logic_1;
    Duplicate165_U0_start_write <= ap_const_logic_0;
    Duplicate_1_U0_ap_continue <= ap_const_logic_1;
    Duplicate_1_U0_ap_start <= (src_rows_V_loc_i_cha_empty_n and src_cols_V_loc_i_cha_empty_n and (ap_sync_reg_Duplicate_1_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Duplicate_1_U0_start_full_n <= ap_const_logic_1;
    Duplicate_1_U0_start_write <= ap_const_logic_0;
    Duplicate_U0_ap_continue <= ap_sync_continue;
    Duplicate_U0_ap_start <= start_for_Duplicate_U0_empty_n;
    Duplicate_U0_start_full_n <= ap_const_logic_1;
    Duplicate_U0_start_write <= ap_const_logic_0;
    Edge_Block_crit_ed_U0_ap_continue <= (ap_sync_channel_write_src_rows_V_loc_i_cha and ap_sync_channel_write_src_cols_V_loc_i_cha);
    Edge_Block_crit_ed_U0_ap_start <= ((ap_sync_reg_Edge_Block_crit_ed_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Edge_Block_crit_ed_U0_start_full_n <= (start_for_Threshold_U0_full_n and start_for_Sobel_U0_full_n and start_for_Sobel_1_U0_full_n and start_for_Gradient_Add_U0_full_n and start_for_Duplicate_U0_full_n and start_for_Duplicate165_U0_full_n);
    Gradient_Add_U0_ap_continue <= ap_const_logic_1;
    Gradient_Add_U0_ap_start <= start_for_Gradient_Add_U0_empty_n;
    Gradient_Add_U0_start_full_n <= ap_const_logic_1;
    Gradient_Add_U0_start_write <= ap_const_logic_0;
    Sobel_1_U0_ap_continue <= ap_const_logic_1;
    Sobel_1_U0_ap_start <= start_for_Sobel_1_U0_empty_n;
    Sobel_1_U0_start_full_n <= ap_const_logic_1;
    Sobel_1_U0_start_write <= ap_const_logic_0;
    Sobel_U0_ap_continue <= ap_const_logic_1;
    Sobel_U0_ap_start <= start_for_Sobel_U0_empty_n;
    Sobel_U0_start_full_n <= ap_const_logic_1;
    Sobel_U0_start_write <= ap_const_logic_0;
    Threshold_U0_ap_continue <= ap_sync_continue;
    Threshold_U0_ap_start <= start_for_Threshold_U0_empty_n;
    Threshold_U0_start_full_n <= ap_const_logic_1;
    Threshold_U0_start_write <= ap_const_logic_0;
    ap_channel_done_src_cols_V_loc_i_cha <= ((ap_sync_reg_channel_write_src_cols_V_loc_i_cha xor ap_const_logic_1) and Edge_Block_crit_ed_U0_ap_done);
    ap_channel_done_src_rows_V_loc_i_cha <= ((ap_sync_reg_channel_write_src_rows_V_loc_i_cha xor ap_const_logic_1) and Edge_Block_crit_ed_U0_ap_done);
    ap_done <= ap_sync_done;
    ap_idle <= ((src_cols_V_loc_i_cha_empty_n xor ap_const_logic_1) and (src_rows_V_loc_i_cha_empty_n xor ap_const_logic_1) and Threshold_U0_ap_idle and Sobel_U0_ap_idle and Sobel_1_U0_ap_idle and Gradient_Add_U0_ap_idle and Edge_Block_crit_ed_U0_ap_idle and Duplicate_U0_ap_idle and Duplicate_1_U0_ap_idle and Duplicate165_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_Duplicate_1_U0_ap_ready <= (ap_sync_reg_Duplicate_1_U0_ap_ready or Duplicate_1_U0_ap_ready);
    ap_sync_Edge_Block_crit_ed_U0_ap_ready <= (ap_sync_reg_Edge_Block_crit_ed_U0_ap_ready or Edge_Block_crit_ed_U0_ap_ready);
    ap_sync_channel_write_src_cols_V_loc_i_cha <= ((src_cols_V_loc_i_cha_full_n and ap_channel_done_src_cols_V_loc_i_cha) or ap_sync_reg_channel_write_src_cols_V_loc_i_cha);
    ap_sync_channel_write_src_rows_V_loc_i_cha <= ((src_rows_V_loc_i_cha_full_n and ap_channel_done_src_rows_V_loc_i_cha) or ap_sync_reg_channel_write_src_rows_V_loc_i_cha);
    ap_sync_continue <= (ap_sync_done and ap_continue);
    ap_sync_done <= (Threshold_U0_ap_done and Duplicate_U0_ap_done and Duplicate165_U0_ap_done);
    ap_sync_ready <= (ap_sync_Edge_Block_crit_ed_U0_ap_ready and ap_sync_Duplicate_1_U0_ap_ready);
    dst_data_stream_V_din <= Threshold_U0_dst_data_stream_V_din;
    dst_data_stream_V_write <= Threshold_U0_dst_data_stream_V_write;
    dx_data_stream_V_din <= Duplicate165_U0_dst1_data_stream_V_din;
    dx_data_stream_V_write <= Duplicate165_U0_dst1_data_stream_V_write;
    dy_data_stream_V_din <= Duplicate_U0_dst1_data_stream_V_din;
    dy_data_stream_V_write <= Duplicate_U0_dst1_data_stream_V_write;
    src_cols_V_read <= Edge_Block_crit_ed_U0_src_cols_V_read;
    src_data_stream_V_read <= Duplicate_1_U0_src_data_stream_V_read;
    src_rows_V_read <= Edge_Block_crit_ed_U0_src_rows_V_read;
    start_for_Duplicate165_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Duplicate_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Gradient_Add_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Sobel_1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Sobel_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Threshold_U0_din <= (0=>ap_const_logic_1, others=>'-');
    threshold_read <= Edge_Block_crit_ed_U0_threshold_read;
end behav;
