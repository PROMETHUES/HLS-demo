// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Edge_Block_crit_ed_HH_
#define _Edge_Block_crit_ed_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Edge_Block_crit_ed : public sc_module {
    // Port declarations 60
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<32> > src_rows_V_dout;
    sc_in< sc_logic > src_rows_V_empty_n;
    sc_out< sc_logic > src_rows_V_read;
    sc_in< sc_lv<32> > src_cols_V_dout;
    sc_in< sc_logic > src_cols_V_empty_n;
    sc_out< sc_logic > src_cols_V_read;
    sc_in< sc_lv<32> > threshold_dout;
    sc_in< sc_logic > threshold_empty_n;
    sc_out< sc_logic > threshold_read;
    sc_out< sc_lv<32> > src_x_rows_V_out_din;
    sc_in< sc_logic > src_x_rows_V_out_full_n;
    sc_out< sc_logic > src_x_rows_V_out_write;
    sc_out< sc_lv<32> > src_x_cols_V_out_din;
    sc_in< sc_logic > src_x_cols_V_out_full_n;
    sc_out< sc_logic > src_x_cols_V_out_write;
    sc_out< sc_lv<32> > src_y_rows_V_out_din;
    sc_in< sc_logic > src_y_rows_V_out_full_n;
    sc_out< sc_logic > src_y_rows_V_out_write;
    sc_out< sc_lv<32> > src_y_cols_V_out_din;
    sc_in< sc_logic > src_y_cols_V_out_full_n;
    sc_out< sc_logic > src_y_cols_V_out_write;
    sc_out< sc_lv<32> > dx0_rows_V_out_din;
    sc_in< sc_logic > dx0_rows_V_out_full_n;
    sc_out< sc_logic > dx0_rows_V_out_write;
    sc_out< sc_lv<32> > dx0_cols_V_out_din;
    sc_in< sc_logic > dx0_cols_V_out_full_n;
    sc_out< sc_logic > dx0_cols_V_out_write;
    sc_out< sc_lv<32> > dx1_rows_V_out_din;
    sc_in< sc_logic > dx1_rows_V_out_full_n;
    sc_out< sc_logic > dx1_rows_V_out_write;
    sc_out< sc_lv<32> > dx1_cols_V_out_din;
    sc_in< sc_logic > dx1_cols_V_out_full_n;
    sc_out< sc_logic > dx1_cols_V_out_write;
    sc_out< sc_lv<32> > dy0_rows_V_out_din;
    sc_in< sc_logic > dy0_rows_V_out_full_n;
    sc_out< sc_logic > dy0_rows_V_out_write;
    sc_out< sc_lv<32> > dy0_cols_V_out_din;
    sc_in< sc_logic > dy0_cols_V_out_full_n;
    sc_out< sc_logic > dy0_cols_V_out_write;
    sc_out< sc_lv<32> > dxy_rows_V_out_din;
    sc_in< sc_logic > dxy_rows_V_out_full_n;
    sc_out< sc_logic > dxy_rows_V_out_write;
    sc_out< sc_lv<32> > dxy_cols_V_out_din;
    sc_in< sc_logic > dxy_cols_V_out_full_n;
    sc_out< sc_logic > dxy_cols_V_out_write;
    sc_out< sc_lv<32> > threshold_out_din;
    sc_in< sc_logic > threshold_out_full_n;
    sc_out< sc_logic > threshold_out_write;
    sc_out< sc_lv<32> > ap_return_0;
    sc_out< sc_lv<32> > ap_return_1;


    // Module declarations
    Edge_Block_crit_ed(sc_module_name name);
    SC_HAS_PROCESS(Edge_Block_crit_ed);

    ~Edge_Block_crit_ed();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > src_rows_V_blk_n;
    sc_signal< sc_logic > src_cols_V_blk_n;
    sc_signal< sc_logic > threshold_blk_n;
    sc_signal< sc_logic > src_x_rows_V_out_blk_n;
    sc_signal< sc_logic > src_x_cols_V_out_blk_n;
    sc_signal< sc_logic > src_y_rows_V_out_blk_n;
    sc_signal< sc_logic > src_y_cols_V_out_blk_n;
    sc_signal< sc_logic > dx0_rows_V_out_blk_n;
    sc_signal< sc_logic > dx0_cols_V_out_blk_n;
    sc_signal< sc_logic > dx1_rows_V_out_blk_n;
    sc_signal< sc_logic > dx1_cols_V_out_blk_n;
    sc_signal< sc_logic > dy0_rows_V_out_blk_n;
    sc_signal< sc_logic > dy0_cols_V_out_blk_n;
    sc_signal< sc_logic > dxy_rows_V_out_blk_n;
    sc_signal< sc_logic > dxy_cols_V_out_blk_n;
    sc_signal< sc_logic > threshold_out_blk_n;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<32> > ap_return_0_preg;
    sc_signal< sc_lv<32> > ap_return_1_preg;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_state1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_dx0_cols_V_out_blk_n();
    void thread_dx0_cols_V_out_din();
    void thread_dx0_cols_V_out_write();
    void thread_dx0_rows_V_out_blk_n();
    void thread_dx0_rows_V_out_din();
    void thread_dx0_rows_V_out_write();
    void thread_dx1_cols_V_out_blk_n();
    void thread_dx1_cols_V_out_din();
    void thread_dx1_cols_V_out_write();
    void thread_dx1_rows_V_out_blk_n();
    void thread_dx1_rows_V_out_din();
    void thread_dx1_rows_V_out_write();
    void thread_dxy_cols_V_out_blk_n();
    void thread_dxy_cols_V_out_din();
    void thread_dxy_cols_V_out_write();
    void thread_dxy_rows_V_out_blk_n();
    void thread_dxy_rows_V_out_din();
    void thread_dxy_rows_V_out_write();
    void thread_dy0_cols_V_out_blk_n();
    void thread_dy0_cols_V_out_din();
    void thread_dy0_cols_V_out_write();
    void thread_dy0_rows_V_out_blk_n();
    void thread_dy0_rows_V_out_din();
    void thread_dy0_rows_V_out_write();
    void thread_internal_ap_ready();
    void thread_real_start();
    void thread_src_cols_V_blk_n();
    void thread_src_cols_V_read();
    void thread_src_rows_V_blk_n();
    void thread_src_rows_V_read();
    void thread_src_x_cols_V_out_blk_n();
    void thread_src_x_cols_V_out_din();
    void thread_src_x_cols_V_out_write();
    void thread_src_x_rows_V_out_blk_n();
    void thread_src_x_rows_V_out_din();
    void thread_src_x_rows_V_out_write();
    void thread_src_y_cols_V_out_blk_n();
    void thread_src_y_cols_V_out_din();
    void thread_src_y_cols_V_out_write();
    void thread_src_y_rows_V_out_blk_n();
    void thread_src_y_rows_V_out_din();
    void thread_src_y_rows_V_out_write();
    void thread_start_out();
    void thread_start_write();
    void thread_threshold_blk_n();
    void thread_threshold_out_blk_n();
    void thread_threshold_out_din();
    void thread_threshold_out_write();
    void thread_threshold_read();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
