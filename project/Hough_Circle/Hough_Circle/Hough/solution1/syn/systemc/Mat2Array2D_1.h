// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Mat2Array2D_1_HH_
#define _Mat2Array2D_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Mat2Array2D_1 : public sc_module {
    // Port declarations 26
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > mat_rows_V_dout;
    sc_in< sc_logic > mat_rows_V_empty_n;
    sc_out< sc_logic > mat_rows_V_read;
    sc_in< sc_lv<32> > mat_cols_V_dout;
    sc_in< sc_logic > mat_cols_V_empty_n;
    sc_out< sc_logic > mat_cols_V_read;
    sc_in< sc_lv<8> > mat_data_stream_V_dout;
    sc_in< sc_logic > mat_data_stream_V_empty_n;
    sc_out< sc_logic > mat_data_stream_V_read;
    sc_out< sc_lv<17> > arr_val_address0;
    sc_out< sc_logic > arr_val_ce0;
    sc_out< sc_logic > arr_val_we0;
    sc_out< sc_lv<8> > arr_val_d0;
    sc_out< sc_lv<32> > arr_rows_din;
    sc_in< sc_logic > arr_rows_full_n;
    sc_out< sc_logic > arr_rows_write;
    sc_out< sc_lv<32> > arr_cols_din;
    sc_in< sc_logic > arr_cols_full_n;
    sc_out< sc_logic > arr_cols_write;


    // Module declarations
    Mat2Array2D_1(sc_module_name name);
    SC_HAS_PROCESS(Mat2Array2D_1);

    ~Mat2Array2D_1();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > mat_rows_V_blk_n;
    sc_signal< sc_logic > mat_cols_V_blk_n;
    sc_signal< sc_logic > mat_data_stream_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > tmp_36_i_reg_231;
    sc_signal< sc_logic > arr_rows_blk_n;
    sc_signal< sc_logic > arr_cols_blk_n;
    sc_signal< sc_lv<31> > j_i_reg_123;
    sc_signal< sc_lv<32> > rows_reg_207;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<32> > cols_reg_212;
    sc_signal< sc_lv<1> > tmp_i_fu_138_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<31> > i_fu_143_p2;
    sc_signal< sc_lv<31> > i_reg_221;
    sc_signal< sc_lv<18> > tmp_9_fu_173_p2;
    sc_signal< sc_lv<18> > tmp_9_reg_226;
    sc_signal< sc_lv<1> > tmp_36_i_fu_183_p2;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<31> > j_fu_188_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<18> > tmp_10_fu_198_p2;
    sc_signal< sc_lv<18> > tmp_10_reg_240;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_lv<31> > i_i_reg_112;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<64> > tmp_10_cast_fu_203_p1;
    sc_signal< sc_lv<32> > i_cast_i_fu_134_p1;
    sc_signal< sc_lv<10> > tmp_fu_149_p1;
    sc_signal< sc_lv<12> > tmp_41_fu_161_p1;
    sc_signal< sc_lv<18> > p_shl_cast_fu_153_p3;
    sc_signal< sc_lv<18> > p_shl1_cast_fu_165_p3;
    sc_signal< sc_lv<32> > j_cast_i_fu_179_p1;
    sc_signal< sc_lv<18> > tmp_43_fu_194_p1;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<31> ap_const_lv31_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<6> ap_const_lv6_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_arr_cols_blk_n();
    void thread_arr_cols_din();
    void thread_arr_cols_write();
    void thread_arr_rows_blk_n();
    void thread_arr_rows_din();
    void thread_arr_rows_write();
    void thread_arr_val_address0();
    void thread_arr_val_ce0();
    void thread_arr_val_d0();
    void thread_arr_val_we0();
    void thread_i_cast_i_fu_134_p1();
    void thread_i_fu_143_p2();
    void thread_j_cast_i_fu_179_p1();
    void thread_j_fu_188_p2();
    void thread_mat_cols_V_blk_n();
    void thread_mat_cols_V_read();
    void thread_mat_data_stream_V_blk_n();
    void thread_mat_data_stream_V_read();
    void thread_mat_rows_V_blk_n();
    void thread_mat_rows_V_read();
    void thread_p_shl1_cast_fu_165_p3();
    void thread_p_shl_cast_fu_153_p3();
    void thread_tmp_10_cast_fu_203_p1();
    void thread_tmp_10_fu_198_p2();
    void thread_tmp_36_i_fu_183_p2();
    void thread_tmp_41_fu_161_p1();
    void thread_tmp_43_fu_194_p1();
    void thread_tmp_9_fu_173_p2();
    void thread_tmp_fu_149_p1();
    void thread_tmp_i_fu_138_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
