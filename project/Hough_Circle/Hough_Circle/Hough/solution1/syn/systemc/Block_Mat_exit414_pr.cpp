// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Block_Mat_exit414_pr.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Block_Mat_exit414_pr::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Block_Mat_exit414_pr::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> Block_Mat_exit414_pr::ap_ST_fsm_state1 = "1";
const sc_lv<32> Block_Mat_exit414_pr::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<3> Block_Mat_exit414_pr::ap_const_lv3_3 = "11";
const sc_lv<8> Block_Mat_exit414_pr::ap_const_lv8_64 = "1100100";
const bool Block_Mat_exit414_pr::ap_const_boolean_1 = true;

Block_Mat_exit414_pr::Block_Mat_exit414_pr(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_acc_thresh_out_blk_n);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( acc_thresh_out_full_n );

    SC_METHOD(thread_acc_thresh_out_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( acc_thresh );
    sensitive << ( src_rows_V_out_full_n );
    sensitive << ( src_cols_V_out_full_n );
    sensitive << ( edge_rows_V_out_full_n );
    sensitive << ( edge_cols_V_out_full_n );
    sensitive << ( dx_rows_V_out_full_n );
    sensitive << ( dx_cols_V_out_full_n );
    sensitive << ( dy_rows_V_out_full_n );
    sensitive << ( dy_cols_V_out_full_n );
    sensitive << ( circles_rows_out_full_n );
    sensitive << ( circles_cols_out_full_n );
    sensitive << ( gray_thresh_out_full_n );
    sensitive << ( acc_thresh_out_full_n );
    sensitive << ( min_dist_out_full_n );
    sensitive << ( min_radius_out_full_n );
    sensitive << ( max_radius_out_full_n );

    SC_METHOD(thread_acc_thresh_out_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( src_rows_V_out_full_n );
    sensitive << ( src_cols_V_out_full_n );
    sensitive << ( edge_rows_V_out_full_n );
    sensitive << ( edge_cols_V_out_full_n );
    sensitive << ( dx_rows_V_out_full_n );
    sensitive << ( dx_cols_V_out_full_n );
    sensitive << ( dy_rows_V_out_full_n );
    sensitive << ( dy_cols_V_out_full_n );
    sensitive << ( circles_rows_out_full_n );
    sensitive << ( circles_cols_out_full_n );
    sensitive << ( gray_thresh_out_full_n );
    sensitive << ( acc_thresh_out_full_n );
    sensitive << ( min_dist_out_full_n );
    sensitive << ( min_radius_out_full_n );
    sensitive << ( max_radius_out_full_n );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( src_rows_V_out_full_n );
    sensitive << ( src_cols_V_out_full_n );
    sensitive << ( edge_rows_V_out_full_n );
    sensitive << ( edge_cols_V_out_full_n );
    sensitive << ( dx_rows_V_out_full_n );
    sensitive << ( dx_cols_V_out_full_n );
    sensitive << ( dy_rows_V_out_full_n );
    sensitive << ( dy_cols_V_out_full_n );
    sensitive << ( circles_rows_out_full_n );
    sensitive << ( circles_cols_out_full_n );
    sensitive << ( gray_thresh_out_full_n );
    sensitive << ( acc_thresh_out_full_n );
    sensitive << ( min_dist_out_full_n );
    sensitive << ( min_radius_out_full_n );
    sensitive << ( max_radius_out_full_n );

    SC_METHOD(thread_ap_done);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( src_rows_V_out_full_n );
    sensitive << ( src_cols_V_out_full_n );
    sensitive << ( edge_rows_V_out_full_n );
    sensitive << ( edge_cols_V_out_full_n );
    sensitive << ( dx_rows_V_out_full_n );
    sensitive << ( dx_cols_V_out_full_n );
    sensitive << ( dy_rows_V_out_full_n );
    sensitive << ( dy_cols_V_out_full_n );
    sensitive << ( circles_rows_out_full_n );
    sensitive << ( circles_cols_out_full_n );
    sensitive << ( gray_thresh_out_full_n );
    sensitive << ( acc_thresh_out_full_n );
    sensitive << ( min_dist_out_full_n );
    sensitive << ( min_radius_out_full_n );
    sensitive << ( max_radius_out_full_n );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_circles_cols_out_blk_n);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( circles_cols_out_full_n );

    SC_METHOD(thread_circles_cols_out_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( src_rows_V_out_full_n );
    sensitive << ( src_cols_V_out_full_n );
    sensitive << ( edge_rows_V_out_full_n );
    sensitive << ( edge_cols_V_out_full_n );
    sensitive << ( dx_rows_V_out_full_n );
    sensitive << ( dx_cols_V_out_full_n );
    sensitive << ( dy_rows_V_out_full_n );
    sensitive << ( dy_cols_V_out_full_n );
    sensitive << ( circles_rows_out_full_n );
    sensitive << ( circles_cols_out_full_n );
    sensitive << ( gray_thresh_out_full_n );
    sensitive << ( acc_thresh_out_full_n );
    sensitive << ( min_dist_out_full_n );
    sensitive << ( min_radius_out_full_n );
    sensitive << ( max_radius_out_full_n );

    SC_METHOD(thread_circles_cols_out_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( src_rows_V_out_full_n );
    sensitive << ( src_cols_V_out_full_n );
    sensitive << ( edge_rows_V_out_full_n );
    sensitive << ( edge_cols_V_out_full_n );
    sensitive << ( dx_rows_V_out_full_n );
    sensitive << ( dx_cols_V_out_full_n );
    sensitive << ( dy_rows_V_out_full_n );
    sensitive << ( dy_cols_V_out_full_n );
    sensitive << ( circles_rows_out_full_n );
    sensitive << ( circles_cols_out_full_n );
    sensitive << ( gray_thresh_out_full_n );
    sensitive << ( acc_thresh_out_full_n );
    sensitive << ( min_dist_out_full_n );
    sensitive << ( min_radius_out_full_n );
    sensitive << ( max_radius_out_full_n );

    SC_METHOD(thread_circles_rows_out_blk_n);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( circles_rows_out_full_n );

    SC_METHOD(thread_circles_rows_out_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( src_rows_V_out_full_n );
    sensitive << ( src_cols_V_out_full_n );
    sensitive << ( edge_rows_V_out_full_n );
    sensitive << ( edge_cols_V_out_full_n );
    sensitive << ( dx_rows_V_out_full_n );
    sensitive << ( dx_cols_V_out_full_n );
    sensitive << ( dy_rows_V_out_full_n );
    sensitive << ( dy_cols_V_out_full_n );
    sensitive << ( circles_rows_out_full_n );
    sensitive << ( circles_cols_out_full_n );
    sensitive << ( gray_thresh_out_full_n );
    sensitive << ( acc_thresh_out_full_n );
    sensitive << ( min_dist_out_full_n );
    sensitive << ( min_radius_out_full_n );
    sensitive << ( max_radius_out_full_n );

    SC_METHOD(thread_circles_rows_out_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( src_rows_V_out_full_n );
    sensitive << ( src_cols_V_out_full_n );
    sensitive << ( edge_rows_V_out_full_n );
    sensitive << ( edge_cols_V_out_full_n );
    sensitive << ( dx_rows_V_out_full_n );
    sensitive << ( dx_cols_V_out_full_n );
    sensitive << ( dy_rows_V_out_full_n );
    sensitive << ( dy_cols_V_out_full_n );
    sensitive << ( circles_rows_out_full_n );
    sensitive << ( circles_cols_out_full_n );
    sensitive << ( gray_thresh_out_full_n );
    sensitive << ( acc_thresh_out_full_n );
    sensitive << ( min_dist_out_full_n );
    sensitive << ( min_radius_out_full_n );
    sensitive << ( max_radius_out_full_n );

    SC_METHOD(thread_dx_cols_V_out_blk_n);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( dx_cols_V_out_full_n );

    SC_METHOD(thread_dx_cols_V_out_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( cols );
    sensitive << ( src_rows_V_out_full_n );
    sensitive << ( src_cols_V_out_full_n );
    sensitive << ( edge_rows_V_out_full_n );
    sensitive << ( edge_cols_V_out_full_n );
    sensitive << ( dx_rows_V_out_full_n );
    sensitive << ( dx_cols_V_out_full_n );
    sensitive << ( dy_rows_V_out_full_n );
    sensitive << ( dy_cols_V_out_full_n );
    sensitive << ( circles_rows_out_full_n );
    sensitive << ( circles_cols_out_full_n );
    sensitive << ( gray_thresh_out_full_n );
    sensitive << ( acc_thresh_out_full_n );
    sensitive << ( min_dist_out_full_n );
    sensitive << ( min_radius_out_full_n );
    sensitive << ( max_radius_out_full_n );

    SC_METHOD(thread_dx_cols_V_out_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( src_rows_V_out_full_n );
    sensitive << ( src_cols_V_out_full_n );
    sensitive << ( edge_rows_V_out_full_n );
    sensitive << ( edge_cols_V_out_full_n );
    sensitive << ( dx_rows_V_out_full_n );
    sensitive << ( dx_cols_V_out_full_n );
    sensitive << ( dy_rows_V_out_full_n );
    sensitive << ( dy_cols_V_out_full_n );
    sensitive << ( circles_rows_out_full_n );
    sensitive << ( circles_cols_out_full_n );
    sensitive << ( gray_thresh_out_full_n );
    sensitive << ( acc_thresh_out_full_n );
    sensitive << ( min_dist_out_full_n );
    sensitive << ( min_radius_out_full_n );
    sensitive << ( max_radius_out_full_n );

    SC_METHOD(thread_dx_rows_V_out_blk_n);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( dx_rows_V_out_full_n );

    SC_METHOD(thread_dx_rows_V_out_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( rows );
    sensitive << ( src_rows_V_out_full_n );
    sensitive << ( src_cols_V_out_full_n );
    sensitive << ( edge_rows_V_out_full_n );
    sensitive << ( edge_cols_V_out_full_n );
    sensitive << ( dx_rows_V_out_full_n );
    sensitive << ( dx_cols_V_out_full_n );
    sensitive << ( dy_rows_V_out_full_n );
    sensitive << ( dy_cols_V_out_full_n );
    sensitive << ( circles_rows_out_full_n );
    sensitive << ( circles_cols_out_full_n );
    sensitive << ( gray_thresh_out_full_n );
    sensitive << ( acc_thresh_out_full_n );
    sensitive << ( min_dist_out_full_n );
    sensitive << ( min_radius_out_full_n );
    sensitive << ( max_radius_out_full_n );

    SC_METHOD(thread_dx_rows_V_out_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( src_rows_V_out_full_n );
    sensitive << ( src_cols_V_out_full_n );
    sensitive << ( edge_rows_V_out_full_n );
    sensitive << ( edge_cols_V_out_full_n );
    sensitive << ( dx_rows_V_out_full_n );
    sensitive << ( dx_cols_V_out_full_n );
    sensitive << ( dy_rows_V_out_full_n );
    sensitive << ( dy_cols_V_out_full_n );
    sensitive << ( circles_rows_out_full_n );
    sensitive << ( circles_cols_out_full_n );
    sensitive << ( gray_thresh_out_full_n );
    sensitive << ( acc_thresh_out_full_n );
    sensitive << ( min_dist_out_full_n );
    sensitive << ( min_radius_out_full_n );
    sensitive << ( max_radius_out_full_n );

    SC_METHOD(thread_dy_cols_V_out_blk_n);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( dy_cols_V_out_full_n );

    SC_METHOD(thread_dy_cols_V_out_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( cols );
    sensitive << ( src_rows_V_out_full_n );
    sensitive << ( src_cols_V_out_full_n );
    sensitive << ( edge_rows_V_out_full_n );
    sensitive << ( edge_cols_V_out_full_n );
    sensitive << ( dx_rows_V_out_full_n );
    sensitive << ( dx_cols_V_out_full_n );
    sensitive << ( dy_rows_V_out_full_n );
    sensitive << ( dy_cols_V_out_full_n );
    sensitive << ( circles_rows_out_full_n );
    sensitive << ( circles_cols_out_full_n );
    sensitive << ( gray_thresh_out_full_n );
    sensitive << ( acc_thresh_out_full_n );
    sensitive << ( min_dist_out_full_n );
    sensitive << ( min_radius_out_full_n );
    sensitive << ( max_radius_out_full_n );

    SC_METHOD(thread_dy_cols_V_out_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( src_rows_V_out_full_n );
    sensitive << ( src_cols_V_out_full_n );
    sensitive << ( edge_rows_V_out_full_n );
    sensitive << ( edge_cols_V_out_full_n );
    sensitive << ( dx_rows_V_out_full_n );
    sensitive << ( dx_cols_V_out_full_n );
    sensitive << ( dy_rows_V_out_full_n );
    sensitive << ( dy_cols_V_out_full_n );
    sensitive << ( circles_rows_out_full_n );
    sensitive << ( circles_cols_out_full_n );
    sensitive << ( gray_thresh_out_full_n );
    sensitive << ( acc_thresh_out_full_n );
    sensitive << ( min_dist_out_full_n );
    sensitive << ( min_radius_out_full_n );
    sensitive << ( max_radius_out_full_n );

    SC_METHOD(thread_dy_rows_V_out_blk_n);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( dy_rows_V_out_full_n );

    SC_METHOD(thread_dy_rows_V_out_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( rows );
    sensitive << ( src_rows_V_out_full_n );
    sensitive << ( src_cols_V_out_full_n );
    sensitive << ( edge_rows_V_out_full_n );
    sensitive << ( edge_cols_V_out_full_n );
    sensitive << ( dx_rows_V_out_full_n );
    sensitive << ( dx_cols_V_out_full_n );
    sensitive << ( dy_rows_V_out_full_n );
    sensitive << ( dy_cols_V_out_full_n );
    sensitive << ( circles_rows_out_full_n );
    sensitive << ( circles_cols_out_full_n );
    sensitive << ( gray_thresh_out_full_n );
    sensitive << ( acc_thresh_out_full_n );
    sensitive << ( min_dist_out_full_n );
    sensitive << ( min_radius_out_full_n );
    sensitive << ( max_radius_out_full_n );

    SC_METHOD(thread_dy_rows_V_out_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( src_rows_V_out_full_n );
    sensitive << ( src_cols_V_out_full_n );
    sensitive << ( edge_rows_V_out_full_n );
    sensitive << ( edge_cols_V_out_full_n );
    sensitive << ( dx_rows_V_out_full_n );
    sensitive << ( dx_cols_V_out_full_n );
    sensitive << ( dy_rows_V_out_full_n );
    sensitive << ( dy_cols_V_out_full_n );
    sensitive << ( circles_rows_out_full_n );
    sensitive << ( circles_cols_out_full_n );
    sensitive << ( gray_thresh_out_full_n );
    sensitive << ( acc_thresh_out_full_n );
    sensitive << ( min_dist_out_full_n );
    sensitive << ( min_radius_out_full_n );
    sensitive << ( max_radius_out_full_n );

    SC_METHOD(thread_edge_cols_V_out_blk_n);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( edge_cols_V_out_full_n );

    SC_METHOD(thread_edge_cols_V_out_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( cols );
    sensitive << ( src_rows_V_out_full_n );
    sensitive << ( src_cols_V_out_full_n );
    sensitive << ( edge_rows_V_out_full_n );
    sensitive << ( edge_cols_V_out_full_n );
    sensitive << ( dx_rows_V_out_full_n );
    sensitive << ( dx_cols_V_out_full_n );
    sensitive << ( dy_rows_V_out_full_n );
    sensitive << ( dy_cols_V_out_full_n );
    sensitive << ( circles_rows_out_full_n );
    sensitive << ( circles_cols_out_full_n );
    sensitive << ( gray_thresh_out_full_n );
    sensitive << ( acc_thresh_out_full_n );
    sensitive << ( min_dist_out_full_n );
    sensitive << ( min_radius_out_full_n );
    sensitive << ( max_radius_out_full_n );

    SC_METHOD(thread_edge_cols_V_out_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( src_rows_V_out_full_n );
    sensitive << ( src_cols_V_out_full_n );
    sensitive << ( edge_rows_V_out_full_n );
    sensitive << ( edge_cols_V_out_full_n );
    sensitive << ( dx_rows_V_out_full_n );
    sensitive << ( dx_cols_V_out_full_n );
    sensitive << ( dy_rows_V_out_full_n );
    sensitive << ( dy_cols_V_out_full_n );
    sensitive << ( circles_rows_out_full_n );
    sensitive << ( circles_cols_out_full_n );
    sensitive << ( gray_thresh_out_full_n );
    sensitive << ( acc_thresh_out_full_n );
    sensitive << ( min_dist_out_full_n );
    sensitive << ( min_radius_out_full_n );
    sensitive << ( max_radius_out_full_n );

    SC_METHOD(thread_edge_rows_V_out_blk_n);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( edge_rows_V_out_full_n );

    SC_METHOD(thread_edge_rows_V_out_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( rows );
    sensitive << ( src_rows_V_out_full_n );
    sensitive << ( src_cols_V_out_full_n );
    sensitive << ( edge_rows_V_out_full_n );
    sensitive << ( edge_cols_V_out_full_n );
    sensitive << ( dx_rows_V_out_full_n );
    sensitive << ( dx_cols_V_out_full_n );
    sensitive << ( dy_rows_V_out_full_n );
    sensitive << ( dy_cols_V_out_full_n );
    sensitive << ( circles_rows_out_full_n );
    sensitive << ( circles_cols_out_full_n );
    sensitive << ( gray_thresh_out_full_n );
    sensitive << ( acc_thresh_out_full_n );
    sensitive << ( min_dist_out_full_n );
    sensitive << ( min_radius_out_full_n );
    sensitive << ( max_radius_out_full_n );

    SC_METHOD(thread_edge_rows_V_out_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( src_rows_V_out_full_n );
    sensitive << ( src_cols_V_out_full_n );
    sensitive << ( edge_rows_V_out_full_n );
    sensitive << ( edge_cols_V_out_full_n );
    sensitive << ( dx_rows_V_out_full_n );
    sensitive << ( dx_cols_V_out_full_n );
    sensitive << ( dy_rows_V_out_full_n );
    sensitive << ( dy_cols_V_out_full_n );
    sensitive << ( circles_rows_out_full_n );
    sensitive << ( circles_cols_out_full_n );
    sensitive << ( gray_thresh_out_full_n );
    sensitive << ( acc_thresh_out_full_n );
    sensitive << ( min_dist_out_full_n );
    sensitive << ( min_radius_out_full_n );
    sensitive << ( max_radius_out_full_n );

    SC_METHOD(thread_gray_thresh_out_blk_n);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( gray_thresh_out_full_n );

    SC_METHOD(thread_gray_thresh_out_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( gray_thresh );
    sensitive << ( src_rows_V_out_full_n );
    sensitive << ( src_cols_V_out_full_n );
    sensitive << ( edge_rows_V_out_full_n );
    sensitive << ( edge_cols_V_out_full_n );
    sensitive << ( dx_rows_V_out_full_n );
    sensitive << ( dx_cols_V_out_full_n );
    sensitive << ( dy_rows_V_out_full_n );
    sensitive << ( dy_cols_V_out_full_n );
    sensitive << ( circles_rows_out_full_n );
    sensitive << ( circles_cols_out_full_n );
    sensitive << ( gray_thresh_out_full_n );
    sensitive << ( acc_thresh_out_full_n );
    sensitive << ( min_dist_out_full_n );
    sensitive << ( min_radius_out_full_n );
    sensitive << ( max_radius_out_full_n );

    SC_METHOD(thread_gray_thresh_out_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( src_rows_V_out_full_n );
    sensitive << ( src_cols_V_out_full_n );
    sensitive << ( edge_rows_V_out_full_n );
    sensitive << ( edge_cols_V_out_full_n );
    sensitive << ( dx_rows_V_out_full_n );
    sensitive << ( dx_cols_V_out_full_n );
    sensitive << ( dy_rows_V_out_full_n );
    sensitive << ( dy_cols_V_out_full_n );
    sensitive << ( circles_rows_out_full_n );
    sensitive << ( circles_cols_out_full_n );
    sensitive << ( gray_thresh_out_full_n );
    sensitive << ( acc_thresh_out_full_n );
    sensitive << ( min_dist_out_full_n );
    sensitive << ( min_radius_out_full_n );
    sensitive << ( max_radius_out_full_n );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( src_rows_V_out_full_n );
    sensitive << ( src_cols_V_out_full_n );
    sensitive << ( edge_rows_V_out_full_n );
    sensitive << ( edge_cols_V_out_full_n );
    sensitive << ( dx_rows_V_out_full_n );
    sensitive << ( dx_cols_V_out_full_n );
    sensitive << ( dy_rows_V_out_full_n );
    sensitive << ( dy_cols_V_out_full_n );
    sensitive << ( circles_rows_out_full_n );
    sensitive << ( circles_cols_out_full_n );
    sensitive << ( gray_thresh_out_full_n );
    sensitive << ( acc_thresh_out_full_n );
    sensitive << ( min_dist_out_full_n );
    sensitive << ( min_radius_out_full_n );
    sensitive << ( max_radius_out_full_n );

    SC_METHOD(thread_max_radius_out_blk_n);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( max_radius_out_full_n );

    SC_METHOD(thread_max_radius_out_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( max_radius );
    sensitive << ( src_rows_V_out_full_n );
    sensitive << ( src_cols_V_out_full_n );
    sensitive << ( edge_rows_V_out_full_n );
    sensitive << ( edge_cols_V_out_full_n );
    sensitive << ( dx_rows_V_out_full_n );
    sensitive << ( dx_cols_V_out_full_n );
    sensitive << ( dy_rows_V_out_full_n );
    sensitive << ( dy_cols_V_out_full_n );
    sensitive << ( circles_rows_out_full_n );
    sensitive << ( circles_cols_out_full_n );
    sensitive << ( gray_thresh_out_full_n );
    sensitive << ( acc_thresh_out_full_n );
    sensitive << ( min_dist_out_full_n );
    sensitive << ( min_radius_out_full_n );
    sensitive << ( max_radius_out_full_n );

    SC_METHOD(thread_max_radius_out_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( src_rows_V_out_full_n );
    sensitive << ( src_cols_V_out_full_n );
    sensitive << ( edge_rows_V_out_full_n );
    sensitive << ( edge_cols_V_out_full_n );
    sensitive << ( dx_rows_V_out_full_n );
    sensitive << ( dx_cols_V_out_full_n );
    sensitive << ( dy_rows_V_out_full_n );
    sensitive << ( dy_cols_V_out_full_n );
    sensitive << ( circles_rows_out_full_n );
    sensitive << ( circles_cols_out_full_n );
    sensitive << ( gray_thresh_out_full_n );
    sensitive << ( acc_thresh_out_full_n );
    sensitive << ( min_dist_out_full_n );
    sensitive << ( min_radius_out_full_n );
    sensitive << ( max_radius_out_full_n );

    SC_METHOD(thread_min_dist_out_blk_n);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( min_dist_out_full_n );

    SC_METHOD(thread_min_dist_out_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( min_dist );
    sensitive << ( src_rows_V_out_full_n );
    sensitive << ( src_cols_V_out_full_n );
    sensitive << ( edge_rows_V_out_full_n );
    sensitive << ( edge_cols_V_out_full_n );
    sensitive << ( dx_rows_V_out_full_n );
    sensitive << ( dx_cols_V_out_full_n );
    sensitive << ( dy_rows_V_out_full_n );
    sensitive << ( dy_cols_V_out_full_n );
    sensitive << ( circles_rows_out_full_n );
    sensitive << ( circles_cols_out_full_n );
    sensitive << ( gray_thresh_out_full_n );
    sensitive << ( acc_thresh_out_full_n );
    sensitive << ( min_dist_out_full_n );
    sensitive << ( min_radius_out_full_n );
    sensitive << ( max_radius_out_full_n );

    SC_METHOD(thread_min_dist_out_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( src_rows_V_out_full_n );
    sensitive << ( src_cols_V_out_full_n );
    sensitive << ( edge_rows_V_out_full_n );
    sensitive << ( edge_cols_V_out_full_n );
    sensitive << ( dx_rows_V_out_full_n );
    sensitive << ( dx_cols_V_out_full_n );
    sensitive << ( dy_rows_V_out_full_n );
    sensitive << ( dy_cols_V_out_full_n );
    sensitive << ( circles_rows_out_full_n );
    sensitive << ( circles_cols_out_full_n );
    sensitive << ( gray_thresh_out_full_n );
    sensitive << ( acc_thresh_out_full_n );
    sensitive << ( min_dist_out_full_n );
    sensitive << ( min_radius_out_full_n );
    sensitive << ( max_radius_out_full_n );

    SC_METHOD(thread_min_radius_out_blk_n);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( min_radius_out_full_n );

    SC_METHOD(thread_min_radius_out_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( min_radius );
    sensitive << ( src_rows_V_out_full_n );
    sensitive << ( src_cols_V_out_full_n );
    sensitive << ( edge_rows_V_out_full_n );
    sensitive << ( edge_cols_V_out_full_n );
    sensitive << ( dx_rows_V_out_full_n );
    sensitive << ( dx_cols_V_out_full_n );
    sensitive << ( dy_rows_V_out_full_n );
    sensitive << ( dy_cols_V_out_full_n );
    sensitive << ( circles_rows_out_full_n );
    sensitive << ( circles_cols_out_full_n );
    sensitive << ( gray_thresh_out_full_n );
    sensitive << ( acc_thresh_out_full_n );
    sensitive << ( min_dist_out_full_n );
    sensitive << ( min_radius_out_full_n );
    sensitive << ( max_radius_out_full_n );

    SC_METHOD(thread_min_radius_out_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( src_rows_V_out_full_n );
    sensitive << ( src_cols_V_out_full_n );
    sensitive << ( edge_rows_V_out_full_n );
    sensitive << ( edge_cols_V_out_full_n );
    sensitive << ( dx_rows_V_out_full_n );
    sensitive << ( dx_cols_V_out_full_n );
    sensitive << ( dy_rows_V_out_full_n );
    sensitive << ( dy_cols_V_out_full_n );
    sensitive << ( circles_rows_out_full_n );
    sensitive << ( circles_cols_out_full_n );
    sensitive << ( gray_thresh_out_full_n );
    sensitive << ( acc_thresh_out_full_n );
    sensitive << ( min_dist_out_full_n );
    sensitive << ( min_radius_out_full_n );
    sensitive << ( max_radius_out_full_n );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_src_cols_V_out_blk_n);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( src_cols_V_out_full_n );

    SC_METHOD(thread_src_cols_V_out_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( cols );
    sensitive << ( src_rows_V_out_full_n );
    sensitive << ( src_cols_V_out_full_n );
    sensitive << ( edge_rows_V_out_full_n );
    sensitive << ( edge_cols_V_out_full_n );
    sensitive << ( dx_rows_V_out_full_n );
    sensitive << ( dx_cols_V_out_full_n );
    sensitive << ( dy_rows_V_out_full_n );
    sensitive << ( dy_cols_V_out_full_n );
    sensitive << ( circles_rows_out_full_n );
    sensitive << ( circles_cols_out_full_n );
    sensitive << ( gray_thresh_out_full_n );
    sensitive << ( acc_thresh_out_full_n );
    sensitive << ( min_dist_out_full_n );
    sensitive << ( min_radius_out_full_n );
    sensitive << ( max_radius_out_full_n );

    SC_METHOD(thread_src_cols_V_out_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( src_rows_V_out_full_n );
    sensitive << ( src_cols_V_out_full_n );
    sensitive << ( edge_rows_V_out_full_n );
    sensitive << ( edge_cols_V_out_full_n );
    sensitive << ( dx_rows_V_out_full_n );
    sensitive << ( dx_cols_V_out_full_n );
    sensitive << ( dy_rows_V_out_full_n );
    sensitive << ( dy_cols_V_out_full_n );
    sensitive << ( circles_rows_out_full_n );
    sensitive << ( circles_cols_out_full_n );
    sensitive << ( gray_thresh_out_full_n );
    sensitive << ( acc_thresh_out_full_n );
    sensitive << ( min_dist_out_full_n );
    sensitive << ( min_radius_out_full_n );
    sensitive << ( max_radius_out_full_n );

    SC_METHOD(thread_src_rows_V_out_blk_n);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( src_rows_V_out_full_n );

    SC_METHOD(thread_src_rows_V_out_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( rows );
    sensitive << ( src_rows_V_out_full_n );
    sensitive << ( src_cols_V_out_full_n );
    sensitive << ( edge_rows_V_out_full_n );
    sensitive << ( edge_cols_V_out_full_n );
    sensitive << ( dx_rows_V_out_full_n );
    sensitive << ( dx_cols_V_out_full_n );
    sensitive << ( dy_rows_V_out_full_n );
    sensitive << ( dy_cols_V_out_full_n );
    sensitive << ( circles_rows_out_full_n );
    sensitive << ( circles_cols_out_full_n );
    sensitive << ( gray_thresh_out_full_n );
    sensitive << ( acc_thresh_out_full_n );
    sensitive << ( min_dist_out_full_n );
    sensitive << ( min_radius_out_full_n );
    sensitive << ( max_radius_out_full_n );

    SC_METHOD(thread_src_rows_V_out_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( src_rows_V_out_full_n );
    sensitive << ( src_cols_V_out_full_n );
    sensitive << ( edge_rows_V_out_full_n );
    sensitive << ( edge_cols_V_out_full_n );
    sensitive << ( dx_rows_V_out_full_n );
    sensitive << ( dx_cols_V_out_full_n );
    sensitive << ( dy_rows_V_out_full_n );
    sensitive << ( dy_cols_V_out_full_n );
    sensitive << ( circles_rows_out_full_n );
    sensitive << ( circles_cols_out_full_n );
    sensitive << ( gray_thresh_out_full_n );
    sensitive << ( acc_thresh_out_full_n );
    sensitive << ( min_dist_out_full_n );
    sensitive << ( min_radius_out_full_n );
    sensitive << ( max_radius_out_full_n );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( src_rows_V_out_full_n );
    sensitive << ( src_cols_V_out_full_n );
    sensitive << ( edge_rows_V_out_full_n );
    sensitive << ( edge_cols_V_out_full_n );
    sensitive << ( dx_rows_V_out_full_n );
    sensitive << ( dx_cols_V_out_full_n );
    sensitive << ( dy_rows_V_out_full_n );
    sensitive << ( dy_cols_V_out_full_n );
    sensitive << ( circles_rows_out_full_n );
    sensitive << ( circles_cols_out_full_n );
    sensitive << ( gray_thresh_out_full_n );
    sensitive << ( acc_thresh_out_full_n );
    sensitive << ( min_dist_out_full_n );
    sensitive << ( min_radius_out_full_n );
    sensitive << ( max_radius_out_full_n );

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "1";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Block_Mat_exit414_pr_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, rows, "(port)rows");
    sc_trace(mVcdFile, cols, "(port)cols");
    sc_trace(mVcdFile, gray_thresh, "(port)gray_thresh");
    sc_trace(mVcdFile, acc_thresh, "(port)acc_thresh");
    sc_trace(mVcdFile, min_dist, "(port)min_dist");
    sc_trace(mVcdFile, min_radius, "(port)min_radius");
    sc_trace(mVcdFile, max_radius, "(port)max_radius");
    sc_trace(mVcdFile, src_rows_V_out_din, "(port)src_rows_V_out_din");
    sc_trace(mVcdFile, src_rows_V_out_full_n, "(port)src_rows_V_out_full_n");
    sc_trace(mVcdFile, src_rows_V_out_write, "(port)src_rows_V_out_write");
    sc_trace(mVcdFile, src_cols_V_out_din, "(port)src_cols_V_out_din");
    sc_trace(mVcdFile, src_cols_V_out_full_n, "(port)src_cols_V_out_full_n");
    sc_trace(mVcdFile, src_cols_V_out_write, "(port)src_cols_V_out_write");
    sc_trace(mVcdFile, edge_rows_V_out_din, "(port)edge_rows_V_out_din");
    sc_trace(mVcdFile, edge_rows_V_out_full_n, "(port)edge_rows_V_out_full_n");
    sc_trace(mVcdFile, edge_rows_V_out_write, "(port)edge_rows_V_out_write");
    sc_trace(mVcdFile, edge_cols_V_out_din, "(port)edge_cols_V_out_din");
    sc_trace(mVcdFile, edge_cols_V_out_full_n, "(port)edge_cols_V_out_full_n");
    sc_trace(mVcdFile, edge_cols_V_out_write, "(port)edge_cols_V_out_write");
    sc_trace(mVcdFile, dx_rows_V_out_din, "(port)dx_rows_V_out_din");
    sc_trace(mVcdFile, dx_rows_V_out_full_n, "(port)dx_rows_V_out_full_n");
    sc_trace(mVcdFile, dx_rows_V_out_write, "(port)dx_rows_V_out_write");
    sc_trace(mVcdFile, dx_cols_V_out_din, "(port)dx_cols_V_out_din");
    sc_trace(mVcdFile, dx_cols_V_out_full_n, "(port)dx_cols_V_out_full_n");
    sc_trace(mVcdFile, dx_cols_V_out_write, "(port)dx_cols_V_out_write");
    sc_trace(mVcdFile, dy_rows_V_out_din, "(port)dy_rows_V_out_din");
    sc_trace(mVcdFile, dy_rows_V_out_full_n, "(port)dy_rows_V_out_full_n");
    sc_trace(mVcdFile, dy_rows_V_out_write, "(port)dy_rows_V_out_write");
    sc_trace(mVcdFile, dy_cols_V_out_din, "(port)dy_cols_V_out_din");
    sc_trace(mVcdFile, dy_cols_V_out_full_n, "(port)dy_cols_V_out_full_n");
    sc_trace(mVcdFile, dy_cols_V_out_write, "(port)dy_cols_V_out_write");
    sc_trace(mVcdFile, circles_rows_out_din, "(port)circles_rows_out_din");
    sc_trace(mVcdFile, circles_rows_out_full_n, "(port)circles_rows_out_full_n");
    sc_trace(mVcdFile, circles_rows_out_write, "(port)circles_rows_out_write");
    sc_trace(mVcdFile, circles_cols_out_din, "(port)circles_cols_out_din");
    sc_trace(mVcdFile, circles_cols_out_full_n, "(port)circles_cols_out_full_n");
    sc_trace(mVcdFile, circles_cols_out_write, "(port)circles_cols_out_write");
    sc_trace(mVcdFile, gray_thresh_out_din, "(port)gray_thresh_out_din");
    sc_trace(mVcdFile, gray_thresh_out_full_n, "(port)gray_thresh_out_full_n");
    sc_trace(mVcdFile, gray_thresh_out_write, "(port)gray_thresh_out_write");
    sc_trace(mVcdFile, acc_thresh_out_din, "(port)acc_thresh_out_din");
    sc_trace(mVcdFile, acc_thresh_out_full_n, "(port)acc_thresh_out_full_n");
    sc_trace(mVcdFile, acc_thresh_out_write, "(port)acc_thresh_out_write");
    sc_trace(mVcdFile, min_dist_out_din, "(port)min_dist_out_din");
    sc_trace(mVcdFile, min_dist_out_full_n, "(port)min_dist_out_full_n");
    sc_trace(mVcdFile, min_dist_out_write, "(port)min_dist_out_write");
    sc_trace(mVcdFile, min_radius_out_din, "(port)min_radius_out_din");
    sc_trace(mVcdFile, min_radius_out_full_n, "(port)min_radius_out_full_n");
    sc_trace(mVcdFile, min_radius_out_write, "(port)min_radius_out_write");
    sc_trace(mVcdFile, max_radius_out_din, "(port)max_radius_out_din");
    sc_trace(mVcdFile, max_radius_out_full_n, "(port)max_radius_out_full_n");
    sc_trace(mVcdFile, max_radius_out_write, "(port)max_radius_out_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, src_rows_V_out_blk_n, "src_rows_V_out_blk_n");
    sc_trace(mVcdFile, src_cols_V_out_blk_n, "src_cols_V_out_blk_n");
    sc_trace(mVcdFile, edge_rows_V_out_blk_n, "edge_rows_V_out_blk_n");
    sc_trace(mVcdFile, edge_cols_V_out_blk_n, "edge_cols_V_out_blk_n");
    sc_trace(mVcdFile, dx_rows_V_out_blk_n, "dx_rows_V_out_blk_n");
    sc_trace(mVcdFile, dx_cols_V_out_blk_n, "dx_cols_V_out_blk_n");
    sc_trace(mVcdFile, dy_rows_V_out_blk_n, "dy_rows_V_out_blk_n");
    sc_trace(mVcdFile, dy_cols_V_out_blk_n, "dy_cols_V_out_blk_n");
    sc_trace(mVcdFile, circles_rows_out_blk_n, "circles_rows_out_blk_n");
    sc_trace(mVcdFile, circles_cols_out_blk_n, "circles_cols_out_blk_n");
    sc_trace(mVcdFile, gray_thresh_out_blk_n, "gray_thresh_out_blk_n");
    sc_trace(mVcdFile, acc_thresh_out_blk_n, "acc_thresh_out_blk_n");
    sc_trace(mVcdFile, min_dist_out_blk_n, "min_dist_out_blk_n");
    sc_trace(mVcdFile, min_radius_out_blk_n, "min_radius_out_blk_n");
    sc_trace(mVcdFile, max_radius_out_blk_n, "max_radius_out_blk_n");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

Block_Mat_exit414_pr::~Block_Mat_exit414_pr() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Block_Mat_exit414_pr::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((!(esl_seteq<1,1,1>(min_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(min_dist_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, acc_thresh_out_full_n.read()) || esl_seteq<1,1,1>(gray_thresh_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_cols_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_rows_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(max_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
}

void Block_Mat_exit414_pr::thread_acc_thresh_out_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        acc_thresh_out_blk_n = acc_thresh_out_full_n.read();
    } else {
        acc_thresh_out_blk_n = ap_const_logic_1;
    }
}

void Block_Mat_exit414_pr::thread_acc_thresh_out_din() {
    acc_thresh_out_din = acc_thresh.read();
}

void Block_Mat_exit414_pr::thread_acc_thresh_out_write() {
    if ((!(esl_seteq<1,1,1>(min_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(min_dist_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, acc_thresh_out_full_n.read()) || esl_seteq<1,1,1>(gray_thresh_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_cols_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_rows_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(max_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        acc_thresh_out_write = ap_const_logic_1;
    } else {
        acc_thresh_out_write = ap_const_logic_0;
    }
}

void Block_Mat_exit414_pr::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Block_Mat_exit414_pr::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(min_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(min_dist_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, acc_thresh_out_full_n.read()) || esl_seteq<1,1,1>(gray_thresh_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_cols_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_rows_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(max_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void Block_Mat_exit414_pr::thread_ap_done() {
    if ((!(esl_seteq<1,1,1>(min_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(min_dist_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, acc_thresh_out_full_n.read()) || esl_seteq<1,1,1>(gray_thresh_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_cols_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_rows_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(max_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Block_Mat_exit414_pr::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Block_Mat_exit414_pr::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void Block_Mat_exit414_pr::thread_circles_cols_out_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        circles_cols_out_blk_n = circles_cols_out_full_n.read();
    } else {
        circles_cols_out_blk_n = ap_const_logic_1;
    }
}

void Block_Mat_exit414_pr::thread_circles_cols_out_din() {
    circles_cols_out_din = ap_const_lv8_64;
}

void Block_Mat_exit414_pr::thread_circles_cols_out_write() {
    if ((!(esl_seteq<1,1,1>(min_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(min_dist_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, acc_thresh_out_full_n.read()) || esl_seteq<1,1,1>(gray_thresh_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_cols_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_rows_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(max_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        circles_cols_out_write = ap_const_logic_1;
    } else {
        circles_cols_out_write = ap_const_logic_0;
    }
}

void Block_Mat_exit414_pr::thread_circles_rows_out_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        circles_rows_out_blk_n = circles_rows_out_full_n.read();
    } else {
        circles_rows_out_blk_n = ap_const_logic_1;
    }
}

void Block_Mat_exit414_pr::thread_circles_rows_out_din() {
    circles_rows_out_din = ap_const_lv3_3;
}

void Block_Mat_exit414_pr::thread_circles_rows_out_write() {
    if ((!(esl_seteq<1,1,1>(min_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(min_dist_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, acc_thresh_out_full_n.read()) || esl_seteq<1,1,1>(gray_thresh_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_cols_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_rows_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(max_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        circles_rows_out_write = ap_const_logic_1;
    } else {
        circles_rows_out_write = ap_const_logic_0;
    }
}

void Block_Mat_exit414_pr::thread_dx_cols_V_out_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        dx_cols_V_out_blk_n = dx_cols_V_out_full_n.read();
    } else {
        dx_cols_V_out_blk_n = ap_const_logic_1;
    }
}

void Block_Mat_exit414_pr::thread_dx_cols_V_out_din() {
    dx_cols_V_out_din = cols.read();
}

void Block_Mat_exit414_pr::thread_dx_cols_V_out_write() {
    if ((!(esl_seteq<1,1,1>(min_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(min_dist_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, acc_thresh_out_full_n.read()) || esl_seteq<1,1,1>(gray_thresh_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_cols_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_rows_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(max_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        dx_cols_V_out_write = ap_const_logic_1;
    } else {
        dx_cols_V_out_write = ap_const_logic_0;
    }
}

void Block_Mat_exit414_pr::thread_dx_rows_V_out_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        dx_rows_V_out_blk_n = dx_rows_V_out_full_n.read();
    } else {
        dx_rows_V_out_blk_n = ap_const_logic_1;
    }
}

void Block_Mat_exit414_pr::thread_dx_rows_V_out_din() {
    dx_rows_V_out_din = rows.read();
}

void Block_Mat_exit414_pr::thread_dx_rows_V_out_write() {
    if ((!(esl_seteq<1,1,1>(min_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(min_dist_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, acc_thresh_out_full_n.read()) || esl_seteq<1,1,1>(gray_thresh_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_cols_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_rows_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(max_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        dx_rows_V_out_write = ap_const_logic_1;
    } else {
        dx_rows_V_out_write = ap_const_logic_0;
    }
}

void Block_Mat_exit414_pr::thread_dy_cols_V_out_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        dy_cols_V_out_blk_n = dy_cols_V_out_full_n.read();
    } else {
        dy_cols_V_out_blk_n = ap_const_logic_1;
    }
}

void Block_Mat_exit414_pr::thread_dy_cols_V_out_din() {
    dy_cols_V_out_din = cols.read();
}

void Block_Mat_exit414_pr::thread_dy_cols_V_out_write() {
    if ((!(esl_seteq<1,1,1>(min_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(min_dist_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, acc_thresh_out_full_n.read()) || esl_seteq<1,1,1>(gray_thresh_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_cols_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_rows_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(max_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        dy_cols_V_out_write = ap_const_logic_1;
    } else {
        dy_cols_V_out_write = ap_const_logic_0;
    }
}

void Block_Mat_exit414_pr::thread_dy_rows_V_out_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        dy_rows_V_out_blk_n = dy_rows_V_out_full_n.read();
    } else {
        dy_rows_V_out_blk_n = ap_const_logic_1;
    }
}

void Block_Mat_exit414_pr::thread_dy_rows_V_out_din() {
    dy_rows_V_out_din = rows.read();
}

void Block_Mat_exit414_pr::thread_dy_rows_V_out_write() {
    if ((!(esl_seteq<1,1,1>(min_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(min_dist_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, acc_thresh_out_full_n.read()) || esl_seteq<1,1,1>(gray_thresh_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_cols_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_rows_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(max_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        dy_rows_V_out_write = ap_const_logic_1;
    } else {
        dy_rows_V_out_write = ap_const_logic_0;
    }
}

void Block_Mat_exit414_pr::thread_edge_cols_V_out_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        edge_cols_V_out_blk_n = edge_cols_V_out_full_n.read();
    } else {
        edge_cols_V_out_blk_n = ap_const_logic_1;
    }
}

void Block_Mat_exit414_pr::thread_edge_cols_V_out_din() {
    edge_cols_V_out_din = cols.read();
}

void Block_Mat_exit414_pr::thread_edge_cols_V_out_write() {
    if ((!(esl_seteq<1,1,1>(min_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(min_dist_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, acc_thresh_out_full_n.read()) || esl_seteq<1,1,1>(gray_thresh_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_cols_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_rows_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(max_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        edge_cols_V_out_write = ap_const_logic_1;
    } else {
        edge_cols_V_out_write = ap_const_logic_0;
    }
}

void Block_Mat_exit414_pr::thread_edge_rows_V_out_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        edge_rows_V_out_blk_n = edge_rows_V_out_full_n.read();
    } else {
        edge_rows_V_out_blk_n = ap_const_logic_1;
    }
}

void Block_Mat_exit414_pr::thread_edge_rows_V_out_din() {
    edge_rows_V_out_din = rows.read();
}

void Block_Mat_exit414_pr::thread_edge_rows_V_out_write() {
    if ((!(esl_seteq<1,1,1>(min_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(min_dist_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, acc_thresh_out_full_n.read()) || esl_seteq<1,1,1>(gray_thresh_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_cols_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_rows_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(max_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        edge_rows_V_out_write = ap_const_logic_1;
    } else {
        edge_rows_V_out_write = ap_const_logic_0;
    }
}

void Block_Mat_exit414_pr::thread_gray_thresh_out_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        gray_thresh_out_blk_n = gray_thresh_out_full_n.read();
    } else {
        gray_thresh_out_blk_n = ap_const_logic_1;
    }
}

void Block_Mat_exit414_pr::thread_gray_thresh_out_din() {
    gray_thresh_out_din = gray_thresh.read();
}

void Block_Mat_exit414_pr::thread_gray_thresh_out_write() {
    if ((!(esl_seteq<1,1,1>(min_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(min_dist_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, acc_thresh_out_full_n.read()) || esl_seteq<1,1,1>(gray_thresh_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_cols_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_rows_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(max_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        gray_thresh_out_write = ap_const_logic_1;
    } else {
        gray_thresh_out_write = ap_const_logic_0;
    }
}

void Block_Mat_exit414_pr::thread_internal_ap_ready() {
    if ((!(esl_seteq<1,1,1>(min_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(min_dist_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, acc_thresh_out_full_n.read()) || esl_seteq<1,1,1>(gray_thresh_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_cols_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_rows_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(max_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void Block_Mat_exit414_pr::thread_max_radius_out_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        max_radius_out_blk_n = max_radius_out_full_n.read();
    } else {
        max_radius_out_blk_n = ap_const_logic_1;
    }
}

void Block_Mat_exit414_pr::thread_max_radius_out_din() {
    max_radius_out_din = max_radius.read();
}

void Block_Mat_exit414_pr::thread_max_radius_out_write() {
    if ((!(esl_seteq<1,1,1>(min_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(min_dist_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, acc_thresh_out_full_n.read()) || esl_seteq<1,1,1>(gray_thresh_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_cols_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_rows_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(max_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        max_radius_out_write = ap_const_logic_1;
    } else {
        max_radius_out_write = ap_const_logic_0;
    }
}

void Block_Mat_exit414_pr::thread_min_dist_out_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        min_dist_out_blk_n = min_dist_out_full_n.read();
    } else {
        min_dist_out_blk_n = ap_const_logic_1;
    }
}

void Block_Mat_exit414_pr::thread_min_dist_out_din() {
    min_dist_out_din = min_dist.read();
}

void Block_Mat_exit414_pr::thread_min_dist_out_write() {
    if ((!(esl_seteq<1,1,1>(min_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(min_dist_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, acc_thresh_out_full_n.read()) || esl_seteq<1,1,1>(gray_thresh_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_cols_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_rows_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(max_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        min_dist_out_write = ap_const_logic_1;
    } else {
        min_dist_out_write = ap_const_logic_0;
    }
}

void Block_Mat_exit414_pr::thread_min_radius_out_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        min_radius_out_blk_n = min_radius_out_full_n.read();
    } else {
        min_radius_out_blk_n = ap_const_logic_1;
    }
}

void Block_Mat_exit414_pr::thread_min_radius_out_din() {
    min_radius_out_din = min_radius.read();
}

void Block_Mat_exit414_pr::thread_min_radius_out_write() {
    if ((!(esl_seteq<1,1,1>(min_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(min_dist_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, acc_thresh_out_full_n.read()) || esl_seteq<1,1,1>(gray_thresh_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_cols_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_rows_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(max_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        min_radius_out_write = ap_const_logic_1;
    } else {
        min_radius_out_write = ap_const_logic_0;
    }
}

void Block_Mat_exit414_pr::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void Block_Mat_exit414_pr::thread_src_cols_V_out_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        src_cols_V_out_blk_n = src_cols_V_out_full_n.read();
    } else {
        src_cols_V_out_blk_n = ap_const_logic_1;
    }
}

void Block_Mat_exit414_pr::thread_src_cols_V_out_din() {
    src_cols_V_out_din = cols.read();
}

void Block_Mat_exit414_pr::thread_src_cols_V_out_write() {
    if ((!(esl_seteq<1,1,1>(min_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(min_dist_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, acc_thresh_out_full_n.read()) || esl_seteq<1,1,1>(gray_thresh_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_cols_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_rows_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(max_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        src_cols_V_out_write = ap_const_logic_1;
    } else {
        src_cols_V_out_write = ap_const_logic_0;
    }
}

void Block_Mat_exit414_pr::thread_src_rows_V_out_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        src_rows_V_out_blk_n = src_rows_V_out_full_n.read();
    } else {
        src_rows_V_out_blk_n = ap_const_logic_1;
    }
}

void Block_Mat_exit414_pr::thread_src_rows_V_out_din() {
    src_rows_V_out_din = rows.read();
}

void Block_Mat_exit414_pr::thread_src_rows_V_out_write() {
    if ((!(esl_seteq<1,1,1>(min_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(min_dist_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, acc_thresh_out_full_n.read()) || esl_seteq<1,1,1>(gray_thresh_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_cols_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(circles_rows_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dy_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(dx_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(edge_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_cols_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_rows_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(max_radius_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        src_rows_V_out_write = ap_const_logic_1;
    } else {
        src_rows_V_out_write = ap_const_logic_0;
    }
}

void Block_Mat_exit414_pr::thread_start_out() {
    start_out = real_start.read();
}

void Block_Mat_exit414_pr::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void Block_Mat_exit414_pr::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

