// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Threshold.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Threshold::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Threshold::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> Threshold::ap_ST_fsm_state1 = "1";
const sc_lv<4> Threshold::ap_ST_fsm_state2 = "10";
const sc_lv<4> Threshold::ap_ST_fsm_pp0_stage0 = "100";
const sc_lv<4> Threshold::ap_ST_fsm_state5 = "1000";
const sc_lv<32> Threshold::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool Threshold::ap_const_boolean_1 = true;
const sc_lv<32> Threshold::ap_const_lv32_2 = "10";
const bool Threshold::ap_const_boolean_0 = false;
const sc_lv<1> Threshold::ap_const_lv1_1 = "1";
const sc_lv<32> Threshold::ap_const_lv32_1 = "1";
const sc_lv<1> Threshold::ap_const_lv1_0 = "0";
const sc_lv<31> Threshold::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<32> Threshold::ap_const_lv32_3 = "11";
const sc_lv<31> Threshold::ap_const_lv31_1 = "1";
const sc_lv<16> Threshold::ap_const_lv16_0 = "0000000000000000";
const sc_lv<32> Threshold::ap_const_lv32_F = "1111";
const sc_lv<8> Threshold::ap_const_lv8_FF = "11111111";
const sc_lv<8> Threshold::ap_const_lv8_0 = "00000000";

Threshold::Threshold(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( src_data_stream_V_empty_n );
    sensitive << ( dst_data_stream_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_26_i_reg_227 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( src_data_stream_V_empty_n );
    sensitive << ( dst_data_stream_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_26_i_reg_227 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( src_data_stream_V_empty_n );
    sensitive << ( dst_data_stream_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_26_i_reg_227 );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( src_rows_V_empty_n );
    sensitive << ( src_cols_V_empty_n );
    sensitive << ( thresh_empty_n );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter1);
    sensitive << ( src_data_stream_V_empty_n );
    sensitive << ( dst_data_stream_V_full_n );
    sensitive << ( tmp_26_i_reg_227 );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state3);
    sensitive << ( tmp_26_i_fu_142_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( tmp_i_fu_127_p2 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( tmp_i_fu_127_p2 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_dst_data_stream_V_blk_n);
    sensitive << ( dst_data_stream_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_26_i_reg_227 );

    SC_METHOD(thread_dst_data_stream_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_26_i_reg_227 );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( tmp_28_i_fu_189_p2 );

    SC_METHOD(thread_dst_data_stream_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_26_i_reg_227 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_i_cast_i_fu_123_p1);
    sensitive << ( i_i_reg_101 );

    SC_METHOD(thread_i_fu_132_p2);
    sensitive << ( i_i_reg_101 );

    SC_METHOD(thread_j_cast_i_fu_138_p1);
    sensitive << ( j_i_reg_112 );

    SC_METHOD(thread_j_fu_147_p2);
    sensitive << ( j_i_reg_112 );

    SC_METHOD(thread_p_Result_s_fu_159_p4);
    sensitive << ( xs_V_1_fu_153_p2 );

    SC_METHOD(thread_src_cols_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( src_cols_V_empty_n );

    SC_METHOD(thread_src_cols_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( src_rows_V_empty_n );
    sensitive << ( src_cols_V_empty_n );
    sensitive << ( thresh_empty_n );

    SC_METHOD(thread_src_data_stream_V_blk_n);
    sensitive << ( src_data_stream_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_26_i_reg_227 );

    SC_METHOD(thread_src_data_stream_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_26_i_reg_227 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_src_rows_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( src_rows_V_empty_n );

    SC_METHOD(thread_src_rows_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( src_rows_V_empty_n );
    sensitive << ( src_cols_V_empty_n );
    sensitive << ( thresh_empty_n );

    SC_METHOD(thread_thresh_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( thresh_empty_n );

    SC_METHOD(thread_thresh_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( src_rows_V_empty_n );
    sensitive << ( src_cols_V_empty_n );
    sensitive << ( thresh_empty_n );

    SC_METHOD(thread_tmp_26_i_fu_142_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( cols_reg_213 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( j_cast_i_fu_138_p1 );

    SC_METHOD(thread_tmp_27_i_fu_185_p1);
    sensitive << ( val1_fu_177_p3 );

    SC_METHOD(thread_tmp_28_i_fu_189_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_26_i_reg_227 );
    sensitive << ( thresh_read_reg_203 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_27_i_fu_185_p1 );

    SC_METHOD(thread_tmp_fu_169_p3);
    sensitive << ( src_data_stream_V_dout );

    SC_METHOD(thread_tmp_i_fu_127_p2);
    sensitive << ( rows_reg_208 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_cast_i_fu_123_p1 );

    SC_METHOD(thread_val1_fu_177_p3);
    sensitive << ( src_data_stream_V_dout );
    sensitive << ( tmp_fu_169_p3 );
    sensitive << ( p_Result_s_fu_159_p4 );

    SC_METHOD(thread_xs_V_1_fu_153_p2);
    sensitive << ( src_data_stream_V_dout );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( src_rows_V_empty_n );
    sensitive << ( src_cols_V_empty_n );
    sensitive << ( thresh_empty_n );
    sensitive << ( tmp_i_fu_127_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_26_i_fu_142_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Threshold_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, src_rows_V_dout, "(port)src_rows_V_dout");
    sc_trace(mVcdFile, src_rows_V_empty_n, "(port)src_rows_V_empty_n");
    sc_trace(mVcdFile, src_rows_V_read, "(port)src_rows_V_read");
    sc_trace(mVcdFile, src_cols_V_dout, "(port)src_cols_V_dout");
    sc_trace(mVcdFile, src_cols_V_empty_n, "(port)src_cols_V_empty_n");
    sc_trace(mVcdFile, src_cols_V_read, "(port)src_cols_V_read");
    sc_trace(mVcdFile, src_data_stream_V_dout, "(port)src_data_stream_V_dout");
    sc_trace(mVcdFile, src_data_stream_V_empty_n, "(port)src_data_stream_V_empty_n");
    sc_trace(mVcdFile, src_data_stream_V_read, "(port)src_data_stream_V_read");
    sc_trace(mVcdFile, dst_data_stream_V_din, "(port)dst_data_stream_V_din");
    sc_trace(mVcdFile, dst_data_stream_V_full_n, "(port)dst_data_stream_V_full_n");
    sc_trace(mVcdFile, dst_data_stream_V_write, "(port)dst_data_stream_V_write");
    sc_trace(mVcdFile, thresh_dout, "(port)thresh_dout");
    sc_trace(mVcdFile, thresh_empty_n, "(port)thresh_empty_n");
    sc_trace(mVcdFile, thresh_read, "(port)thresh_read");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, src_rows_V_blk_n, "src_rows_V_blk_n");
    sc_trace(mVcdFile, src_cols_V_blk_n, "src_cols_V_blk_n");
    sc_trace(mVcdFile, src_data_stream_V_blk_n, "src_data_stream_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, tmp_26_i_reg_227, "tmp_26_i_reg_227");
    sc_trace(mVcdFile, dst_data_stream_V_blk_n, "dst_data_stream_V_blk_n");
    sc_trace(mVcdFile, thresh_blk_n, "thresh_blk_n");
    sc_trace(mVcdFile, j_i_reg_112, "j_i_reg_112");
    sc_trace(mVcdFile, thresh_read_reg_203, "thresh_read_reg_203");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, rows_reg_208, "rows_reg_208");
    sc_trace(mVcdFile, cols_reg_213, "cols_reg_213");
    sc_trace(mVcdFile, tmp_i_fu_127_p2, "tmp_i_fu_127_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_fu_132_p2, "i_fu_132_p2");
    sc_trace(mVcdFile, i_reg_222, "i_reg_222");
    sc_trace(mVcdFile, tmp_26_i_fu_142_p2, "tmp_26_i_fu_142_p2");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter0, "ap_block_state3_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter1, "ap_block_state4_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, j_fu_147_p2, "j_fu_147_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state3, "ap_condition_pp0_exit_iter0_state3");
    sc_trace(mVcdFile, i_i_reg_101, "i_i_reg_101");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, i_cast_i_fu_123_p1, "i_cast_i_fu_123_p1");
    sc_trace(mVcdFile, j_cast_i_fu_138_p1, "j_cast_i_fu_138_p1");
    sc_trace(mVcdFile, xs_V_1_fu_153_p2, "xs_V_1_fu_153_p2");
    sc_trace(mVcdFile, tmp_fu_169_p3, "tmp_fu_169_p3");
    sc_trace(mVcdFile, p_Result_s_fu_159_p4, "p_Result_s_fu_159_p4");
    sc_trace(mVcdFile, val1_fu_177_p3, "val1_fu_177_p3");
    sc_trace(mVcdFile, tmp_27_i_fu_185_p1, "tmp_27_i_fu_185_p1");
    sc_trace(mVcdFile, tmp_28_i_fu_189_p2, "tmp_28_i_fu_189_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

Threshold::~Threshold() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Threshold::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(tmp_i_fu_127_p2.read(), ap_const_lv1_0) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(tmp_i_fu_127_p2.read(), ap_const_lv1_1) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state3.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(tmp_i_fu_127_p2.read(), ap_const_lv1_1) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_i_reg_101 = i_reg_222.read();
    } else if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(thresh_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_cols_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_rows_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        i_i_reg_101 = ap_const_lv31_0;
    }
    if ((esl_seteq<1,1,1>(tmp_i_fu_127_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        j_i_reg_112 = ap_const_lv31_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_26_i_fu_142_p2.read()))) {
        j_i_reg_112 = j_fu_147_p2.read();
    }
    if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(thresh_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_cols_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_rows_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        cols_reg_213 = src_cols_V_dout.read();
        rows_reg_208 = src_rows_V_dout.read();
        thresh_read_reg_203 = thresh_dout.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_222 = i_fu_132_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_26_i_reg_227 = tmp_26_i_fu_142_p2.read();
    }
}

void Threshold::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[2];
}

void Threshold::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Threshold::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Threshold::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[3];
}

void Threshold::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Threshold::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && ((esl_seteq<1,1,1>(tmp_26_i_reg_227.read(), ap_const_lv1_1) && 
   esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_V_empty_n.read())) || 
  (esl_seteq<1,1,1>(tmp_26_i_reg_227.read(), ap_const_lv1_1) && 
   esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_V_full_n.read()))));
}

void Threshold::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && ((esl_seteq<1,1,1>(tmp_26_i_reg_227.read(), ap_const_lv1_1) && 
   esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_V_empty_n.read())) || 
  (esl_seteq<1,1,1>(tmp_26_i_reg_227.read(), ap_const_lv1_1) && 
   esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_V_full_n.read()))));
}

void Threshold::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && ((esl_seteq<1,1,1>(tmp_26_i_reg_227.read(), ap_const_lv1_1) && 
   esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_V_empty_n.read())) || 
  (esl_seteq<1,1,1>(tmp_26_i_reg_227.read(), ap_const_lv1_1) && 
   esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_V_full_n.read()))));
}

void Threshold::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(thresh_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_cols_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_rows_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void Threshold::thread_ap_block_state3_pp0_stage0_iter0() {
    ap_block_state3_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Threshold::thread_ap_block_state4_pp0_stage0_iter1() {
    ap_block_state4_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(tmp_26_i_reg_227.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_V_empty_n.read())) || (esl_seteq<1,1,1>(tmp_26_i_reg_227.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_V_full_n.read())));
}

void Threshold::thread_ap_condition_pp0_exit_iter0_state3() {
    if (esl_seteq<1,1,1>(tmp_26_i_fu_142_p2.read(), ap_const_lv1_0)) {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_0;
    }
}

void Threshold::thread_ap_done() {
    if ((esl_seteq<1,1,1>(tmp_i_fu_127_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Threshold::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void Threshold::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Threshold::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void Threshold::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(tmp_i_fu_127_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Threshold::thread_dst_data_stream_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(tmp_26_i_reg_227.read(), ap_const_lv1_1))) {
        dst_data_stream_V_blk_n = dst_data_stream_V_full_n.read();
    } else {
        dst_data_stream_V_blk_n = ap_const_logic_1;
    }
}

void Threshold::thread_dst_data_stream_V_din() {
    dst_data_stream_V_din = (!tmp_28_i_fu_189_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_28_i_fu_189_p2.read()[0].to_bool())? ap_const_lv8_FF: ap_const_lv8_0);
}

void Threshold::thread_dst_data_stream_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(tmp_26_i_reg_227.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        dst_data_stream_V_write = ap_const_logic_1;
    } else {
        dst_data_stream_V_write = ap_const_logic_0;
    }
}

void Threshold::thread_i_cast_i_fu_123_p1() {
    i_cast_i_fu_123_p1 = esl_zext<32,31>(i_i_reg_101.read());
}

void Threshold::thread_i_fu_132_p2() {
    i_fu_132_p2 = (!i_i_reg_101.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(i_i_reg_101.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void Threshold::thread_j_cast_i_fu_138_p1() {
    j_cast_i_fu_138_p1 = esl_zext<32,31>(j_i_reg_112.read());
}

void Threshold::thread_j_fu_147_p2() {
    j_fu_147_p2 = (!j_i_reg_112.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(j_i_reg_112.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void Threshold::thread_p_Result_s_fu_159_p4() {
    p_Result_s_fu_159_p4 = esl_bitset<16,16,32,1>(xs_V_1_fu_153_p2.read(), ap_const_lv32_F, ap_const_lv1_0);
}

void Threshold::thread_src_cols_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        src_cols_V_blk_n = src_cols_V_empty_n.read();
    } else {
        src_cols_V_blk_n = ap_const_logic_1;
    }
}

void Threshold::thread_src_cols_V_read() {
    if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(thresh_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_cols_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_rows_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        src_cols_V_read = ap_const_logic_1;
    } else {
        src_cols_V_read = ap_const_logic_0;
    }
}

void Threshold::thread_src_data_stream_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(tmp_26_i_reg_227.read(), ap_const_lv1_1))) {
        src_data_stream_V_blk_n = src_data_stream_V_empty_n.read();
    } else {
        src_data_stream_V_blk_n = ap_const_logic_1;
    }
}

void Threshold::thread_src_data_stream_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(tmp_26_i_reg_227.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        src_data_stream_V_read = ap_const_logic_1;
    } else {
        src_data_stream_V_read = ap_const_logic_0;
    }
}

void Threshold::thread_src_rows_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        src_rows_V_blk_n = src_rows_V_empty_n.read();
    } else {
        src_rows_V_blk_n = ap_const_logic_1;
    }
}

void Threshold::thread_src_rows_V_read() {
    if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(thresh_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_cols_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_rows_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        src_rows_V_read = ap_const_logic_1;
    } else {
        src_rows_V_read = ap_const_logic_0;
    }
}

void Threshold::thread_thresh_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        thresh_blk_n = thresh_empty_n.read();
    } else {
        thresh_blk_n = ap_const_logic_1;
    }
}

void Threshold::thread_thresh_read() {
    if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(thresh_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_cols_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_rows_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        thresh_read = ap_const_logic_1;
    } else {
        thresh_read = ap_const_logic_0;
    }
}

void Threshold::thread_tmp_26_i_fu_142_p2() {
    tmp_26_i_fu_142_p2 = (!j_cast_i_fu_138_p1.read().is_01() || !cols_reg_213.read().is_01())? sc_lv<1>(): (sc_bigint<32>(j_cast_i_fu_138_p1.read()) < sc_bigint<32>(cols_reg_213.read()));
}

void Threshold::thread_tmp_27_i_fu_185_p1() {
    tmp_27_i_fu_185_p1 = esl_sext<32,16>(val1_fu_177_p3.read());
}

void Threshold::thread_tmp_28_i_fu_189_p2() {
    tmp_28_i_fu_189_p2 = (!tmp_27_i_fu_185_p1.read().is_01() || !thresh_read_reg_203.read().is_01())? sc_lv<1>(): (sc_bigint<32>(tmp_27_i_fu_185_p1.read()) > sc_bigint<32>(thresh_read_reg_203.read()));
}

void Threshold::thread_tmp_fu_169_p3() {
    tmp_fu_169_p3 = src_data_stream_V_dout.read().range(15, 15);
}

void Threshold::thread_tmp_i_fu_127_p2() {
    tmp_i_fu_127_p2 = (!i_cast_i_fu_123_p1.read().is_01() || !rows_reg_208.read().is_01())? sc_lv<1>(): (sc_bigint<32>(i_cast_i_fu_123_p1.read()) < sc_bigint<32>(rows_reg_208.read()));
}

void Threshold::thread_val1_fu_177_p3() {
    val1_fu_177_p3 = (!tmp_fu_169_p3.read()[0].is_01())? sc_lv<16>(): ((tmp_fu_169_p3.read()[0].to_bool())? p_Result_s_fu_159_p4.read(): src_data_stream_V_dout.read());
}

void Threshold::thread_xs_V_1_fu_153_p2() {
    xs_V_1_fu_153_p2 = (!ap_const_lv16_0.is_01() || !src_data_stream_V_dout.read().is_01())? sc_lv<16>(): (sc_biguint<16>(ap_const_lv16_0) - sc_biguint<16>(src_data_stream_V_dout.read()));
}

void Threshold::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(thresh_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_cols_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(src_rows_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(tmp_i_fu_127_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            if (!(esl_seteq<1,1,1>(tmp_26_i_fu_142_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(tmp_26_i_fu_142_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

