// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Gradient_Add (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        dx_rows_V_dout,
        dx_rows_V_empty_n,
        dx_rows_V_read,
        dx_cols_V_dout,
        dx_cols_V_empty_n,
        dx_cols_V_read,
        dx_data_stream_V_dout,
        dx_data_stream_V_empty_n,
        dx_data_stream_V_read,
        dy_data_stream_V_dout,
        dy_data_stream_V_empty_n,
        dy_data_stream_V_read,
        dst_data_stream_V_din,
        dst_data_stream_V_full_n,
        dst_data_stream_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state8 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] dx_rows_V_dout;
input   dx_rows_V_empty_n;
output   dx_rows_V_read;
input  [31:0] dx_cols_V_dout;
input   dx_cols_V_empty_n;
output   dx_cols_V_read;
input  [15:0] dx_data_stream_V_dout;
input   dx_data_stream_V_empty_n;
output   dx_data_stream_V_read;
input  [15:0] dy_data_stream_V_dout;
input   dy_data_stream_V_empty_n;
output   dy_data_stream_V_read;
output  [15:0] dst_data_stream_V_din;
input   dst_data_stream_V_full_n;
output   dst_data_stream_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg dx_rows_V_read;
reg dx_cols_V_read;
reg dx_data_stream_V_read;
reg dy_data_stream_V_read;
reg dst_data_stream_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    dx_rows_V_blk_n;
reg    dx_cols_V_blk_n;
reg    dx_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_148_i_reg_187;
reg    dy_data_stream_V_blk_n;
reg    dst_data_stream_V_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] tmp_148_i_reg_187_pp0_iter3_reg;
reg   [30:0] j_i_reg_100;
reg   [31:0] rows_reg_168;
reg    ap_block_state1;
reg   [31:0] cols_reg_173;
wire   [0:0] tmp_i_fu_120_p2;
wire    ap_CS_fsm_state2;
wire   [30:0] i_fu_125_p2;
reg   [30:0] i_reg_182;
wire   [0:0] tmp_148_i_fu_135_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_state7_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_148_i_reg_187_pp0_iter1_reg;
reg   [0:0] tmp_148_i_reg_187_pp0_iter2_reg;
wire   [30:0] j_fu_140_p2;
reg    ap_enable_reg_pp0_iter0;
wire  signed [31:0] grp_fu_160_p3;
reg   [31:0] xf_V_reg_196;
wire   [15:0] grp_sqrt_fixed_32_32_s_fu_111_ap_return;
reg   [15:0] vmag_reg_201;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    grp_sqrt_fixed_32_32_s_fu_111_ap_ce;
reg   [30:0] i_i_reg_89;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] i_cast_i_fu_116_p1;
wire   [31:0] j_cast_i_fu_131_p1;
wire  signed [15:0] tmp_150_i_fu_154_p0;
wire  signed [31:0] tmp_149_i_fu_146_p1;
wire  signed [15:0] tmp_150_i_fu_154_p1;
wire  signed [15:0] grp_fu_160_p0;
wire  signed [31:0] tmp_151_i_fu_150_p1;
wire  signed [15:0] grp_fu_160_p1;
wire  signed [31:0] tmp_150_i_fu_154_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

sqrt_fixed_32_32_s grp_sqrt_fixed_32_32_s_fu_111(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .x_V(xf_V_reg_196),
    .ap_return(grp_sqrt_fixed_32_32_s_fu_111_ap_return),
    .ap_ce(grp_sqrt_fixed_32_32_s_fu_111_ap_ce)
);

HoughCircles_CorelbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
HoughCircles_CorelbW_U105(
    .din0(tmp_150_i_fu_154_p0),
    .din1(tmp_150_i_fu_154_p1),
    .dout(tmp_150_i_fu_154_p2)
);

HoughCircles_Coremb6 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
HoughCircles_Coremb6_U106(
    .din0(grp_fu_160_p0),
    .din1(grp_fu_160_p1),
    .din2(tmp_150_i_fu_154_p2),
    .dout(grp_fu_160_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((tmp_i_fu_120_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((tmp_i_fu_120_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((tmp_i_fu_120_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_i_reg_89 <= i_reg_182;
    end else if ((~((ap_start == 1'b0) | (dx_cols_V_empty_n == 1'b0) | (dx_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_i_reg_89 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_fu_120_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_i_reg_100 <= 31'd0;
    end else if (((tmp_148_i_fu_135_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_i_reg_100 <= j_fu_140_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (dx_cols_V_empty_n == 1'b0) | (dx_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_reg_173 <= dx_cols_V_dout;
        rows_reg_168 <= dx_rows_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_182 <= i_fu_125_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_148_i_reg_187 <= tmp_148_i_fu_135_p2;
        tmp_148_i_reg_187_pp0_iter1_reg <= tmp_148_i_reg_187;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        tmp_148_i_reg_187_pp0_iter2_reg <= tmp_148_i_reg_187_pp0_iter1_reg;
        tmp_148_i_reg_187_pp0_iter3_reg <= tmp_148_i_reg_187_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_148_i_reg_187_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        vmag_reg_201 <= grp_sqrt_fixed_32_32_s_fu_111_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_148_i_reg_187 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xf_V_reg_196 <= grp_fu_160_p3;
    end
end

always @ (*) begin
    if ((tmp_148_i_fu_135_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_fu_120_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_fu_120_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_148_i_reg_187_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        dst_data_stream_V_blk_n = dst_data_stream_V_full_n;
    end else begin
        dst_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_148_i_reg_187_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_data_stream_V_write = 1'b1;
    end else begin
        dst_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        dx_cols_V_blk_n = dx_cols_V_empty_n;
    end else begin
        dx_cols_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (dx_cols_V_empty_n == 1'b0) | (dx_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        dx_cols_V_read = 1'b1;
    end else begin
        dx_cols_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_148_i_reg_187 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dx_data_stream_V_blk_n = dx_data_stream_V_empty_n;
    end else begin
        dx_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_148_i_reg_187 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dx_data_stream_V_read = 1'b1;
    end else begin
        dx_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        dx_rows_V_blk_n = dx_rows_V_empty_n;
    end else begin
        dx_rows_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (dx_cols_V_empty_n == 1'b0) | (dx_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        dx_rows_V_read = 1'b1;
    end else begin
        dx_rows_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_148_i_reg_187 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dy_data_stream_V_blk_n = dy_data_stream_V_empty_n;
    end else begin
        dy_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_148_i_reg_187 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dy_data_stream_V_read = 1'b1;
    end else begin
        dy_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_sqrt_fixed_32_32_s_fu_111_ap_ce = 1'b1;
    end else begin
        grp_sqrt_fixed_32_32_s_fu_111_ap_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (dx_cols_V_empty_n == 1'b0) | (dx_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_i_fu_120_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (tmp_148_i_fu_135_p2 == 1'd0)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (tmp_148_i_fu_135_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((tmp_148_i_reg_187_pp0_iter3_reg == 1'd1) & (dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_148_i_reg_187 == 1'd1) & (dy_data_stream_V_empty_n == 1'b0)) | ((tmp_148_i_reg_187 == 1'd1) & (dx_data_stream_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((tmp_148_i_reg_187_pp0_iter3_reg == 1'd1) & (dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_148_i_reg_187 == 1'd1) & (dy_data_stream_V_empty_n == 1'b0)) | ((tmp_148_i_reg_187 == 1'd1) & (dx_data_stream_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((tmp_148_i_reg_187_pp0_iter3_reg == 1'd1) & (dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_148_i_reg_187 == 1'd1) & (dy_data_stream_V_empty_n == 1'b0)) | ((tmp_148_i_reg_187 == 1'd1) & (dx_data_stream_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (dx_cols_V_empty_n == 1'b0) | (dx_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((tmp_148_i_reg_187 == 1'd1) & (dy_data_stream_V_empty_n == 1'b0)) | ((tmp_148_i_reg_187 == 1'd1) & (dx_data_stream_V_empty_n == 1'b0)));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter4 = ((tmp_148_i_reg_187_pp0_iter3_reg == 1'd1) & (dst_data_stream_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign dst_data_stream_V_din = vmag_reg_201;

assign grp_fu_160_p0 = tmp_151_i_fu_150_p1;

assign grp_fu_160_p1 = tmp_151_i_fu_150_p1;

assign i_cast_i_fu_116_p1 = i_i_reg_89;

assign i_fu_125_p2 = (i_i_reg_89 + 31'd1);

assign j_cast_i_fu_131_p1 = j_i_reg_100;

assign j_fu_140_p2 = (j_i_reg_100 + 31'd1);

assign tmp_148_i_fu_135_p2 = (($signed(j_cast_i_fu_131_p1) < $signed(cols_reg_173)) ? 1'b1 : 1'b0);

assign tmp_149_i_fu_146_p1 = $signed(dx_data_stream_V_dout);

assign tmp_150_i_fu_154_p0 = tmp_149_i_fu_146_p1;

assign tmp_150_i_fu_154_p1 = tmp_149_i_fu_146_p1;

assign tmp_151_i_fu_150_p1 = $signed(dy_data_stream_V_dout);

assign tmp_i_fu_120_p2 = (($signed(i_cast_i_fu_116_p1) < $signed(rows_reg_168)) ? 1'b1 : 1'b0);

endmodule //Gradient_Add
