-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity HoughCircles is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    edge_val_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    edge_val_ce0 : OUT STD_LOGIC;
    edge_val_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    edge_rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_rows_empty_n : IN STD_LOGIC;
    edge_rows_read : OUT STD_LOGIC;
    edge_cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_cols_empty_n : IN STD_LOGIC;
    edge_cols_read : OUT STD_LOGIC;
    dx_val_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    dx_val_ce0 : OUT STD_LOGIC;
    dx_val_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    dy_val_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    dy_val_ce0 : OUT STD_LOGIC;
    dy_val_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    circles_val_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    circles_val_ce0 : OUT STD_LOGIC;
    circles_val_we0 : OUT STD_LOGIC;
    circles_val_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    circles_val_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    circles_val_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    circles_val_ce1 : OUT STD_LOGIC;
    circles_val_we1 : OUT STD_LOGIC;
    circles_val_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    circles_val_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    circles_rows_dout : IN STD_LOGIC_VECTOR (2 downto 0);
    circles_rows_empty_n : IN STD_LOGIC;
    circles_rows_read : OUT STD_LOGIC;
    circles_cols_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    circles_cols_empty_n : IN STD_LOGIC;
    circles_cols_read : OUT STD_LOGIC;
    acc_threshold_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    acc_threshold_empty_n : IN STD_LOGIC;
    acc_threshold_read : OUT STD_LOGIC;
    min_dist_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    min_dist_empty_n : IN STD_LOGIC;
    min_dist_read : OUT STD_LOGIC;
    min_radius_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    min_radius_empty_n : IN STD_LOGIC;
    min_radius_read : OUT STD_LOGIC;
    max_radius_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    max_radius_empty_n : IN STD_LOGIC;
    max_radius_read : OUT STD_LOGIC;
    circles_rows_out_din : OUT STD_LOGIC_VECTOR (2 downto 0);
    circles_rows_out_full_n : IN STD_LOGIC;
    circles_rows_out_write : OUT STD_LOGIC;
    circles_cols_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    circles_cols_out_full_n : IN STD_LOGIC;
    circles_cols_out_write : OUT STD_LOGIC );
end;


architecture behav of HoughCircles is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage2 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (74 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (74 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage1 : STD_LOGIC_VECTOR (74 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (74 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (74 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (74 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (74 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (74 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (74 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (74 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (74 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (74 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_40490FDA : STD_LOGIC_VECTOR (31 downto 0) := "01000000010010010000111111011010";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv9_64 : STD_LOGIC_VECTOR (8 downto 0) := "001100100";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv17_13064 : STD_LOGIC_VECTOR (16 downto 0) := "10011000001100100";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv9_141 : STD_LOGIC_VECTOR (8 downto 0) := "101000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_13F : STD_LOGIC_VECTOR (15 downto 0) := "0000000100111111";
    constant ap_const_lv16_EF : STD_LOGIC_VECTOR (15 downto 0) := "0000000011101111";
    constant ap_const_lv16_143 : STD_LOGIC_VECTOR (15 downto 0) := "0000000101000011";
    constant ap_const_lv32_142 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000010";
    constant ap_const_lv32_FFFFFEBF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111010111111";
    constant ap_const_lv32_143 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000011";
    constant ap_const_lv65_1970E4F81 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000110010111000011100100111110000001";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_FFFFFEBE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111010111110";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv24_FFFFFF : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111111";
    constant ap_const_lv10_64 : STD_LOGIC_VECTOR (9 downto 0) := "0001100100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_433 : STD_LOGIC_VECTOR (10 downto 0) := "10000110011";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv52_FFFFFFFFFFFFF : STD_LOGIC_VECTOR (51 downto 0) := "1111111111111111111111111111111111111111111111111111";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv10_C8 : STD_LOGIC_VECTOR (9 downto 0) := "0011001000";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv17_142 : STD_LOGIC_VECTOR (16 downto 0) := "00000000101000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mask_table1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mask_table1_ce0 : STD_LOGIC;
    signal mask_table1_q0 : STD_LOGIC_VECTOR (51 downto 0);
    signal one_half_table2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal one_half_table2_ce0 : STD_LOGIC;
    signal one_half_table2_q0 : STD_LOGIC_VECTOR (52 downto 0);
    signal edge_rows_blk_n : STD_LOGIC;
    signal edge_cols_blk_n : STD_LOGIC;
    signal circles_rows_blk_n : STD_LOGIC;
    signal circles_cols_blk_n : STD_LOGIC;
    signal acc_threshold_blk_n : STD_LOGIC;
    signal min_dist_blk_n : STD_LOGIC;
    signal min_radius_blk_n : STD_LOGIC;
    signal max_radius_blk_n : STD_LOGIC;
    signal circles_rows_out_blk_n : STD_LOGIC;
    signal circles_cols_out_blk_n : STD_LOGIC;
    signal j3_i_reg_779 : STD_LOGIC_VECTOR (30 downto 0);
    signal j8_i_reg_812 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_max_r1_i_reg_824 : STD_LOGIC_VECTOR (31 downto 0);
    signal r0_2_reg_834 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sqrt_fixed_32_32_s_fu_909_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_946 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_block_state68_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state70_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state72_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_state74_pp4_stage0_iter3 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal tmp_97_i_reg_2865 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_97_i_reg_2865_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal circles_rows_read_reg_2415 : STD_LOGIC_VECTOR (2 downto 0);
    signal circles_cols_read_reg_2420 : STD_LOGIC_VECTOR (7 downto 0);
    signal acc_threshold_read_reg_2425 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_dist_read_reg_2430 : STD_LOGIC_VECTOR (31 downto 0);
    signal rows_reg_2436 : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_reg_2442 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_max_r_fu_1034_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_max_r_reg_2448 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_max_r_cast_i_fu_1042_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_max_r_cast_i_reg_2453 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_min_r_2_fu_1046_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_min_r_2_reg_2459 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_fu_1054_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal next_mul_reg_2468 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_50_i_fu_1064_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_1069_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_2477 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_fu_1084_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal n_fu_1111_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal n_1_fu_1128_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_1_fu_1153_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_1_reg_2516 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_19_fu_1183_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_19_reg_2521 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_55_i_fu_1148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y0_fu_1193_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y0_reg_2526 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_1215_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_1_reg_2541 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_60_i_fu_1210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dx_val_load_reg_2561 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal dy_val_load_reg_2566 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_64_i_fu_1245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_64_i_reg_2571 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_68_i_fu_1257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_68_i_reg_2575 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_2387_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xf_V_reg_2579 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_19_fu_1263_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_1274_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal grp_fu_1287_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x0_fu_1297_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal x0_reg_2610 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_i_fu_1305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal k_fu_1311_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_2619 : STD_LOGIC_VECTOR (1 downto 0);
    signal x1_fu_1322_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y1_fu_1332_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_110_i_fu_1354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_110_i_reg_2634 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal or_cond3_i_fu_1423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_i_reg_2638 : STD_LOGIC_VECTOR (0 downto 0);
    signal accum_addr_6_reg_2642 : STD_LOGIC_VECTOR (16 downto 0);
    signal x1_1_fu_1450_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal y1_1_fu_1456_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_2_fu_1462_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sx_1_fu_1468_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal sy_1_fu_1474_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul1_fu_1480_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul1_reg_2672 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal tmp_59_i_fu_1490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_1495_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_2_reg_2681 : STD_LOGIC_VECTOR (30 downto 0);
    signal min_dist_assign_fu_1519_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal min_dist_assign_reg_2698 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_65_i_fu_1536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_65_i_reg_2703 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state53_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state56_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal j_3_fu_1541_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_3_reg_2707 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal tmp_71_i_fu_1553_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_71_i_reg_2712 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_71_i_reg_2712_pp2_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal base_fu_1559_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal base_reg_2720 : STD_LOGIC_VECTOR (31 downto 0);
    signal base_reg_2720_pp2_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal accum_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal value_reg_2730 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_block_state54_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_state57_pp2_stage1_iter1 : BOOLEAN;
    signal ap_block_pp2_stage1_11001 : BOOLEAN;
    signal value_reg_2730_pp2_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_73_i_fu_1570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_73_i_reg_2736 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_73_i_reg_2736_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_941_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_85_i_reg_2745 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage2 : signal is "none";
    signal ap_block_state55_pp2_stage2_iter0 : BOOLEAN;
    signal ap_block_state58_pp2_stage2_iter1 : BOOLEAN;
    signal ap_block_pp2_stage2_11001 : BOOLEAN;
    signal tmp_89_i_reg_2754 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal tmp_102_i_reg_2763 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_dist2_fu_1633_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_dist2_reg_2775 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal grp_HoughSortDescent_fu_914_ap_idle : STD_LOGIC;
    signal grp_HoughSortDescent_fu_914_ap_ready : STD_LOGIC;
    signal grp_HoughSortDescent_fu_914_ap_done : STD_LOGIC;
    signal total_1_load_reg_2780 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal i_3_fu_1652_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_3_reg_2790 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_66_i_fu_1646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal centers_val_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal base_1_reg_2800 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal tmp_56_reg_2806 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_fu_1671_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_61_reg_2812 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_60_fu_1754_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_60_reg_2817 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal cx0_fu_1758_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cx0_reg_2822 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_62_fu_1763_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_62_reg_2828 : STD_LOGIC_VECTOR (15 downto 0);
    signal cy0_fu_1767_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal cy0_reg_2833 : STD_LOGIC_VECTOR (23 downto 0);
    signal cy0_cast_i_fu_1773_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cy0_cast_i_reg_2838 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_86_i_fu_1781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_86_i_reg_2843 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal j_5_cast_i_fu_1786_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_5_cast_i_reg_2847 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_97_i_fu_1867_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_97_i_reg_2865_pp4_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_4_fu_1879_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_4_reg_2879 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_pp4_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage1 : signal is "none";
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal ap_block_state69_pp4_stage1_iter0 : BOOLEAN;
    signal ap_block_state71_pp4_stage1_iter1 : BOOLEAN;
    signal ap_block_state73_pp4_stage1_iter2 : BOOLEAN;
    signal ap_block_pp4_stage1_11001 : BOOLEAN;
    signal p_dy_fu_1898_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_dy_reg_2884 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_105_i_fu_1903_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_105_i_reg_2890 : STD_LOGIC_VECTOR (31 downto 0);
    signal dist2_2_fu_1913_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dist2_2_reg_2895 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond4_i_fu_1940_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond4_i_reg_2900 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_max_r_1_cast_fu_1960_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_min_r_fu_1970_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal dist_accum_addr_2_reg_2914 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal dist_accum_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal dist_accum_addr_3_reg_2932 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal tmp_118_i_fu_1995_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_136_i_fu_2006_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_136_i_reg_2937 : STD_LOGIC_VECTOR (31 downto 0);
    signal r10_0_r0_i_fu_2023_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal c_0_c0_i_fu_2031_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_3_fu_2039_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_i_fu_926_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_i_reg_2957 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal x_assign_3_fu_930_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_3_reg_2962 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal t_V_2_fu_2045_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_V_2_reg_2967 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_i_fu_2059_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i_reg_2973 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_170_i_i_i_fu_2065_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_170_i_i_i_reg_2979 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_132_i_fu_2317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_132_i_reg_2994 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal total_fu_2323_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal total_reg_2998 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_73_fu_2338_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_73_reg_3005 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_74_fu_2359_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_74_reg_3010 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state53 : STD_LOGIC;
    signal ap_block_pp2_stage2_subdone : BOOLEAN;
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_block_pp4_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_condition_pp4_exit_iter2_state73 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter3 : STD_LOGIC := '0';
    signal accum_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal accum_ce0 : STD_LOGIC;
    signal accum_we0 : STD_LOGIC;
    signal accum_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal accum_address1 : STD_LOGIC_VECTOR (16 downto 0);
    signal accum_ce1 : STD_LOGIC;
    signal accum_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dist_accum_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dist_accum_ce0 : STD_LOGIC;
    signal dist_accum_we0 : STD_LOGIC;
    signal dist_accum_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pt_buf_val_x_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal pt_buf_val_x_ce0 : STD_LOGIC;
    signal pt_buf_val_x_we0 : STD_LOGIC;
    signal pt_buf_val_x_q0 : STD_LOGIC_VECTOR (30 downto 0);
    signal pt_buf_val_y_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal pt_buf_val_y_ce0 : STD_LOGIC;
    signal pt_buf_val_y_we0 : STD_LOGIC;
    signal pt_buf_val_y_q0 : STD_LOGIC_VECTOR (30 downto 0);
    signal centers_val_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal centers_val_ce0 : STD_LOGIC;
    signal centers_val_we0 : STD_LOGIC;
    signal centers_val_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sqrt_fixed_32_32_s_fu_909_x_V : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sqrt_fixed_32_32_s_fu_909_ap_ce : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_HoughSortDescent_fu_914_ap_start : STD_LOGIC;
    signal grp_HoughSortDescent_fu_914_sequence_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_HoughSortDescent_fu_914_sequence_ce0 : STD_LOGIC;
    signal grp_HoughSortDescent_fu_914_sequence_we0 : STD_LOGIC;
    signal grp_HoughSortDescent_fu_914_sequence_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_HoughSortDescent_fu_914_data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_HoughSortDescent_fu_914_data_ce0 : STD_LOGIC;
    signal i_0_i_i_reg_613 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal phi_mul_reg_624 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_0_i_i_reg_636 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_52_i_fu_1079_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_i_reg_647 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond7_i_fu_1105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n1_i_reg_658 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond6_i_fu_1122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_y_assign_reg_669 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_x_assign_reg_682 : STD_LOGIC_VECTOR (30 downto 0);
    signal sx1_i_reg_695 : STD_LOGIC_VECTOR (31 downto 0);
    signal sy1_i_reg_705 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_i_reg_715 : STD_LOGIC_VECTOR (1 downto 0);
    signal x_i_reg_726 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_i_reg_736 : STD_LOGIC_VECTOR (31 downto 0);
    signal r1_i_reg_746 : STD_LOGIC_VECTOR (31 downto 0);
    signal i2_i_reg_756 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal phi_mul1_reg_767 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_j3_i_phi_fu_783_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal i5_i_reg_790 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal tmp_146_i_fu_2373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j7_i_reg_801 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal tmp_96_i_fu_1858_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_j8_i_phi_fu_816_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal ap_phi_reg_pp4_iter0_p_max_r_1_i_reg_844 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp4_iter1_p_max_r_1_i_reg_844 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp4_iter2_p_max_r_1_i_reg_844 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp4_iter3_p_max_r_1_i_reg_844 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp4_iter0_p_min_r_1_i_reg_856 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp4_iter1_p_min_r_1_i_reg_856 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp4_iter2_p_min_r_1_i_reg_856 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp4_iter3_p_min_r_1_i_reg_856 : STD_LOGIC_VECTOR (31 downto 0);
    signal r0_i_reg_868 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_i_reg_879 : STD_LOGIC_VECTOR (31 downto 0);
    signal r0_reg_889 : STD_LOGIC_VECTOR (31 downto 0);
    signal total_3_i_reg_900 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp4_stage1 : BOOLEAN;
    signal grp_HoughSortDescent_fu_914_ap_start_reg : STD_LOGIC := '0';
    signal tmp_16_cast_fu_1100_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_53_i_fu_1117_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_56_i_fu_1134_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_cast_fu_1230_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i12_i_fu_1343_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_140_i_fu_1439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_72_i_fu_1565_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_84_i_fu_1575_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage1 : BOOLEAN;
    signal tmp_88_i_fu_1584_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage2 : BOOLEAN;
    signal tmp_101_i_fu_1594_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_112_i_fu_1604_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i13_i_fu_1620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_113_i_fu_1609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_74_i_fu_1658_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_911_i_fu_1798_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_cast_fu_1813_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_104_i_fu_1873_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_116_i_fu_1978_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_109_i_fu_1990_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_134_i_fu_2001_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_171_i_i_i_fu_2081_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_143_i_fu_2333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_cast_fu_2348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_cast_fu_2368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal pt_buf_length_i_fu_256 : STD_LOGIC_VECTOR (31 downto 0);
    signal pt_buf_length_fu_1337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal centers_length_i_fu_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal centers_length_fu_1614_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal total_1_fu_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_142_i_fu_2328_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_144_i_fu_2353_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal tmp_75_fu_2382_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_141_i_fu_1443_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_117_i_fu_1983_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_129_i_fu_921_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_fu_950_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_r0_fu_956_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_fu_964_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_239_fu_970_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_fu_976_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_982_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal temp_fu_986_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_47_i_fu_998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_i_fu_1004_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond8_i_fu_1010_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_radius_assign_3_fu_1016_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_radius_assign_ca_fu_994_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_49_i_fu_1028_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_1024_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_0_i_cast_cast_i_fu_1060_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_0_i_cast_cast_i_fu_1075_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_54_i_cast_fu_1090_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_16_fu_1094_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_y_assign_cast_i_fu_1144_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_49_fu_1159_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_50_fu_1171_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl_cast_fu_1163_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl1_cast_fu_1175_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_51_fu_1189_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_x_assign_cast_i_fu_1206_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_fu_1221_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_21_fu_1225_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal vx_fu_1237_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal vy_fu_1241_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_67_i_fu_1251_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_67_i_fu_1251_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_67_i_fu_1251_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1274_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1274_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1287_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1287_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_55_fu_1293_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_98_i_fu_1317_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_99_i_fu_1327_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pt_buf_length_fu_1337_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i12_i_fu_1343_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_123_i_fu_1369_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_121_i_fu_1359_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_64_fu_1383_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_125_i_fu_1391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_65_fu_1397_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_127_i_fu_1405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_1417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_1411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_139_i_fu_1429_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2401_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal i2_cast_i_fu_1486_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_fu_1501_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_fu_1510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_fu_1516_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal j3_cast_i_fu_1532_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_1547_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_87_i_fu_1579_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_100_i_fu_1589_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_111_i_fu_1599_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal centers_length_fu_1614_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i13_i_fu_1620_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_dist2_fu_1633_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_i15_cast_i_fu_1630_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_dist2_fu_1633_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal i5_cast_i_fu_1642_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_56_fu_1663_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_61_fu_1671_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_fu_1678_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_fu_1678_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal neg_mul_fu_1684_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_57_fu_1690_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_58_fu_1704_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_23_fu_1700_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_1714_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_1718_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal neg_ti_fu_1725_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_75_i_fu_1731_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_76_i_fu_1742_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_76_i_fu_1742_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_fu_1748_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_59_fu_1738_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal j7_cast_i_fu_1777_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_fu_1792_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_63_fu_1803_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_26_fu_1807_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal cx_fu_1818_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_92_i_fu_1826_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cy_cast_i_fu_1822_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_94_i_fu_1837_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_95_i_fu_1846_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_94_cast_i_fu_1842_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_95_i_fu_1846_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_93_i_fu_1831_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_95_i_fu_1846_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dist2_fu_1852_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j8_cast_i_fu_1863_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd30_i_fu_1885_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd34_i_fu_1889_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_dx_fu_1893_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_106_i_fu_1909_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_20_fu_1922_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_23_cast_fu_1926_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_107_i_fu_1930_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_108_i_fu_1935_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_114_i_fu_1946_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_66_fu_1918_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_max_r_1_fu_1952_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_115_i_fu_1964_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_135_i_fu_2012_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_135_i_fu_2012_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_137_i_fu_2018_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_0_c0_i_fu_2031_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_fu_2049_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal index_V_fu_2071_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_s_fu_2087_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal one_half_i_i_cast_i_fu_2102_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_2106_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_1_fu_2111_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_173_i_i_i_fu_2115_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_5_fu_2127_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal xs_sig_V_fu_2121_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_13_fu_2094_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_14_fu_2137_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sel_tmp_v_fu_2145_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sel_tmp1_fu_2156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_2161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_2152_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_4_fu_2166_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_15_fu_2173_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_3_fu_2195_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_i_i_i_i_fu_2199_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal loc_V_2_fu_2185_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_i_cast_i_fu_2213_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_2217_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_176_i_i_i_i_fu_2231_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_2223_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_176_i_i_i_cast_i_fu_2237_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_fu_2241_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_i_i_i_ca_fu_2249_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_177_i_i_i_cast_i_fu_2257_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_i_i_i_cast_i_fu_2209_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_177_i_i_i_i_fu_2253_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_178_i_i_i_i_fu_2261_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_72_fu_2273_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_179_i_i_i_i_fu_2267_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_s_fu_2281_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_2285_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_8_fu_2295_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_15_fu_2177_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_i_i_i_i_fu_2303_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_21_fu_2309_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_2342_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_30_fu_2363_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_2387_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal vx_fu_1237_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2387_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_80_i_fu_2394_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_80_i_fu_2394_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal vy_fu_1241_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_80_i_fu_2394_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2401_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_2401_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1274_ap_start : STD_LOGIC;
    signal grp_fu_1274_ap_done : STD_LOGIC;
    signal grp_fu_1287_ap_start : STD_LOGIC;
    signal grp_fu_1287_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (74 downto 0);
    signal ap_block_pp2_stage1_subdone : BOOLEAN;
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal grp_fu_2401_p20 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_condition_1000 : BOOLEAN;

    component sqrt_fixed_32_32_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        x_V : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component HoughSortDescent IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sequence_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        sequence_ce0 : OUT STD_LOGIC;
        sequence_we0 : OUT STD_LOGIC;
        sequence_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        sequence_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        num : IN STD_LOGIC_VECTOR (31 downto 0);
        data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        data_ce0 : OUT STD_LOGIC;
        data_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component HoughCircles_Coreyd2 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component HoughCircles_Corezec IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component HoughCircles_CoreAem IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component HoughCircles_CoreBew IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component HoughCircles_Coremb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component HoughCircles_CorelbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component HoughCircles_CoreCeG IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component HoughCircles_masksc4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component HoughCircles_one_tde IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (52 downto 0) );
    end component;


    component HoughCircles_accum IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component HoughCircles_distudo IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component HoughCircles_pt_bvdy IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (30 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component HoughCircles_centxdS IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mask_table1_U : component HoughCircles_masksc4
    generic map (
        DataWidth => 52,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mask_table1_address0,
        ce0 => mask_table1_ce0,
        q0 => mask_table1_q0);

    one_half_table2_U : component HoughCircles_one_tde
    generic map (
        DataWidth => 53,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => one_half_table2_address0,
        ce0 => one_half_table2_ce0,
        q0 => one_half_table2_q0);

    accum_U : component HoughCircles_accum
    generic map (
        DataWidth => 32,
        AddressRange => 77924,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => accum_address0,
        ce0 => accum_ce0,
        we0 => accum_we0,
        d0 => accum_d0,
        q0 => accum_q0,
        address1 => accum_address1,
        ce1 => accum_ce1,
        q1 => accum_q1);

    dist_accum_U : component HoughCircles_distudo
    generic map (
        DataWidth => 32,
        AddressRange => 321,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dist_accum_address0,
        ce0 => dist_accum_ce0,
        we0 => dist_accum_we0,
        d0 => dist_accum_d0,
        q0 => dist_accum_q0);

    pt_buf_val_x_U : component HoughCircles_pt_bvdy
    generic map (
        DataWidth => 31,
        AddressRange => 76800,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pt_buf_val_x_address0,
        ce0 => pt_buf_val_x_ce0,
        we0 => pt_buf_val_x_we0,
        d0 => p_x_assign_reg_682,
        q0 => pt_buf_val_x_q0);

    pt_buf_val_y_U : component HoughCircles_pt_bvdy
    generic map (
        DataWidth => 31,
        AddressRange => 76800,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pt_buf_val_y_address0,
        ce0 => pt_buf_val_y_ce0,
        we0 => pt_buf_val_y_we0,
        d0 => p_y_assign_reg_669,
        q0 => pt_buf_val_y_q0);

    centers_val_U : component HoughCircles_centxdS
    generic map (
        DataWidth => 32,
        AddressRange => 77924,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => centers_val_address0,
        ce0 => centers_val_ce0,
        we0 => centers_val_we0,
        d0 => centers_val_d0,
        q0 => centers_val_q0);

    grp_sqrt_fixed_32_32_s_fu_909 : component sqrt_fixed_32_32_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        x_V => grp_sqrt_fixed_32_32_s_fu_909_x_V,
        ap_return => grp_sqrt_fixed_32_32_s_fu_909_ap_return,
        ap_ce => grp_sqrt_fixed_32_32_s_fu_909_ap_ce);

    grp_HoughSortDescent_fu_914 : component HoughSortDescent
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_HoughSortDescent_fu_914_ap_start,
        ap_done => grp_HoughSortDescent_fu_914_ap_done,
        ap_idle => grp_HoughSortDescent_fu_914_ap_idle,
        ap_ready => grp_HoughSortDescent_fu_914_ap_ready,
        sequence_address0 => grp_HoughSortDescent_fu_914_sequence_address0,
        sequence_ce0 => grp_HoughSortDescent_fu_914_sequence_ce0,
        sequence_we0 => grp_HoughSortDescent_fu_914_sequence_we0,
        sequence_d0 => grp_HoughSortDescent_fu_914_sequence_d0,
        sequence_q0 => centers_val_q0,
        num => centers_length_i_fu_260,
        data_address0 => grp_HoughSortDescent_fu_914_data_address0,
        data_ce0 => grp_HoughSortDescent_fu_914_data_ce0,
        data_q0 => accum_q0);

    HoughCircles_Coreyd2_U171 : component HoughCircles_Coreyd2
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_128_i_reg_2957,
        din1 => ap_const_lv32_40490FDA,
        dout => tmp_129_i_fu_921_p2);

    HoughCircles_Corezec_U172 : component HoughCircles_Corezec
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => r0_i_reg_868,
        dout => tmp_128_i_fu_926_p1);

    HoughCircles_CoreAem_U173 : component HoughCircles_CoreAem
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => tmp_129_i_fu_921_p2,
        dout => x_assign_3_fu_930_p1);

    HoughCircles_CoreBew_U174 : component HoughCircles_CoreBew
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 17,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_1274_ap_start,
        done => grp_fu_1274_ap_done,
        din0 => grp_fu_1274_p0,
        din1 => grp_fu_1274_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1274_p2);

    HoughCircles_CoreBew_U175 : component HoughCircles_CoreBew
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 17,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_1287_ap_start,
        done => grp_fu_1287_ap_done,
        din0 => grp_fu_1287_p0,
        din1 => grp_fu_1287_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1287_p2);

    HoughCircles_Coremb6_U176 : component HoughCircles_Coremb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_2387_p0,
        din1 => grp_fu_2387_p1,
        din2 => tmp_80_i_fu_2394_p2,
        dout => grp_fu_2387_p3);

    HoughCircles_CorelbW_U177 : component HoughCircles_CorelbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_80_i_fu_2394_p0,
        din1 => tmp_80_i_fu_2394_p1,
        dout => tmp_80_i_fu_2394_p2);

    HoughCircles_CoreCeG_U178 : component HoughCircles_CoreCeG
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        din0 => tmp_123_i_fu_1369_p4,
        din1 => grp_fu_2401_p1,
        din2 => grp_fu_2401_p2,
        dout => grp_fu_2401_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state53) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((tmp_59_i_fu_1490_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage2_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state53) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state53);
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif (((tmp_59_i_fu_1490_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage1_subdone) and (tmp_97_i_reg_2865 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1))) then 
                    ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1))) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state67) or ((ap_const_boolean_0 = ap_block_pp4_stage1_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter2_state73) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1)))) then 
                    ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage1_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter2_state73) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1))) then 
                    ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter1;
                elsif (((ap_const_boolean_0 = ap_block_pp4_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1))) then 
                    ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
                    ap_enable_reg_pp4_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_HoughSortDescent_fu_914_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_HoughSortDescent_fu_914_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_59_i_fu_1490_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                    grp_HoughSortDescent_fu_914_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_HoughSortDescent_fu_914_ap_ready = ap_const_logic_1)) then 
                    grp_HoughSortDescent_fu_914_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp4_iter3_p_max_r_1_i_reg_844_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_1000)) then
                if (((or_cond4_i_fu_1940_p2 = ap_const_lv1_1) and (tmp_97_i_reg_2865_pp4_iter2_reg = ap_const_lv1_1))) then 
                    ap_phi_reg_pp4_iter3_p_max_r_1_i_reg_844 <= p_max_r1_i_reg_824;
                elsif (((or_cond4_i_fu_1940_p2 = ap_const_lv1_0) and (tmp_97_i_reg_2865_pp4_iter2_reg = ap_const_lv1_1))) then 
                    ap_phi_reg_pp4_iter3_p_max_r_1_i_reg_844 <= p_max_r_1_cast_fu_1960_p1;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp4_iter3_p_max_r_1_i_reg_844 <= ap_phi_reg_pp4_iter2_p_max_r_1_i_reg_844;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp4_iter3_p_min_r_1_i_reg_856_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_1000)) then
                if (((or_cond4_i_fu_1940_p2 = ap_const_lv1_1) and (tmp_97_i_reg_2865_pp4_iter2_reg = ap_const_lv1_1))) then 
                    ap_phi_reg_pp4_iter3_p_min_r_1_i_reg_856 <= r0_2_reg_834;
                elsif (((or_cond4_i_fu_1940_p2 = ap_const_lv1_0) and (tmp_97_i_reg_2865_pp4_iter2_reg = ap_const_lv1_1))) then 
                    ap_phi_reg_pp4_iter3_p_min_r_1_i_reg_856 <= p_min_r_fu_1970_p3;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp4_iter3_p_min_r_1_i_reg_856 <= ap_phi_reg_pp4_iter2_p_min_r_1_i_reg_856;
                end if;
            end if; 
        end if;
    end process;

    c_i_reg_879_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
                c_i_reg_879 <= c_0_c0_i_fu_2031_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
                c_i_reg_879 <= dist_accum_q0;
            end if; 
        end if;
    end process;

    centers_length_i_fu_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (tmp_102_i_reg_2763 = ap_const_lv1_1) and (tmp_89_i_reg_2754 = ap_const_lv1_1) and (tmp_85_i_reg_2745 = ap_const_lv1_1) and (tmp_73_i_reg_2736_pp2_iter1_reg = ap_const_lv1_1) and (tmp_113_i_fu_1609_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
                centers_length_i_fu_260 <= centers_length_fu_1614_p2;
            elsif (((tmp_55_i_fu_1148_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                centers_length_i_fu_260 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i2_i_reg_756_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
                i2_i_reg_756 <= i_2_reg_2681;
            elsif (((tmp_55_i_fu_1148_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i2_i_reg_756 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i5_i_reg_790_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state82) and ((tmp_146_i_fu_2373_p2 = ap_const_lv1_0) or (tmp_132_i_reg_2994 = ap_const_lv1_0) or (tmp_86_i_reg_2843 = ap_const_lv1_1)))) then 
                i5_i_reg_790 <= i_3_reg_2790;
            elsif (((grp_HoughSortDescent_fu_914_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state60))) then 
                i5_i_reg_790 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i_0_i_i_reg_613_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_0_i_i_reg_613 <= i_reg_2477;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (circles_cols_out_full_n = ap_const_logic_0) or (circles_rows_out_full_n = ap_const_logic_0) or (max_radius_empty_n = ap_const_logic_0) or (min_radius_empty_n = ap_const_logic_0) or (min_dist_empty_n = ap_const_logic_0) or (ap_const_logic_0 = acc_threshold_empty_n) or (circles_cols_empty_n = ap_const_logic_0) or (circles_rows_empty_n = ap_const_logic_0) or (edge_cols_empty_n = ap_const_logic_0) or (edge_rows_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_i_reg_613 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j3_i_reg_779_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_59_i_fu_1490_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                j3_i_reg_779 <= ap_const_lv31_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (tmp_65_i_reg_2703 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                j3_i_reg_779 <= j_3_reg_2707;
            end if; 
        end if;
    end process;

    j7_i_reg_801_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_96_i_fu_1858_p2 = ap_const_lv1_1) and (tmp_86_i_reg_2843 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then 
                j7_i_reg_801 <= j_5_cast_i_reg_2847;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
                j7_i_reg_801 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    j8_i_reg_812_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
                j8_i_reg_812 <= ap_const_lv31_0;
            elsif (((tmp_97_i_reg_2865 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                j8_i_reg_812 <= j_4_reg_2879;
            end if; 
        end if;
    end process;

    j_0_i_i_reg_636_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_50_i_fu_1064_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_i_i_reg_636 <= ap_const_lv7_0;
            elsif (((tmp_52_i_fu_1079_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_0_i_i_reg_636 <= j_fu_1084_p2;
            end if; 
        end if;
    end process;

    k_i_reg_715_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
                k_i_reg_715 <= k_reg_2619;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                k_i_reg_715 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n1_i_reg_658_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_i_fu_1105_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                n1_i_reg_658 <= ap_const_lv9_0;
            elsif (((exitcond6_i_fu_1122_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                n1_i_reg_658 <= n_1_fu_1128_p2;
            end if; 
        end if;
    end process;

    n_i_reg_647_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_50_i_fu_1064_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                n_i_reg_647 <= ap_const_lv17_0;
            elsif (((exitcond7_i_fu_1105_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                n_i_reg_647 <= n_fu_1111_p2;
            end if; 
        end if;
    end process;

    p_max_r1_i_reg_824_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
                p_max_r1_i_reg_824 <= p_max_r_cast_i_reg_2453;
            elsif (((tmp_97_i_reg_2865_pp4_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                p_max_r1_i_reg_824 <= ap_phi_reg_pp4_iter3_p_max_r_1_i_reg_844;
            end if; 
        end if;
    end process;

    p_x_assign_reg_682_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state48) and ((exitcond_i_fu_1305_p2 = ap_const_lv1_1) or (tmp_68_i_reg_2575 = ap_const_lv1_1) or (tmp_64_i_reg_2571 = ap_const_lv1_1)))) then 
                p_x_assign_reg_682 <= j_1_reg_2541;
            elsif (((tmp_55_i_fu_1148_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                p_x_assign_reg_682 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    p_y_assign_reg_669_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_60_i_fu_1210_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                p_y_assign_reg_669 <= i_1_reg_2516;
            elsif (((exitcond6_i_fu_1122_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                p_y_assign_reg_669 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_767_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
                phi_mul1_reg_767 <= next_mul1_reg_2672;
            elsif (((tmp_55_i_fu_1148_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                phi_mul1_reg_767 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_624_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                phi_mul_reg_624 <= next_mul_reg_2468;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (circles_cols_out_full_n = ap_const_logic_0) or (circles_rows_out_full_n = ap_const_logic_0) or (max_radius_empty_n = ap_const_logic_0) or (min_radius_empty_n = ap_const_logic_0) or (min_dist_empty_n = ap_const_logic_0) or (ap_const_logic_0 = acc_threshold_empty_n) or (circles_cols_empty_n = ap_const_logic_0) or (circles_rows_empty_n = ap_const_logic_0) or (edge_cols_empty_n = ap_const_logic_0) or (edge_rows_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_624 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    pt_buf_length_i_fu_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_68_i_reg_2575 = ap_const_lv1_0) and (tmp_64_i_reg_2571 = ap_const_lv1_0) and (exitcond_i_fu_1305_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                pt_buf_length_i_fu_256 <= pt_buf_length_fu_1337_p2;
            elsif (((exitcond6_i_fu_1122_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                pt_buf_length_i_fu_256 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    r0_2_reg_834_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
                r0_2_reg_834 <= p_min_r_2_reg_2459;
            elsif (((tmp_97_i_reg_2865_pp4_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                r0_2_reg_834 <= ap_phi_reg_pp4_iter3_p_min_r_1_i_reg_856;
            end if; 
        end if;
    end process;

    r0_i_reg_868_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
                r0_i_reg_868 <= r10_0_r0_i_fu_2023_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
                r0_i_reg_868 <= r0_2_reg_834;
            end if; 
        end if;
    end process;

    r0_reg_889_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
                r0_reg_889 <= r_3_fu_2039_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
                r0_reg_889 <= r0_2_reg_834;
            end if; 
        end if;
    end process;

    r1_i_reg_746_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond3_i_reg_2638 = ap_const_lv1_0) and (tmp_110_i_reg_2634 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                r1_i_reg_746 <= r_2_fu_1462_p2;
            elsif (((exitcond_i_fu_1305_p2 = ap_const_lv1_0) and (tmp_68_i_reg_2575 = ap_const_lv1_0) and (tmp_64_i_reg_2571 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                r1_i_reg_746 <= p_min_r_2_reg_2459;
            end if; 
        end if;
    end process;

    sx1_i_reg_695_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
                sx1_i_reg_695 <= sx_1_fu_1468_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                sx1_i_reg_695 <= grp_fu_1274_p2;
            end if; 
        end if;
    end process;

    sy1_i_reg_705_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
                sy1_i_reg_705 <= sy_1_fu_1474_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                sy1_i_reg_705 <= grp_fu_1287_p2;
            end if; 
        end if;
    end process;

    total_1_fu_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_146_i_fu_2373_p2 = ap_const_lv1_0) and (tmp_86_i_reg_2843 = ap_const_lv1_0) and (tmp_132_i_reg_2994 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state82))) then 
                total_1_fu_264 <= total_reg_2998;
            elsif (((tmp_59_i_fu_1490_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                total_1_fu_264 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    total_3_i_reg_900_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_86_i_reg_2843 = ap_const_lv1_0) and (tmp_146_i_fu_2373_p2 = ap_const_lv1_1) and (tmp_132_i_reg_2994 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state82))) then 
                total_3_i_reg_900 <= total_reg_2998;
            elsif (((tmp_66_i_fu_1646_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
                total_3_i_reg_900 <= total_1_fu_264;
            end if; 
        end if;
    end process;

    x_i_reg_726_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond3_i_reg_2638 = ap_const_lv1_0) and (tmp_110_i_reg_2634 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                x_i_reg_726 <= x1_1_fu_1450_p2;
            elsif (((exitcond_i_fu_1305_p2 = ap_const_lv1_0) and (tmp_68_i_reg_2575 = ap_const_lv1_0) and (tmp_64_i_reg_2571 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                x_i_reg_726 <= x1_fu_1322_p2;
            end if; 
        end if;
    end process;

    y_i_reg_736_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond3_i_reg_2638 = ap_const_lv1_0) and (tmp_110_i_reg_2634 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                y_i_reg_736 <= y1_1_fu_1456_p2;
            elsif (((exitcond_i_fu_1305_p2 = ap_const_lv1_0) and (tmp_68_i_reg_2575 = ap_const_lv1_0) and (tmp_64_i_reg_2571 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                y_i_reg_736 <= y1_fu_1332_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (circles_cols_out_full_n = ap_const_logic_0) or (circles_rows_out_full_n = ap_const_logic_0) or (max_radius_empty_n = ap_const_logic_0) or (min_radius_empty_n = ap_const_logic_0) or (min_dist_empty_n = ap_const_logic_0) or (ap_const_logic_0 = acc_threshold_empty_n) or (circles_cols_empty_n = ap_const_logic_0) or (circles_rows_empty_n = ap_const_logic_0) or (edge_cols_empty_n = ap_const_logic_0) or (edge_rows_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                acc_threshold_read_reg_2425 <= acc_threshold_dout;
                circles_cols_read_reg_2420 <= circles_cols_dout;
                circles_rows_read_reg_2415 <= circles_rows_dout;
                cols_reg_2442 <= edge_cols_dout;
                min_dist_read_reg_2430 <= min_dist_dout;
                    p_max_r_cast_i_reg_2453(30 downto 0) <= p_max_r_cast_i_fu_1042_p1(30 downto 0);
                p_max_r_reg_2448 <= p_max_r_fu_1034_p3;
                p_min_r_2_reg_2459 <= p_min_r_2_fu_1046_p3;
                rows_reg_2436 <= edge_rows_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond3_i_fu_1423_p2 = ap_const_lv1_0) and (tmp_110_i_fu_1354_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                accum_addr_6_reg_2642 <= tmp_140_i_fu_1439_p1(17 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1))) then
                ap_phi_reg_pp4_iter1_p_max_r_1_i_reg_844 <= ap_phi_reg_pp4_iter0_p_max_r_1_i_reg_844;
                ap_phi_reg_pp4_iter1_p_min_r_1_i_reg_856 <= ap_phi_reg_pp4_iter0_p_min_r_1_i_reg_856;
                j_4_reg_2879 <= j_4_fu_1879_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1))) then
                ap_phi_reg_pp4_iter2_p_max_r_1_i_reg_844 <= ap_phi_reg_pp4_iter1_p_max_r_1_i_reg_844;
                ap_phi_reg_pp4_iter2_p_min_r_1_i_reg_856 <= ap_phi_reg_pp4_iter1_p_min_r_1_i_reg_856;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then
                base_1_reg_2800 <= centers_val_q0;
                tmp_56_reg_2806 <= tmp_56_fu_1663_p1(31 downto 31);
                tmp_61_reg_2812 <= tmp_61_fu_1671_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (tmp_65_i_fu_1536_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                base_reg_2720 <= base_fu_1559_p2;
                tmp_71_i_reg_2712 <= tmp_71_i_fu_1553_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                base_reg_2720_pp2_iter1_reg <= base_reg_2720;
                tmp_65_i_reg_2703 <= tmp_65_i_fu_1536_p2;
                tmp_71_i_reg_2712_pp2_iter1_reg <= tmp_71_i_reg_2712;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then
                cx0_reg_2822 <= cx0_fu_1758_p2;
                cy0_cast_i_reg_2838 <= cy0_cast_i_fu_1773_p1;
                cy0_reg_2833 <= cy0_fu_1767_p2;
                tmp_60_reg_2817 <= tmp_60_fu_1754_p1;
                tmp_62_reg_2828 <= tmp_62_fu_1763_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_97_i_reg_2865 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                dist2_2_reg_2895 <= dist2_2_fu_1913_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (or_cond4_i_fu_1940_p2 = ap_const_lv1_0) and (tmp_97_i_reg_2865_pp4_iter2_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1))) then
                dist_accum_addr_2_reg_2914 <= tmp_116_i_fu_1978_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_118_i_fu_1995_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state77))) then
                dist_accum_addr_3_reg_2932 <= tmp_134_i_fu_2001_p1(9 - 1 downto 0);
                tmp_136_i_reg_2937 <= tmp_136_i_fu_2006_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                dx_val_load_reg_2561 <= dx_val_q0;
                dy_val_load_reg_2566 <= dy_val_q0;
                tmp_64_i_reg_2571 <= tmp_64_i_fu_1245_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_1_reg_2516 <= i_1_fu_1153_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
                i_2_reg_2681 <= i_2_fu_1495_p2;
                next_mul1_reg_2672 <= next_mul1_fu_1480_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                i_3_reg_2790 <= i_3_fu_1652_p2;
                total_1_load_reg_2780 <= total_1_fu_264;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_2477 <= i_fu_1069_p2;
                next_mul_reg_2468 <= next_mul_fu_1054_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                j_1_reg_2541 <= j_1_fu_1215_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                j_3_reg_2707 <= j_3_fu_1541_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then
                j_5_cast_i_reg_2847 <= j_5_cast_i_fu_1786_p2;
                tmp_86_i_reg_2843 <= tmp_86_i_fu_1781_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_68_i_reg_2575 = ap_const_lv1_0) and (tmp_64_i_reg_2571 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                k_reg_2619 <= k_fu_1311_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_HoughSortDescent_fu_914_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state60))) then
                min_dist2_reg_2775 <= min_dist2_fu_1633_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_59_i_fu_1490_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                min_dist_assign_reg_2698 <= min_dist_assign_fu_1519_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_110_i_fu_1354_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                or_cond3_i_reg_2638 <= or_cond3_i_fu_1423_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (tmp_97_i_reg_2865_pp4_iter2_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1))) then
                or_cond4_i_reg_2900 <= or_cond4_i_fu_1940_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (tmp_97_i_reg_2865 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1))) then
                p_dy_reg_2884 <= p_dy_fu_1898_p2;
                tmp_105_i_reg_2890 <= tmp_105_i_fu_1903_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((tmp_97_i_reg_2865_pp4_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)))) then
                reg_946 <= grp_sqrt_fixed_32_32_s_fu_909_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state80)) then
                t_V_2_reg_2967 <= t_V_2_fu_2045_p1;
                tmp_170_i_i_i_reg_2979 <= tmp_170_i_i_i_fu_2065_p2;
                tmp_i_i_i_reg_2973 <= tmp_i_i_i_fu_2059_p2;
                x_assign_3_reg_2962 <= x_assign_3_fu_930_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (tmp_89_i_reg_2754 = ap_const_lv1_1) and (tmp_85_i_reg_2745 = ap_const_lv1_1) and (tmp_73_i_reg_2736 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                tmp_102_i_reg_2763 <= grp_fu_941_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                tmp_110_i_reg_2634 <= tmp_110_i_fu_1354_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state79)) then
                tmp_128_i_reg_2957 <= tmp_128_i_fu_926_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state81)) then
                tmp_132_i_reg_2994 <= tmp_132_i_fu_2317_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_55_i_fu_1148_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    tmp_19_reg_2521(17 downto 6) <= tmp_19_fu_1183_p2(17 downto 6);
                    y0_reg_2526(31 downto 16) <= y0_fu_1193_p3(31 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_64_i_fu_1245_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                tmp_68_i_reg_2575 <= tmp_68_i_fu_1257_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (tmp_65_i_reg_2703 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                tmp_73_i_reg_2736 <= tmp_73_i_fu_1570_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                tmp_73_i_reg_2736_pp2_iter1_reg <= tmp_73_i_reg_2736;
                value_reg_2730_pp2_iter1_reg <= value_reg_2730;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_132_i_fu_2317_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then
                tmp_73_reg_3005 <= tmp_73_fu_2338_p1;
                tmp_74_reg_3010 <= tmp_74_fu_2359_p1;
                total_reg_2998 <= total_fu_2323_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (tmp_73_i_reg_2736 = ap_const_lv1_1) and (tmp_65_i_reg_2703 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                tmp_85_i_reg_2745 <= grp_fu_941_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (tmp_85_i_reg_2745 = ap_const_lv1_1) and (tmp_73_i_reg_2736 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                tmp_89_i_reg_2754 <= grp_fu_941_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                tmp_97_i_reg_2865 <= tmp_97_i_fu_1867_p2;
                tmp_97_i_reg_2865_pp4_iter1_reg <= tmp_97_i_reg_2865;
                tmp_97_i_reg_2865_pp4_iter2_reg <= tmp_97_i_reg_2865_pp4_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (tmp_65_i_reg_2703 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                value_reg_2730 <= accum_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                    x0_reg_2610(31 downto 16) <= x0_fu_1297_p3(31 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_68_i_fu_1257_p2 = ap_const_lv1_0) and (tmp_64_i_fu_1245_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                xf_V_reg_2579 <= grp_fu_2387_p3;
            end if;
        end if;
    end process;
    p_max_r_cast_i_reg_2453(31) <= '0';
    tmp_19_reg_2521(5 downto 0) <= "000000";
    y0_reg_2526(15 downto 0) <= "0000000000000000";
    x0_reg_2610(15 downto 0) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, edge_rows_empty_n, edge_cols_empty_n, circles_rows_empty_n, circles_cols_empty_n, acc_threshold_empty_n, min_dist_empty_n, min_radius_empty_n, max_radius_empty_n, circles_rows_out_full_n, circles_cols_out_full_n, ap_enable_reg_pp4_iter2, ap_CS_fsm_state2, tmp_50_i_fu_1064_p2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, tmp_55_i_fu_1148_p2, ap_CS_fsm_state8, tmp_60_i_fu_1210_p2, ap_CS_fsm_state9, tmp_64_i_fu_1245_p2, tmp_64_i_reg_2571, tmp_68_i_fu_1257_p2, tmp_68_i_reg_2575, exitcond_i_fu_1305_p2, ap_CS_fsm_state48, tmp_110_i_fu_1354_p2, ap_CS_fsm_state49, or_cond3_i_fu_1423_p2, ap_CS_fsm_state52, tmp_59_i_fu_1490_p2, tmp_65_i_fu_1536_p2, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter1, ap_CS_fsm_state60, grp_HoughSortDescent_fu_914_ap_done, ap_CS_fsm_state61, tmp_66_i_fu_1646_p2, tmp_86_i_reg_2843, ap_CS_fsm_pp4_stage1, ap_CS_fsm_state77, tmp_118_i_fu_1995_p2, tmp_132_i_reg_2994, ap_block_pp2_stage0_subdone, ap_block_pp2_stage2_subdone, ap_block_pp4_stage1_subdone, ap_enable_reg_pp4_iter1, tmp_52_i_fu_1079_p2, exitcond7_i_fu_1105_p2, exitcond6_i_fu_1122_p2, ap_CS_fsm_state82, tmp_146_i_fu_2373_p2, ap_CS_fsm_state65, tmp_96_i_fu_1858_p2, ap_block_pp2_stage1_subdone, ap_block_pp4_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (circles_cols_out_full_n = ap_const_logic_0) or (circles_rows_out_full_n = ap_const_logic_0) or (max_radius_empty_n = ap_const_logic_0) or (min_radius_empty_n = ap_const_logic_0) or (min_dist_empty_n = ap_const_logic_0) or (ap_const_logic_0 = acc_threshold_empty_n) or (circles_cols_empty_n = ap_const_logic_0) or (circles_rows_empty_n = ap_const_logic_0) or (edge_cols_empty_n = ap_const_logic_0) or (edge_rows_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_50_i_fu_1064_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_52_i_fu_1079_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state5 => 
                if (((exitcond7_i_fu_1105_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((exitcond6_i_fu_1122_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((tmp_55_i_fu_1148_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((tmp_60_i_fu_1210_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and ((tmp_68_i_fu_1257_p2 = ap_const_lv1_1) or (tmp_64_i_fu_1245_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state48) and ((exitcond_i_fu_1305_p2 = ap_const_lv1_1) or (tmp_68_i_reg_2575 = ap_const_lv1_1) or (tmp_64_i_reg_2571 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state49 => 
                if (((or_cond3_i_fu_1423_p2 = ap_const_lv1_0) and (tmp_110_i_fu_1354_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state52 => 
                if (((tmp_59_i_fu_1490_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (tmp_65_i_fu_1536_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (tmp_65_i_fu_1536_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_pp2_stage2 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage2_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) and (ap_const_boolean_0 = ap_block_pp2_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage2_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                end if;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state60 => 
                if (((grp_HoughSortDescent_fu_914_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state60))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state61 => 
                if (((tmp_66_i_fu_1646_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state61))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                if (((tmp_96_i_fu_1858_p2 = ap_const_lv1_1) and (tmp_86_i_reg_2843 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                elsif (((tmp_86_i_reg_2843 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                    ap_NS_fsm <= ap_ST_fsm_state67;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
            when ap_ST_fsm_pp4_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_pp4_stage1 => 
                if ((not(((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp4_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif (((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage1;
                end if;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                if (((tmp_118_i_fu_1995_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state77))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_state79;
                end if;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state82) and ((tmp_146_i_fu_2373_p2 = ap_const_lv1_0) or (tmp_132_i_reg_2994 = ap_const_lv1_0) or (tmp_86_i_reg_2843 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state83;
                end if;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    acc_threshold_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, acc_threshold_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            acc_threshold_blk_n <= acc_threshold_empty_n;
        else 
            acc_threshold_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    acc_threshold_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, edge_rows_empty_n, edge_cols_empty_n, circles_rows_empty_n, circles_cols_empty_n, acc_threshold_empty_n, min_dist_empty_n, min_radius_empty_n, max_radius_empty_n, circles_rows_out_full_n, circles_cols_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (circles_cols_out_full_n = ap_const_logic_0) or (circles_rows_out_full_n = ap_const_logic_0) or (max_radius_empty_n = ap_const_logic_0) or (min_radius_empty_n = ap_const_logic_0) or (min_dist_empty_n = ap_const_logic_0) or (ap_const_logic_0 = acc_threshold_empty_n) or (circles_cols_empty_n = ap_const_logic_0) or (circles_rows_empty_n = ap_const_logic_0) or (edge_cols_empty_n = ap_const_logic_0) or (edge_rows_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            acc_threshold_read <= ap_const_logic_1;
        else 
            acc_threshold_read <= ap_const_logic_0;
        end if; 
    end process;


    accum_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state49, accum_addr_6_reg_2642, ap_CS_fsm_state50, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter1, ap_CS_fsm_state60, grp_HoughSortDescent_fu_914_data_address0, ap_block_pp2_stage0, tmp_53_i_fu_1117_p1, tmp_140_i_fu_1439_p1, tmp_72_i_fu_1565_p1, ap_block_pp2_stage1, tmp_112_i_fu_1604_p1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1))) then 
            accum_address0 <= tmp_112_i_fu_1604_p1(17 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            accum_address0 <= tmp_72_i_fu_1565_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            accum_address0 <= accum_addr_6_reg_2642;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            accum_address0 <= tmp_140_i_fu_1439_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            accum_address0 <= tmp_53_i_fu_1117_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            accum_address0 <= grp_HoughSortDescent_fu_914_data_address0;
        else 
            accum_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    accum_address1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, tmp_84_i_fu_1575_p1, ap_block_pp2_stage1, tmp_88_i_fu_1584_p1, ap_block_pp2_stage2, tmp_101_i_fu_1594_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            accum_address1 <= tmp_101_i_fu_1594_p1(17 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage2))) then 
            accum_address1 <= tmp_88_i_fu_1584_p1(17 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1))) then 
            accum_address1 <= tmp_84_i_fu_1575_p1(17 - 1 downto 0);
        else 
            accum_address1 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    accum_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp2_iter1, ap_CS_fsm_state60, grp_HoughSortDescent_fu_914_data_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            accum_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            accum_ce0 <= grp_HoughSortDescent_fu_914_data_ce0;
        else 
            accum_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    accum_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_enable_reg_pp2_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            accum_ce1 <= ap_const_logic_1;
        else 
            accum_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    accum_d0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state50, tmp_141_i_fu_1443_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            accum_d0 <= tmp_141_i_fu_1443_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            accum_d0 <= ap_const_lv32_0;
        else 
            accum_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    accum_we0_assign_proc : process(ap_CS_fsm_state5, tmp_110_i_reg_2634, or_cond3_i_reg_2638, ap_CS_fsm_state50, exitcond7_i_fu_1105_p2)
    begin
        if ((((or_cond3_i_reg_2638 = ap_const_lv1_0) and (tmp_110_i_reg_2634 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state50)) or ((exitcond7_i_fu_1105_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            accum_we0 <= ap_const_logic_1;
        else 
            accum_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(52);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(53);
    ap_CS_fsm_pp2_stage2 <= ap_CS_fsm(54);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(64);
    ap_CS_fsm_pp4_stage1 <= ap_CS_fsm(65);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state59 <= ap_CS_fsm(55);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(56);
    ap_CS_fsm_state61 <= ap_CS_fsm(57);
    ap_CS_fsm_state62 <= ap_CS_fsm(58);
    ap_CS_fsm_state63 <= ap_CS_fsm(59);
    ap_CS_fsm_state64 <= ap_CS_fsm(60);
    ap_CS_fsm_state65 <= ap_CS_fsm(61);
    ap_CS_fsm_state67 <= ap_CS_fsm(63);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state75 <= ap_CS_fsm(66);
    ap_CS_fsm_state76 <= ap_CS_fsm(67);
    ap_CS_fsm_state77 <= ap_CS_fsm(68);
    ap_CS_fsm_state78 <= ap_CS_fsm(69);
    ap_CS_fsm_state79 <= ap_CS_fsm(70);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(71);
    ap_CS_fsm_state81 <= ap_CS_fsm(72);
    ap_CS_fsm_state82 <= ap_CS_fsm(73);
    ap_CS_fsm_state83 <= ap_CS_fsm(74);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, edge_rows_empty_n, edge_cols_empty_n, circles_rows_empty_n, circles_cols_empty_n, acc_threshold_empty_n, min_dist_empty_n, min_radius_empty_n, max_radius_empty_n, circles_rows_out_full_n, circles_cols_out_full_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (circles_cols_out_full_n = ap_const_logic_0) or (circles_rows_out_full_n = ap_const_logic_0) or (max_radius_empty_n = ap_const_logic_0) or (min_radius_empty_n = ap_const_logic_0) or (min_dist_empty_n = ap_const_logic_0) or (ap_const_logic_0 = acc_threshold_empty_n) or (circles_cols_empty_n = ap_const_logic_0) or (circles_rows_empty_n = ap_const_logic_0) or (edge_cols_empty_n = ap_const_logic_0) or (edge_rows_empty_n = ap_const_logic_0));
    end process;

        ap_block_state53_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp2_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp2_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp2_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp4_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp4_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp4_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp4_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1000_assign_proc : process(ap_enable_reg_pp4_iter2, ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001)
    begin
                ap_condition_1000 <= ((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1));
    end process;


    ap_condition_pp2_exit_iter0_state53_assign_proc : process(tmp_65_i_fu_1536_p2)
    begin
        if ((tmp_65_i_fu_1536_p2 = ap_const_lv1_0)) then 
            ap_condition_pp2_exit_iter0_state53 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state53 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter2_state73_assign_proc : process(ap_enable_reg_pp4_iter2, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))) then 
            ap_condition_pp4_exit_iter2_state73 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter2_state73 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state83)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter2, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter3)
    begin
        if (((ap_enable_reg_pp4_iter3 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j3_i_phi_fu_783_p4_assign_proc : process(j3_i_reg_779, tmp_65_i_reg_2703, ap_CS_fsm_pp2_stage0, j_3_reg_2707, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (tmp_65_i_reg_2703 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_j3_i_phi_fu_783_p4 <= j_3_reg_2707;
        else 
            ap_phi_mux_j3_i_phi_fu_783_p4 <= j3_i_reg_779;
        end if; 
    end process;


    ap_phi_mux_j8_i_phi_fu_816_p4_assign_proc : process(j8_i_reg_812, ap_CS_fsm_pp4_stage0, tmp_97_i_reg_2865, j_4_reg_2879, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (tmp_97_i_reg_2865 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            ap_phi_mux_j8_i_phi_fu_816_p4 <= j_4_reg_2879;
        else 
            ap_phi_mux_j8_i_phi_fu_816_p4 <= j8_i_reg_812;
        end if; 
    end process;

    ap_phi_reg_pp4_iter0_p_max_r_1_i_reg_844 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp4_iter0_p_min_r_1_i_reg_856 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(ap_CS_fsm_state83)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    base_fu_1559_p2 <= std_logic_vector(signed(tmp_71_i_fu_1553_p2) + signed(ap_const_lv32_1));
    c_0_c0_i_fu_2031_p1 <= dist_accum_q0;
    c_0_c0_i_fu_2031_p3 <= 
        c_0_c0_i_fu_2031_p1 when (tmp_137_i_fu_2018_p2(0) = '1') else 
        c_i_reg_879;
    centers_length_fu_1614_p0 <= centers_length_i_fu_260;
    centers_length_fu_1614_p2 <= std_logic_vector(signed(centers_length_fu_1614_p0) + signed(ap_const_lv32_1));

    centers_val_address0_assign_proc : process(ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter1, ap_CS_fsm_state60, ap_CS_fsm_state61, grp_HoughSortDescent_fu_914_sequence_address0, ap_block_pp2_stage2, tmp_i13_i_fu_1620_p1, tmp_74_i_fu_1658_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            centers_val_address0 <= tmp_74_i_fu_1658_p1(17 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2))) then 
            centers_val_address0 <= tmp_i13_i_fu_1620_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            centers_val_address0 <= grp_HoughSortDescent_fu_914_sequence_address0;
        else 
            centers_val_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    centers_val_ce0_assign_proc : process(ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_enable_reg_pp2_iter1, ap_CS_fsm_state60, ap_CS_fsm_state61, grp_HoughSortDescent_fu_914_sequence_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state61) or ((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2)))) then 
            centers_val_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            centers_val_ce0 <= grp_HoughSortDescent_fu_914_sequence_ce0;
        else 
            centers_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    centers_val_d0_assign_proc : process(base_reg_2720_pp2_iter1_reg, ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter1, ap_CS_fsm_state60, grp_HoughSortDescent_fu_914_sequence_d0, ap_block_pp2_stage2)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2))) then 
            centers_val_d0 <= base_reg_2720_pp2_iter1_reg;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            centers_val_d0 <= grp_HoughSortDescent_fu_914_sequence_d0;
        else 
            centers_val_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    centers_val_we0_assign_proc : process(tmp_73_i_reg_2736_pp2_iter1_reg, tmp_85_i_reg_2745, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, tmp_89_i_reg_2754, ap_enable_reg_pp2_iter1, tmp_102_i_reg_2763, ap_CS_fsm_state60, grp_HoughSortDescent_fu_914_sequence_we0, tmp_113_i_fu_1609_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (tmp_102_i_reg_2763 = ap_const_lv1_1) and (tmp_89_i_reg_2754 = ap_const_lv1_1) and (tmp_85_i_reg_2745 = ap_const_lv1_1) and (tmp_73_i_reg_2736_pp2_iter1_reg = ap_const_lv1_1) and (tmp_113_i_fu_1609_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
            centers_val_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            centers_val_we0 <= grp_HoughSortDescent_fu_914_sequence_we0;
        else 
            centers_val_we0 <= ap_const_logic_0;
        end if; 
    end process;


    circles_cols_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, circles_cols_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            circles_cols_blk_n <= circles_cols_empty_n;
        else 
            circles_cols_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    circles_cols_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, circles_cols_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            circles_cols_out_blk_n <= circles_cols_out_full_n;
        else 
            circles_cols_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    circles_cols_out_din <= circles_cols_dout;

    circles_cols_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, edge_rows_empty_n, edge_cols_empty_n, circles_rows_empty_n, circles_cols_empty_n, acc_threshold_empty_n, min_dist_empty_n, min_radius_empty_n, max_radius_empty_n, circles_rows_out_full_n, circles_cols_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (circles_cols_out_full_n = ap_const_logic_0) or (circles_rows_out_full_n = ap_const_logic_0) or (max_radius_empty_n = ap_const_logic_0) or (min_radius_empty_n = ap_const_logic_0) or (min_dist_empty_n = ap_const_logic_0) or (ap_const_logic_0 = acc_threshold_empty_n) or (circles_cols_empty_n = ap_const_logic_0) or (circles_rows_empty_n = ap_const_logic_0) or (edge_cols_empty_n = ap_const_logic_0) or (edge_rows_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            circles_cols_out_write <= ap_const_logic_1;
        else 
            circles_cols_out_write <= ap_const_logic_0;
        end if; 
    end process;


    circles_cols_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, edge_rows_empty_n, edge_cols_empty_n, circles_rows_empty_n, circles_cols_empty_n, acc_threshold_empty_n, min_dist_empty_n, min_radius_empty_n, max_radius_empty_n, circles_rows_out_full_n, circles_cols_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (circles_cols_out_full_n = ap_const_logic_0) or (circles_rows_out_full_n = ap_const_logic_0) or (max_radius_empty_n = ap_const_logic_0) or (min_radius_empty_n = ap_const_logic_0) or (min_dist_empty_n = ap_const_logic_0) or (ap_const_logic_0 = acc_threshold_empty_n) or (circles_cols_empty_n = ap_const_logic_0) or (circles_rows_empty_n = ap_const_logic_0) or (edge_cols_empty_n = ap_const_logic_0) or (edge_rows_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            circles_cols_read <= ap_const_logic_1;
        else 
            circles_cols_read <= ap_const_logic_0;
        end if; 
    end process;


    circles_rows_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, circles_rows_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            circles_rows_blk_n <= circles_rows_empty_n;
        else 
            circles_rows_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    circles_rows_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, circles_rows_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            circles_rows_out_blk_n <= circles_rows_out_full_n;
        else 
            circles_rows_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    circles_rows_out_din <= circles_rows_dout;

    circles_rows_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, edge_rows_empty_n, edge_cols_empty_n, circles_rows_empty_n, circles_cols_empty_n, acc_threshold_empty_n, min_dist_empty_n, min_radius_empty_n, max_radius_empty_n, circles_rows_out_full_n, circles_cols_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (circles_cols_out_full_n = ap_const_logic_0) or (circles_rows_out_full_n = ap_const_logic_0) or (max_radius_empty_n = ap_const_logic_0) or (min_radius_empty_n = ap_const_logic_0) or (min_dist_empty_n = ap_const_logic_0) or (ap_const_logic_0 = acc_threshold_empty_n) or (circles_cols_empty_n = ap_const_logic_0) or (circles_rows_empty_n = ap_const_logic_0) or (edge_cols_empty_n = ap_const_logic_0) or (edge_rows_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            circles_rows_out_write <= ap_const_logic_1;
        else 
            circles_rows_out_write <= ap_const_logic_0;
        end if; 
    end process;


    circles_rows_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, edge_rows_empty_n, edge_cols_empty_n, circles_rows_empty_n, circles_cols_empty_n, acc_threshold_empty_n, min_dist_empty_n, min_radius_empty_n, max_radius_empty_n, circles_rows_out_full_n, circles_cols_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (circles_cols_out_full_n = ap_const_logic_0) or (circles_rows_out_full_n = ap_const_logic_0) or (max_radius_empty_n = ap_const_logic_0) or (min_radius_empty_n = ap_const_logic_0) or (min_dist_empty_n = ap_const_logic_0) or (ap_const_logic_0 = acc_threshold_empty_n) or (circles_cols_empty_n = ap_const_logic_0) or (circles_rows_empty_n = ap_const_logic_0) or (edge_cols_empty_n = ap_const_logic_0) or (edge_rows_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            circles_rows_read <= ap_const_logic_1;
        else 
            circles_rows_read <= ap_const_logic_0;
        end if; 
    end process;


    circles_val_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state64, ap_CS_fsm_state81, tmp_16_cast_fu_1100_p1, tmp_911_i_fu_1798_p1, tmp_31_cast_fu_2348_p1, ap_CS_fsm_state83)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            circles_val_address0 <= ap_const_lv64_0(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            circles_val_address0 <= tmp_31_cast_fu_2348_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            circles_val_address0 <= tmp_911_i_fu_1798_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            circles_val_address0 <= tmp_16_cast_fu_1100_p1(9 - 1 downto 0);
        else 
            circles_val_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    circles_val_address1_assign_proc : process(ap_CS_fsm_state64, ap_CS_fsm_state81, ap_CS_fsm_state82, tmp_26_cast_fu_1813_p1, tmp_143_i_fu_2333_p1, tmp_32_cast_fu_2368_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            circles_val_address1 <= tmp_32_cast_fu_2368_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            circles_val_address1 <= tmp_143_i_fu_2333_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            circles_val_address1 <= tmp_26_cast_fu_1813_p1(9 - 1 downto 0);
        else 
            circles_val_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    circles_val_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state64, ap_CS_fsm_state81, ap_CS_fsm_state83)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state83))) then 
            circles_val_ce0 <= ap_const_logic_1;
        else 
            circles_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    circles_val_ce1_assign_proc : process(ap_CS_fsm_state64, ap_CS_fsm_state81, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            circles_val_ce1 <= ap_const_logic_1;
        else 
            circles_val_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    circles_val_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state81, tmp_144_i_fu_2353_p2, ap_CS_fsm_state83, tmp_75_fu_2382_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            circles_val_d0 <= tmp_75_fu_2382_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            circles_val_d0 <= tmp_144_i_fu_2353_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            circles_val_d0 <= ap_const_lv16_0;
        else 
            circles_val_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    circles_val_d1_assign_proc : process(ap_CS_fsm_state81, tmp_74_reg_3010, ap_CS_fsm_state82, tmp_142_i_fu_2328_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            circles_val_d1 <= tmp_74_reg_3010;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            circles_val_d1 <= tmp_142_i_fu_2328_p2;
        else 
            circles_val_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    circles_val_we0_assign_proc : process(ap_CS_fsm_state3, tmp_132_i_fu_2317_p2, ap_CS_fsm_state81, tmp_52_i_fu_1079_p2, ap_CS_fsm_state83)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state83) or ((tmp_132_i_fu_2317_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state81)) or ((tmp_52_i_fu_1079_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            circles_val_we0 <= ap_const_logic_1;
        else 
            circles_val_we0 <= ap_const_logic_0;
        end if; 
    end process;


    circles_val_we1_assign_proc : process(tmp_86_i_reg_2843, tmp_132_i_fu_2317_p2, tmp_132_i_reg_2994, ap_CS_fsm_state81, ap_CS_fsm_state82)
    begin
        if ((((tmp_86_i_reg_2843 = ap_const_lv1_0) and (tmp_132_i_reg_2994 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state82)) or ((tmp_132_i_fu_2317_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state81)))) then 
            circles_val_we1 <= ap_const_logic_1;
        else 
            circles_val_we1 <= ap_const_logic_0;
        end if; 
    end process;

    cx0_fu_1758_p2 <= std_logic_vector(signed(base_1_reg_2800) + signed(tmp6_fu_1748_p2));
    cx_fu_1818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(circles_val_q0),32));
        cy0_cast_i_fu_1773_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(cy0_fu_1767_p2),32));

    cy0_fu_1767_p2 <= std_logic_vector(signed(ap_const_lv24_FFFFFF) + signed(tmp_59_fu_1738_p1));
    cy_cast_i_fu_1822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(circles_val_q1),24));
    dist2_2_fu_1913_p2 <= std_logic_vector(unsigned(tmp_105_i_reg_2890) + unsigned(tmp_106_i_fu_1909_p2));
    dist2_fu_1852_p2 <= std_logic_vector(unsigned(tmp_93_i_fu_1831_p2) + unsigned(tmp_95_i_fu_1846_p2));

    dist_accum_address0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter2, ap_CS_fsm_state6, ap_CS_fsm_pp4_stage1, dist_accum_addr_2_reg_2914, ap_CS_fsm_state75, dist_accum_addr_3_reg_2932, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_enable_reg_pp4_iter3, ap_block_pp4_stage0, ap_block_pp4_stage1, tmp_56_i_fu_1134_p1, tmp_116_i_fu_1978_p1, tmp_109_i_fu_1990_p1, tmp_134_i_fu_2001_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            dist_accum_address0 <= dist_accum_addr_3_reg_2932;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            dist_accum_address0 <= tmp_134_i_fu_2001_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            dist_accum_address0 <= tmp_109_i_fu_1990_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            dist_accum_address0 <= dist_accum_addr_2_reg_2914;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage1))) then 
            dist_accum_address0 <= tmp_116_i_fu_1978_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dist_accum_address0 <= tmp_56_i_fu_1134_p1(9 - 1 downto 0);
        else 
            dist_accum_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    dist_accum_ce0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter2, ap_block_pp4_stage0_11001, ap_CS_fsm_state6, ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_state75, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_enable_reg_pp4_iter3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)))) then 
            dist_accum_ce0 <= ap_const_logic_1;
        else 
            dist_accum_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dist_accum_d0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_CS_fsm_state6, ap_CS_fsm_state78, ap_enable_reg_pp4_iter3, ap_block_pp4_stage0, tmp_117_i_fu_1983_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            dist_accum_d0 <= tmp_117_i_fu_1983_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            dist_accum_d0 <= ap_const_lv32_0;
        else 
            dist_accum_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dist_accum_we0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_CS_fsm_state6, tmp_97_i_reg_2865_pp4_iter2_reg, or_cond4_i_reg_2900, ap_CS_fsm_state78, ap_enable_reg_pp4_iter3, exitcond6_i_fu_1122_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state78) or ((exitcond6_i_fu_1122_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((or_cond4_i_reg_2900 = ap_const_lv1_0) and (tmp_97_i_reg_2865_pp4_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)))) then 
            dist_accum_we0 <= ap_const_logic_1;
        else 
            dist_accum_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dx_val_address0 <= tmp_21_cast_fu_1230_p1(17 - 1 downto 0);

    dx_val_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dx_val_ce0 <= ap_const_logic_1;
        else 
            dx_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dy_val_address0 <= tmp_21_cast_fu_1230_p1(17 - 1 downto 0);

    dy_val_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dy_val_ce0 <= ap_const_logic_1;
        else 
            dy_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    edge_cols_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, edge_cols_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            edge_cols_blk_n <= edge_cols_empty_n;
        else 
            edge_cols_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    edge_cols_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, edge_rows_empty_n, edge_cols_empty_n, circles_rows_empty_n, circles_cols_empty_n, acc_threshold_empty_n, min_dist_empty_n, min_radius_empty_n, max_radius_empty_n, circles_rows_out_full_n, circles_cols_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (circles_cols_out_full_n = ap_const_logic_0) or (circles_rows_out_full_n = ap_const_logic_0) or (max_radius_empty_n = ap_const_logic_0) or (min_radius_empty_n = ap_const_logic_0) or (min_dist_empty_n = ap_const_logic_0) or (ap_const_logic_0 = acc_threshold_empty_n) or (circles_cols_empty_n = ap_const_logic_0) or (circles_rows_empty_n = ap_const_logic_0) or (edge_cols_empty_n = ap_const_logic_0) or (edge_rows_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            edge_cols_read <= ap_const_logic_1;
        else 
            edge_cols_read <= ap_const_logic_0;
        end if; 
    end process;


    edge_rows_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, edge_rows_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            edge_rows_blk_n <= edge_rows_empty_n;
        else 
            edge_rows_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    edge_rows_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, edge_rows_empty_n, edge_cols_empty_n, circles_rows_empty_n, circles_cols_empty_n, acc_threshold_empty_n, min_dist_empty_n, min_radius_empty_n, max_radius_empty_n, circles_rows_out_full_n, circles_cols_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (circles_cols_out_full_n = ap_const_logic_0) or (circles_rows_out_full_n = ap_const_logic_0) or (max_radius_empty_n = ap_const_logic_0) or (min_radius_empty_n = ap_const_logic_0) or (min_dist_empty_n = ap_const_logic_0) or (ap_const_logic_0 = acc_threshold_empty_n) or (circles_cols_empty_n = ap_const_logic_0) or (circles_rows_empty_n = ap_const_logic_0) or (edge_cols_empty_n = ap_const_logic_0) or (edge_rows_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            edge_rows_read <= ap_const_logic_1;
        else 
            edge_rows_read <= ap_const_logic_0;
        end if; 
    end process;

    edge_val_address0 <= tmp_21_cast_fu_1230_p1(17 - 1 downto 0);

    edge_val_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            edge_val_ce0 <= ap_const_logic_1;
        else 
            edge_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond6_i_fu_1122_p2 <= "1" when (n1_i_reg_658 = ap_const_lv9_141) else "0";
    exitcond7_i_fu_1105_p2 <= "1" when (n_i_reg_647 = ap_const_lv17_13064) else "0";
    exitcond_i_fu_1305_p2 <= "1" when (k_i_reg_715 = ap_const_lv2_2) else "0";
    extLd30_i_fu_1885_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pt_buf_val_x_q0),32));
    extLd34_i_fu_1889_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pt_buf_val_y_q0),32));
    grp_HoughSortDescent_fu_914_ap_start <= grp_HoughSortDescent_fu_914_ap_start_reg;

    grp_fu_1274_ap_start_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_1274_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1274_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1274_p0 <= (dx_val_load_reg_2561 & ap_const_lv16_0);
    grp_fu_1274_p1 <= p_Val2_19_fu_1263_p1(17 - 1 downto 0);

    grp_fu_1287_ap_start_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_1287_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1287_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1287_p0 <= (dy_val_load_reg_2566 & ap_const_lv16_0);
    grp_fu_1287_p1 <= p_Val2_19_fu_1263_p1(17 - 1 downto 0);
    grp_fu_2387_p0 <= vx_fu_1237_p1(16 - 1 downto 0);
    grp_fu_2387_p1 <= vx_fu_1237_p1(16 - 1 downto 0);
    grp_fu_2401_p1 <= ap_const_lv17_142(10 - 1 downto 0);
    grp_fu_2401_p2 <= grp_fu_2401_p20(16 - 1 downto 0);
    grp_fu_2401_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_139_i_fu_1429_p2),17));
    grp_fu_941_p2 <= "1" when (signed(value_reg_2730) > signed(accum_q1)) else "0";

    grp_sqrt_fixed_32_32_s_fu_909_ap_ce_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)))) then 
            grp_sqrt_fixed_32_32_s_fu_909_ap_ce <= ap_const_logic_1;
        else 
            grp_sqrt_fixed_32_32_s_fu_909_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_sqrt_fixed_32_32_s_fu_909_x_V_assign_proc : process(tmp_97_i_reg_2865_pp4_iter1_reg, xf_V_reg_2579, ap_CS_fsm_pp4_stage1, dist2_2_reg_2895, ap_enable_reg_pp4_iter1, ap_CS_fsm_state10, ap_block_pp4_stage1)
    begin
        if (((tmp_97_i_reg_2865_pp4_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1))) then 
            grp_sqrt_fixed_32_32_s_fu_909_x_V <= dist2_2_reg_2895;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_sqrt_fixed_32_32_s_fu_909_x_V <= xf_V_reg_2579;
        else 
            grp_sqrt_fixed_32_32_s_fu_909_x_V <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i2_cast_i_fu_1486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_i_reg_756),32));
    i5_cast_i_fu_1642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i5_i_reg_790),32));
    i_0_i_cast_cast_i_fu_1060_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i_reg_613),3));
    i_1_fu_1153_p2 <= std_logic_vector(unsigned(p_y_assign_reg_669) + unsigned(ap_const_lv31_1));
    i_2_fu_1495_p2 <= std_logic_vector(unsigned(i2_i_reg_756) + unsigned(ap_const_lv31_1));
    i_3_fu_1652_p2 <= std_logic_vector(unsigned(i5_i_reg_790) + unsigned(ap_const_lv31_1));
    i_fu_1069_p2 <= std_logic_vector(unsigned(i_0_i_i_reg_613) + unsigned(ap_const_lv2_1));
    icmp_fu_1510_p2 <= "1" when (signed(tmp_53_fu_1501_p4) > signed(ap_const_lv31_0)) else "0";
    index_V_fu_2071_p4 <= t_V_2_fu_2045_p1(57 downto 52);
    isNeg_fu_2223_p3 <= sh_assign_fu_2217_p2(11 downto 11);
    j3_cast_i_fu_1532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j3_i_phi_fu_783_p4),32));
    j7_cast_i_fu_1777_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j7_i_reg_801),32));
    j8_cast_i_fu_1863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j8_i_phi_fu_816_p4),32));
    j_0_i_cast_cast_i_fu_1075_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_i_reg_636),8));
    j_1_fu_1215_p2 <= std_logic_vector(unsigned(p_x_assign_reg_682) + unsigned(ap_const_lv31_1));
    j_2_fu_1792_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(j7_cast_i_fu_1777_p1));
    j_3_fu_1541_p2 <= std_logic_vector(unsigned(ap_phi_mux_j3_i_phi_fu_783_p4) + unsigned(ap_const_lv31_1));
    j_4_fu_1879_p2 <= std_logic_vector(unsigned(j8_i_reg_812) + unsigned(ap_const_lv31_1));
    j_5_cast_i_fu_1786_p2 <= std_logic_vector(unsigned(j7_i_reg_801) + unsigned(ap_const_lv31_1));
    j_fu_1084_p2 <= std_logic_vector(unsigned(j_0_i_i_reg_636) + unsigned(ap_const_lv7_1));
    k_fu_1311_p2 <= std_logic_vector(unsigned(k_i_reg_715) + unsigned(ap_const_lv2_1));
    loc_V_1_fu_2111_p1 <= p_Val2_s_fu_2106_p2(52 - 1 downto 0);
    loc_V_2_fu_2185_p4 <= p_Val2_15_fu_2173_p1(62 downto 52);
    loc_V_3_fu_2195_p1 <= p_Val2_15_fu_2173_p1(52 - 1 downto 0);
    loc_V_fu_2049_p4 <= t_V_2_fu_2045_p1(62 downto 52);
    mask_table1_address0 <= tmp_171_i_i_i_fu_2081_p1(6 - 1 downto 0);

    mask_table1_ce0_assign_proc : process(ap_CS_fsm_state80)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            mask_table1_ce0 <= ap_const_logic_1;
        else 
            mask_table1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_r0_fu_956_p3 <= 
        edge_rows_dout when (tmp_i_i_fu_950_p2(0) = '1') else 
        edge_cols_dout;
    max_radius_assign_ca_fu_994_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_fu_986_p3),32));

    max_radius_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, max_radius_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            max_radius_blk_n <= max_radius_empty_n;
        else 
            max_radius_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    max_radius_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, edge_rows_empty_n, edge_cols_empty_n, circles_rows_empty_n, circles_cols_empty_n, acc_threshold_empty_n, min_dist_empty_n, min_radius_empty_n, max_radius_empty_n, circles_rows_out_full_n, circles_cols_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (circles_cols_out_full_n = ap_const_logic_0) or (circles_rows_out_full_n = ap_const_logic_0) or (max_radius_empty_n = ap_const_logic_0) or (min_radius_empty_n = ap_const_logic_0) or (min_dist_empty_n = ap_const_logic_0) or (ap_const_logic_0 = acc_threshold_empty_n) or (circles_cols_empty_n = ap_const_logic_0) or (circles_rows_empty_n = ap_const_logic_0) or (edge_cols_empty_n = ap_const_logic_0) or (edge_rows_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            max_radius_read <= ap_const_logic_1;
        else 
            max_radius_read <= ap_const_logic_0;
        end if; 
    end process;

    min_dist2_fu_1633_p0 <= tmp_i15_cast_i_fu_1630_p1(31 - 1 downto 0);
    min_dist2_fu_1633_p1 <= tmp_i15_cast_i_fu_1630_p1(31 - 1 downto 0);
    min_dist2_fu_1633_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(min_dist2_fu_1633_p0) * unsigned(min_dist2_fu_1633_p1), 32));
    min_dist_assign_fu_1519_p3 <= 
        tmp_54_fu_1516_p1 when (icmp_fu_1510_p2(0) = '1') else 
        ap_const_lv31_1;

    min_dist_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, min_dist_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            min_dist_blk_n <= min_dist_empty_n;
        else 
            min_dist_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    min_dist_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, edge_rows_empty_n, edge_cols_empty_n, circles_rows_empty_n, circles_cols_empty_n, acc_threshold_empty_n, min_dist_empty_n, min_radius_empty_n, max_radius_empty_n, circles_rows_out_full_n, circles_cols_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (circles_cols_out_full_n = ap_const_logic_0) or (circles_rows_out_full_n = ap_const_logic_0) or (max_radius_empty_n = ap_const_logic_0) or (min_radius_empty_n = ap_const_logic_0) or (min_dist_empty_n = ap_const_logic_0) or (ap_const_logic_0 = acc_threshold_empty_n) or (circles_cols_empty_n = ap_const_logic_0) or (circles_rows_empty_n = ap_const_logic_0) or (edge_cols_empty_n = ap_const_logic_0) or (edge_rows_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            min_dist_read <= ap_const_logic_1;
        else 
            min_dist_read <= ap_const_logic_0;
        end if; 
    end process;

    min_radius_assign_3_fu_1016_p3 <= 
        max_r0_fu_956_p3 when (or_cond8_i_fu_1010_p2(0) = '1') else 
        max_radius_dout;

    min_radius_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, min_radius_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            min_radius_blk_n <= min_radius_empty_n;
        else 
            min_radius_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    min_radius_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, edge_rows_empty_n, edge_cols_empty_n, circles_rows_empty_n, circles_cols_empty_n, acc_threshold_empty_n, min_dist_empty_n, min_radius_empty_n, max_radius_empty_n, circles_rows_out_full_n, circles_cols_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (circles_cols_out_full_n = ap_const_logic_0) or (circles_rows_out_full_n = ap_const_logic_0) or (max_radius_empty_n = ap_const_logic_0) or (min_radius_empty_n = ap_const_logic_0) or (min_dist_empty_n = ap_const_logic_0) or (ap_const_logic_0 = acc_threshold_empty_n) or (circles_cols_empty_n = ap_const_logic_0) or (circles_rows_empty_n = ap_const_logic_0) or (edge_cols_empty_n = ap_const_logic_0) or (edge_rows_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            min_radius_read <= ap_const_logic_1;
        else 
            min_radius_read <= ap_const_logic_0;
        end if; 
    end process;

    mul_fu_1678_p1 <= base_1_reg_2800;
    mul_fu_1678_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv65_1970E4F81) * signed(mul_fu_1678_p1))), 65));
    n_1_fu_1128_p2 <= std_logic_vector(unsigned(n1_i_reg_658) + unsigned(ap_const_lv9_1));
    n_fu_1111_p2 <= std_logic_vector(unsigned(n_i_reg_647) + unsigned(ap_const_lv17_1));
    neg_mul_fu_1684_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_fu_1678_p2));
    neg_ti_fu_1725_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_25_fu_1718_p3));
    next_mul1_fu_1480_p2 <= std_logic_vector(unsigned(phi_mul1_reg_767) + unsigned(ap_const_lv32_142));
    next_mul_fu_1054_p2 <= std_logic_vector(unsigned(phi_mul_reg_624) + unsigned(ap_const_lv9_64));
    one_half_i_i_cast_i_fu_2102_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(one_half_table2_q0),64));
    one_half_table2_address0 <= tmp_171_i_i_i_fu_2081_p1(6 - 1 downto 0);

    one_half_table2_ce0_assign_proc : process(ap_CS_fsm_state80)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            one_half_table2_ce0 <= ap_const_logic_1;
        else 
            one_half_table2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_cond3_i_fu_1423_p2 <= (tmp_fu_1411_p2 or tmp4_fu_1417_p2);
    or_cond4_i_fu_1940_p2 <= (tmp_108_i_fu_1935_p2 or tmp_107_i_fu_1930_p2);
    or_cond8_i_fu_1010_p2 <= (tmp_48_i_fu_1004_p2 or tmp_47_i_fu_998_p2);
    or_cond_i_fu_976_p2 <= (tmp_i_fu_964_p2 or tmp_i_239_fu_970_p2);
    p_Result_13_fu_2094_p3 <= (p_Result_s_fu_2087_p3 & ap_const_lv63_0);
    p_Result_14_fu_2137_p3 <= (tmp_5_fu_2127_p4 & xs_sig_V_fu_2121_p2);
    p_Result_15_fu_2177_p3 <= p_Val2_15_fu_2173_p1(63 downto 63);
    p_Result_s_fu_2087_p3 <= t_V_2_reg_2967(63 downto 63);
    p_Val2_15_fu_2173_p1 <= x_assign_4_fu_2166_p3;
    p_Val2_19_fu_1263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_946),32));
    p_Val2_20_fu_1922_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_946),32));
    p_Val2_21_fu_2309_p3 <= 
        p_Val2_i_i_i_i_fu_2303_p2 when (p_Result_15_fu_2177_p3(0) = '1') else 
        p_Val2_8_fu_2295_p3;
    p_Val2_23_cast_fu_1926_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_946),31));
    p_Val2_8_fu_2295_p3 <= 
        tmp_s_fu_2281_p1 when (isNeg_fu_2223_p3(0) = '1') else 
        tmp_28_fu_2285_p4;
    p_Val2_i_i_i_i_fu_2303_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_8_fu_2295_p3));
    p_Val2_s_fu_2106_p2 <= std_logic_vector(unsigned(t_V_2_reg_2967) + unsigned(one_half_i_i_cast_i_fu_2102_p1));
    p_dx_fu_1893_p2 <= std_logic_vector(unsigned(cx0_reg_2822) - unsigned(extLd30_i_fu_1885_p1));
    p_dy_fu_1898_p2 <= std_logic_vector(signed(cy0_cast_i_reg_2838) - signed(extLd34_i_fu_1889_p1));
    p_max_r_1_cast_fu_1960_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_max_r_1_fu_1952_p3),32));
    p_max_r_1_fu_1952_p3 <= 
        p_Val2_23_cast_fu_1926_p1 when (tmp_114_i_fu_1946_p2(0) = '1') else 
        tmp_66_fu_1918_p1;
    p_max_r_cast_i_fu_1042_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_max_r_fu_1034_p3),32));
    p_max_r_fu_1034_p3 <= 
        temp_fu_986_p3 when (tmp_49_i_fu_1028_p2(0) = '1') else 
        tmp_48_fu_1024_p1;
    p_min_r_2_fu_1046_p3 <= 
        min_radius_assign_3_fu_1016_p3 when (tmp_49_i_fu_1028_p2(0) = '1') else 
        max_radius_assign_ca_fu_994_p1;
    p_min_r_fu_1970_p3 <= 
        p_Val2_20_fu_1922_p1 when (tmp_115_i_fu_1964_p2(0) = '1') else 
        r0_2_reg_834;
    p_shl1_cast_fu_1175_p3 <= (tmp_50_fu_1171_p1 & ap_const_lv6_0);
    p_shl_cast_fu_1163_p3 <= (tmp_49_fu_1159_p1 & ap_const_lv8_0);
    p_x_assign_cast_i_fu_1206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_x_assign_reg_682),32));
    p_y_assign_cast_i_fu_1144_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_y_assign_reg_669),32));
    pt_buf_length_fu_1337_p0 <= pt_buf_length_i_fu_256;
    pt_buf_length_fu_1337_p2 <= std_logic_vector(signed(pt_buf_length_fu_1337_p0) + signed(ap_const_lv32_1));

    pt_buf_val_x_address0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_CS_fsm_state48, ap_enable_reg_pp4_iter0, ap_block_pp4_stage0, tmp_i12_i_fu_1343_p1, tmp_104_i_fu_1873_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            pt_buf_val_x_address0 <= tmp_104_i_fu_1873_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            pt_buf_val_x_address0 <= tmp_i12_i_fu_1343_p1(17 - 1 downto 0);
        else 
            pt_buf_val_x_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pt_buf_val_x_ce0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_CS_fsm_state48, ap_enable_reg_pp4_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)))) then 
            pt_buf_val_x_ce0 <= ap_const_logic_1;
        else 
            pt_buf_val_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pt_buf_val_x_we0_assign_proc : process(tmp_64_i_reg_2571, tmp_68_i_reg_2575, exitcond_i_fu_1305_p2, ap_CS_fsm_state48)
    begin
        if (((tmp_68_i_reg_2575 = ap_const_lv1_0) and (tmp_64_i_reg_2571 = ap_const_lv1_0) and (exitcond_i_fu_1305_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            pt_buf_val_x_we0 <= ap_const_logic_1;
        else 
            pt_buf_val_x_we0 <= ap_const_logic_0;
        end if; 
    end process;


    pt_buf_val_y_address0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_CS_fsm_state48, ap_enable_reg_pp4_iter0, ap_block_pp4_stage0, tmp_i12_i_fu_1343_p1, tmp_104_i_fu_1873_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            pt_buf_val_y_address0 <= tmp_104_i_fu_1873_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            pt_buf_val_y_address0 <= tmp_i12_i_fu_1343_p1(17 - 1 downto 0);
        else 
            pt_buf_val_y_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pt_buf_val_y_ce0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_CS_fsm_state48, ap_enable_reg_pp4_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)))) then 
            pt_buf_val_y_ce0 <= ap_const_logic_1;
        else 
            pt_buf_val_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pt_buf_val_y_we0_assign_proc : process(tmp_64_i_reg_2571, tmp_68_i_reg_2575, exitcond_i_fu_1305_p2, ap_CS_fsm_state48)
    begin
        if (((tmp_68_i_reg_2575 = ap_const_lv1_0) and (tmp_64_i_reg_2571 = ap_const_lv1_0) and (exitcond_i_fu_1305_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            pt_buf_val_y_we0 <= ap_const_logic_1;
        else 
            pt_buf_val_y_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r10_0_r0_i_fu_2023_p3 <= 
        r0_reg_889 when (tmp_137_i_fu_2018_p2(0) = '1') else 
        r0_i_reg_868;
    r_2_fu_1462_p2 <= std_logic_vector(unsigned(r1_i_reg_746) + unsigned(ap_const_lv32_1));
    r_3_fu_2039_p2 <= std_logic_vector(signed(r0_reg_889) + signed(ap_const_lv32_1));
    sel_tmp1_fu_2156_p2 <= (tmp_i_i_i_reg_2973 xor ap_const_lv1_1);
    sel_tmp2_fu_2161_p2 <= (tmp_170_i_i_i_reg_2979 and sel_tmp1_fu_2156_p2);
    sel_tmp_fu_2152_p1 <= sel_tmp_v_fu_2145_p3;
    sel_tmp_v_fu_2145_p3 <= 
        p_Result_13_fu_2094_p3 when (tmp_i_i_i_reg_2973(0) = '1') else 
        p_Result_14_fu_2137_p3;
    sh_assign_1_fu_2241_p3 <= 
        tmp_176_i_i_i_cast_i_fu_2237_p1 when (isNeg_fu_2223_p3(0) = '1') else 
        sh_assign_fu_2217_p2;
        sh_assign_1_i_i_i_ca_fu_2249_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_fu_2241_p3),32));

    sh_assign_fu_2217_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i_cast_i_fu_2213_p1));
    sx_1_fu_1468_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(sx1_i_reg_695));
    sy_1_fu_1474_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(sy1_i_reg_705));
    t_V_2_fu_2045_p1 <= x_assign_3_fu_930_p1;
    temp_fu_986_p3 <= 
        ap_const_lv31_1 when (or_cond_i_fu_976_p2(0) = '1') else 
        tmp_47_fu_982_p1;
    tmp4_fu_1417_p2 <= (tmp_65_fu_1397_p3 or tmp_127_i_fu_1405_p2);
    tmp5_fu_1547_p2 <= std_logic_vector(unsigned(j3_cast_i_fu_1532_p1) + unsigned(ap_const_lv32_142));
    tmp6_fu_1748_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(tmp_76_i_fu_1742_p2));
    tmp_100_i_fu_1589_p2 <= std_logic_vector(signed(tmp_71_i_reg_2712) + signed(ap_const_lv32_FFFFFEBF));
        tmp_101_i_fu_1594_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_100_i_fu_1589_p2),64));

    tmp_104_i_fu_1873_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j8_i_phi_fu_816_p4),64));
    tmp_105_i_fu_1903_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_dx_fu_1893_p2) * signed(p_dx_fu_1893_p2))), 32));
    tmp_106_i_fu_1909_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_dy_reg_2884) * signed(p_dy_reg_2884))), 32));
    tmp_107_i_fu_1930_p2 <= "1" when (signed(p_min_r_2_reg_2459) > signed(p_Val2_20_fu_1922_p1)) else "0";
    tmp_108_i_fu_1935_p2 <= "1" when (unsigned(p_Val2_23_cast_fu_1926_p1) > unsigned(p_max_r_reg_2448)) else "0";
        tmp_109_i_fu_1990_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r0_2_reg_834),64));

    tmp_110_i_fu_1354_p2 <= "1" when (signed(r1_i_reg_746) > signed(p_max_r_cast_i_reg_2453)) else "0";
    tmp_111_i_fu_1599_p2 <= std_logic_vector(signed(tmp_71_i_reg_2712_pp2_iter1_reg) + signed(ap_const_lv32_143));
        tmp_112_i_fu_1604_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_111_i_fu_1599_p2),64));

    tmp_113_i_fu_1609_p2 <= "1" when (signed(value_reg_2730_pp2_iter1_reg) > signed(accum_q0)) else "0";
    tmp_114_i_fu_1946_p2 <= "1" when (signed(p_Val2_20_fu_1922_p1) > signed(p_max_r1_i_reg_824)) else "0";
    tmp_115_i_fu_1964_p2 <= "1" when (signed(p_Val2_20_fu_1922_p1) < signed(r0_2_reg_834)) else "0";
    tmp_116_i_fu_1978_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_946),64));
    tmp_117_i_fu_1983_p2 <= std_logic_vector(unsigned(dist_accum_q0) + unsigned(ap_const_lv32_1));
    tmp_118_i_fu_1995_p2 <= "1" when (signed(r0_reg_889) > signed(p_max_r1_i_reg_824)) else "0";
    tmp_121_i_fu_1359_p4 <= x_i_reg_726(31 downto 16);
    tmp_123_i_fu_1369_p4 <= y_i_reg_736(31 downto 16);
    tmp_125_i_fu_1391_p2 <= "1" when (signed(tmp_121_i_fu_1359_p4) > signed(ap_const_lv16_13F)) else "0";
    tmp_127_i_fu_1405_p2 <= "1" when (signed(tmp_123_i_fu_1369_p4) > signed(ap_const_lv16_EF)) else "0";
    tmp_132_i_fu_2317_p2 <= "1" when (signed(c_i_reg_879) > signed(p_Val2_21_fu_2309_p3)) else "0";
        tmp_134_i_fu_2001_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r0_reg_889),64));

    tmp_135_i_fu_2012_p0 <= dist_accum_q0;
    tmp_135_i_fu_2012_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_135_i_fu_2012_p0) * signed(r0_i_reg_868))), 32));
    tmp_136_i_fu_2006_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r0_reg_889) * signed(c_i_reg_879))), 32));
    tmp_137_i_fu_2018_p2 <= "1" when (signed(tmp_135_i_fu_2012_p2) > signed(tmp_136_i_reg_2937)) else "0";
    tmp_139_i_fu_1429_p2 <= std_logic_vector(unsigned(tmp_121_i_fu_1359_p4) + unsigned(ap_const_lv16_143));
    tmp_140_i_fu_1439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_2401_p3),64));
    tmp_141_i_fu_1443_p2 <= std_logic_vector(unsigned(accum_q0) + unsigned(ap_const_lv32_1));
    tmp_142_i_fu_2328_p2 <= std_logic_vector(unsigned(tmp_61_reg_2812) + unsigned(tmp_60_reg_2817));
        tmp_143_i_fu_2333_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(total_fu_2323_p2),64));

    tmp_144_i_fu_2353_p2 <= std_logic_vector(signed(ap_const_lv16_FFFF) + signed(tmp_62_reg_2828));
    tmp_146_i_fu_2373_p2 <= "1" when (signed(total_reg_2998) > signed(ap_const_lv32_62)) else "0";
    tmp_16_cast_fu_1100_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_1094_p2),64));
    tmp_16_fu_1094_p2 <= std_logic_vector(unsigned(phi_mul_reg_624) + unsigned(tmp_54_i_cast_fu_1090_p1));
    tmp_170_i_i_i_fu_2065_p2 <= "1" when (unsigned(loc_V_fu_2049_p4) > unsigned(ap_const_lv11_433)) else "0";
    tmp_171_i_i_i_fu_2081_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_V_fu_2071_p4),64));
    tmp_173_i_i_i_fu_2115_p2 <= (mask_table1_q0 xor ap_const_lv52_FFFFFFFFFFFFF);
        tmp_176_i_i_i_cast_i_fu_2237_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_176_i_i_i_i_fu_2231_p2),12));

    tmp_176_i_i_i_i_fu_2231_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_2_fu_2185_p4));
    tmp_177_i_i_i_cast_i_fu_2257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_i_i_i_ca_fu_2249_p1),54));
    tmp_177_i_i_i_i_fu_2253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_i_i_i_ca_fu_2249_p1),137));
    tmp_178_i_i_i_i_fu_2261_p2 <= std_logic_vector(shift_right(unsigned(tmp_i_i_i_i_fu_2199_p4),to_integer(unsigned('0' & tmp_177_i_i_i_cast_i_fu_2257_p1(31-1 downto 0)))));
    tmp_179_i_i_i_i_fu_2267_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i_i_cast_i_fu_2209_p1),to_integer(unsigned('0' & tmp_177_i_i_i_i_fu_2253_p1(31-1 downto 0)))));
    tmp_19_fu_1183_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_1163_p3) + unsigned(p_shl1_cast_fu_1175_p3));
    tmp_21_cast_fu_1230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_1225_p2),64));
    tmp_21_fu_1225_p2 <= std_logic_vector(unsigned(tmp_19_reg_2521) + unsigned(tmp_52_fu_1221_p1));
        tmp_23_fu_1700_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_57_fu_1690_p4),32));

        tmp_24_fu_1714_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_58_fu_1704_p4),32));

    tmp_25_fu_1718_p3 <= 
        tmp_23_fu_1700_p1 when (tmp_56_reg_2806(0) = '1') else 
        tmp_24_fu_1714_p1;
        tmp_26_cast_fu_1813_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_26_fu_1807_p2),64));

    tmp_26_fu_1807_p2 <= std_logic_vector(unsigned(ap_const_lv10_64) + unsigned(tmp_63_fu_1803_p1));
    tmp_28_fu_2285_p4 <= tmp_179_i_i_i_i_fu_2267_p2(84 downto 53);
    tmp_29_fu_2342_p2 <= std_logic_vector(unsigned(ap_const_lv10_64) + unsigned(tmp_73_fu_2338_p1));
    tmp_30_fu_2363_p2 <= std_logic_vector(unsigned(ap_const_lv10_C8) + unsigned(tmp_73_reg_3005));
        tmp_31_cast_fu_2348_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_29_fu_2342_p2),64));

        tmp_32_cast_fu_2368_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_30_fu_2363_p2),64));

    tmp_47_fu_982_p1 <= min_radius_dout(31 - 1 downto 0);
    tmp_47_i_fu_998_p2 <= "1" when (signed(max_radius_dout) < signed(ap_const_lv32_1)) else "0";
    tmp_48_fu_1024_p1 <= min_radius_assign_3_fu_1016_p3(31 - 1 downto 0);
    tmp_48_i_fu_1004_p2 <= "1" when (signed(max_r0_fu_956_p3) < signed(max_radius_dout)) else "0";
    tmp_49_fu_1159_p1 <= p_y_assign_reg_669(10 - 1 downto 0);
    tmp_49_i_fu_1028_p2 <= "1" when (signed(min_radius_assign_3_fu_1016_p3) < signed(max_radius_assign_ca_fu_994_p1)) else "0";
    tmp_50_fu_1171_p1 <= p_y_assign_reg_669(12 - 1 downto 0);
    tmp_50_i_fu_1064_p2 <= "1" when (signed(i_0_i_cast_cast_i_fu_1060_p1) < signed(circles_rows_read_reg_2415)) else "0";
    tmp_51_fu_1189_p1 <= p_y_assign_reg_669(16 - 1 downto 0);
    tmp_52_fu_1221_p1 <= p_x_assign_reg_682(18 - 1 downto 0);
    tmp_52_i_fu_1079_p2 <= "1" when (signed(j_0_i_cast_cast_i_fu_1075_p1) < signed(circles_cols_read_reg_2420)) else "0";
    tmp_53_fu_1501_p4 <= min_dist_read_reg_2430(31 downto 1);
    tmp_53_i_fu_1117_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_i_reg_647),64));
    tmp_54_fu_1516_p1 <= min_dist_read_reg_2430(31 - 1 downto 0);
    tmp_54_i_cast_fu_1090_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_i_reg_636),9));
    tmp_55_fu_1293_p1 <= p_x_assign_reg_682(16 - 1 downto 0);
    tmp_55_i_fu_1148_p2 <= "1" when (signed(p_y_assign_cast_i_fu_1144_p1) < signed(rows_reg_2436)) else "0";
    tmp_56_fu_1663_p1 <= centers_val_q0;
    tmp_56_i_fu_1134_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n1_i_reg_658),64));
    tmp_57_fu_1690_p4 <= neg_mul_fu_1684_p2(64 downto 41);
    tmp_58_fu_1704_p4 <= mul_fu_1678_p2(64 downto 41);
    tmp_59_fu_1738_p1 <= tmp_75_i_fu_1731_p3(24 - 1 downto 0);
    tmp_59_i_fu_1490_p2 <= "1" when (signed(i2_cast_i_fu_1486_p1) < signed(rows_reg_2436)) else "0";
    tmp_5_fu_2127_p4 <= p_Val2_s_fu_2106_p2(63 downto 52);
    tmp_60_fu_1754_p1 <= tmp6_fu_1748_p2(16 - 1 downto 0);
    tmp_60_i_fu_1210_p2 <= "1" when (signed(p_x_assign_cast_i_fu_1206_p1) < signed(cols_reg_2442)) else "0";
    tmp_61_fu_1671_p0 <= centers_val_q0;
    tmp_61_fu_1671_p1 <= tmp_61_fu_1671_p0(16 - 1 downto 0);
    tmp_62_fu_1763_p1 <= tmp_75_i_fu_1731_p3(16 - 1 downto 0);
    tmp_63_fu_1803_p1 <= j_2_fu_1792_p2(10 - 1 downto 0);
    tmp_64_fu_1383_p3 <= x_i_reg_726(31 downto 31);
    tmp_64_i_fu_1245_p2 <= "1" when (edge_val_q0 = ap_const_lv8_0) else "0";
    tmp_65_fu_1397_p3 <= y_i_reg_736(31 downto 31);
    tmp_65_i_fu_1536_p2 <= "1" when (signed(j3_cast_i_fu_1532_p1) < signed(cols_reg_2442)) else "0";
    tmp_66_fu_1918_p1 <= p_max_r1_i_reg_824(31 - 1 downto 0);
    tmp_66_i_fu_1646_p2 <= "1" when (signed(i5_cast_i_fu_1642_p1) < signed(centers_length_i_fu_260)) else "0";
    tmp_67_i_fu_1251_p0 <= dy_val_q0;
    tmp_67_i_fu_1251_p1 <= dx_val_q0;
    tmp_67_i_fu_1251_p2 <= (tmp_67_i_fu_1251_p1 or tmp_67_i_fu_1251_p0);
    tmp_68_i_fu_1257_p2 <= "1" when (tmp_67_i_fu_1251_p2 = ap_const_lv16_0) else "0";
    tmp_71_i_fu_1553_p2 <= std_logic_vector(unsigned(tmp5_fu_1547_p2) + unsigned(phi_mul1_reg_767));
    tmp_72_fu_2273_p3 <= tmp_178_i_i_i_i_fu_2261_p2(53 downto 53);
        tmp_72_i_fu_1565_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(base_fu_1559_p2),64));

    tmp_73_fu_2338_p1 <= total_fu_2323_p2(10 - 1 downto 0);
    tmp_73_i_fu_1570_p2 <= "1" when (signed(accum_q0) > signed(acc_threshold_read_reg_2425)) else "0";
    tmp_74_fu_2359_p1 <= r0_i_reg_868(16 - 1 downto 0);
    tmp_74_i_fu_1658_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i5_i_reg_790),64));
    tmp_75_fu_2382_p1 <= total_3_i_reg_900(16 - 1 downto 0);
    tmp_75_i_fu_1731_p3 <= 
        neg_ti_fu_1725_p2 when (tmp_56_reg_2806(0) = '1') else 
        tmp_24_fu_1714_p1;
    tmp_76_i_fu_1742_p1 <= tmp_75_i_fu_1731_p3(26 - 1 downto 0);
    tmp_76_i_fu_1742_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ap_const_lv32_FFFFFEBE) * signed(tmp_76_i_fu_1742_p1))), 32));
    tmp_80_i_fu_2394_p0 <= vy_fu_1241_p1(16 - 1 downto 0);
    tmp_80_i_fu_2394_p1 <= vy_fu_1241_p1(16 - 1 downto 0);
        tmp_84_i_fu_1575_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_71_i_reg_2712),64));

    tmp_86_i_fu_1781_p2 <= "1" when (signed(j7_cast_i_fu_1777_p1) < signed(total_1_load_reg_2780)) else "0";
    tmp_87_i_fu_1579_p2 <= std_logic_vector(signed(tmp_71_i_reg_2712) + signed(ap_const_lv32_2));
        tmp_88_i_fu_1584_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_87_i_fu_1579_p2),64));

    tmp_911_i_fu_1798_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_fu_1792_p2),64));
    tmp_92_i_fu_1826_p2 <= std_logic_vector(unsigned(cx_fu_1818_p1) - unsigned(cx0_reg_2822));
    tmp_93_i_fu_1831_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_92_i_fu_1826_p2) * signed(tmp_92_i_fu_1826_p2))), 32));
        tmp_94_cast_i_fu_1842_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_94_i_fu_1837_p2),32));

    tmp_94_i_fu_1837_p2 <= std_logic_vector(unsigned(cy_cast_i_fu_1822_p1) - unsigned(cy0_reg_2833));
    tmp_95_i_fu_1846_p0 <= tmp_94_cast_i_fu_1842_p1(24 - 1 downto 0);
    tmp_95_i_fu_1846_p1 <= tmp_94_cast_i_fu_1842_p1(24 - 1 downto 0);
    tmp_95_i_fu_1846_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_95_i_fu_1846_p0) * signed(tmp_95_i_fu_1846_p1))), 32));
    tmp_96_i_fu_1858_p2 <= "1" when (signed(dist2_fu_1852_p2) > signed(min_dist2_reg_2775)) else "0";
    tmp_97_i_fu_1867_p2 <= "1" when (signed(j8_cast_i_fu_1863_p1) < signed(pt_buf_length_i_fu_256)) else "0";
    tmp_98_i_fu_1317_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(sx1_i_reg_695) * signed(p_min_r_2_reg_2459))), 32));
    tmp_99_i_fu_1327_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(sy1_i_reg_705) * signed(p_min_r_2_reg_2459))), 32));
    tmp_fu_1411_p2 <= (tmp_64_fu_1383_p3 or tmp_125_i_fu_1391_p2);
    tmp_i12_i_fu_1343_p0 <= pt_buf_length_i_fu_256;
        tmp_i12_i_fu_1343_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i12_i_fu_1343_p0),64));

    tmp_i13_i_fu_1620_p0 <= centers_length_i_fu_260;
        tmp_i13_i_fu_1620_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i13_i_fu_1620_p0),64));

    tmp_i15_cast_i_fu_1630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(min_dist_assign_reg_2698),32));
    tmp_i_239_fu_970_p2 <= "1" when (signed(max_r0_fu_956_p3) < signed(min_radius_dout)) else "0";
    tmp_i_fu_964_p2 <= "1" when (signed(min_radius_dout) < signed(ap_const_lv32_1)) else "0";
    tmp_i_i_fu_950_p2 <= "1" when (signed(edge_rows_dout) > signed(edge_cols_dout)) else "0";
    tmp_i_i_i_cast_i_fu_2209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_i_i_i_fu_2199_p4),137));
    tmp_i_i_i_fu_2059_p2 <= "1" when (unsigned(loc_V_fu_2049_p4) < unsigned(ap_const_lv11_3FE)) else "0";
    tmp_i_i_i_i_cast_i_fu_2213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_2_fu_2185_p4),12));
    tmp_i_i_i_i_fu_2199_p4 <= ((ap_const_lv1_1 & loc_V_3_fu_2195_p1) & ap_const_lv1_0);
    tmp_s_fu_2281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_72_fu_2273_p3),32));
    total_fu_2323_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(total_1_load_reg_2780));
    vx_fu_1237_p0 <= dx_val_q0;
        vx_fu_1237_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(vx_fu_1237_p0),32));

    vy_fu_1241_p0 <= dy_val_q0;
        vy_fu_1241_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(vy_fu_1241_p0),32));

    x0_fu_1297_p3 <= (tmp_55_fu_1293_p1 & ap_const_lv16_0);
    x1_1_fu_1450_p2 <= std_logic_vector(signed(sx1_i_reg_695) + signed(x_i_reg_726));
    x1_fu_1322_p2 <= std_logic_vector(unsigned(tmp_98_i_fu_1317_p2) + unsigned(x0_reg_2610));
    x_assign_4_fu_2166_p3 <= 
        x_assign_3_reg_2962 when (sel_tmp2_fu_2161_p2(0) = '1') else 
        sel_tmp_fu_2152_p1;
    xs_sig_V_fu_2121_p2 <= (tmp_173_i_i_i_fu_2115_p2 and loc_V_1_fu_2111_p1);
    y0_fu_1193_p3 <= (tmp_51_fu_1189_p1 & ap_const_lv16_0);
    y1_1_fu_1456_p2 <= std_logic_vector(signed(sy1_i_reg_705) + signed(y_i_reg_736));
    y1_fu_1332_p2 <= std_logic_vector(unsigned(tmp_99_i_fu_1327_p2) + unsigned(y0_reg_2526));
end behav;
